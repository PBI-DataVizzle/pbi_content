{
  "compatibilityLevel": 1550,
  "model": {
    "annotations": [
      {
        "name": "__PBI_TimeIntelligenceEnabled",
        "value": "0"
      },
      {
        "name": "PBIDesktopVersion",
        "value": "2.128.952.0 (24.04)"
      },
      {
        "name": "PBI_QueryOrder",
        "value": "[\"MelissaDeKorte_Calendars_v1\",\"Melissa_Calendar_v1_ChangeLog\",\"fnDateTableGenerator\",\"tbl_fnDateTableGenerator\",\"fnDates\",\"fxDates\",\"tbl_fnDates\"]"
      },
      {
        "name": "PBI_ProTooling",
        "value": "[\"DevMode\"]"
      }
    ],
    "culture": "en-US",
    "cultures": [
      {
        "name": "en-US",
        "linguisticMetadata": {
          "content": {
            "Language": "en-US",
            "Version": "1.0.0"
          },
          "contentType": "json"
        }
      }
    ],
    "dataAccessOptions": {
      "legacyRedirects": true,
      "returnErrorValuesAsNull": true
    },
    "defaultPowerBIDataSourceVersion": "powerBI_V3",
    "expressions": [
      {
        "name": "fnDateTableGenerator",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let",
          "    // Define metadata for the function, describing its purpose and usage.",
          "    metaDocumentation = type function (",
          "        startYear as (type number meta [",
          "            Documentation.FieldCaption = \"Calendar start year\",",
          "            Documentation.SampleValues = {2015},",
          "            Formatting.IsMultiLine = false,",
          "            Formatting.IsCode = false",
          "        ]),",
          "        endYear as (type number meta [",
          "            Documentation.FieldCaption = \"Calendar end of year\",",
          "            Documentation.SampleValues = {2024},",
          "            Formatting.IsMultiLine = false,",
          "            Formatting.IsCode = true",
          "        ])",
          "    ) as any meta [",
          "        Documentation.Name = \"Date Table Generator\",",
          "        Documentation.LongDescription = ",
          "            //This is the description of the documentation, it only accepts a handful of HTML tags for formatting.",
          "            \"    ",
          "                <p><b>Date Table Generator</b></p>",
          "                <li><b>Creator: </b>Rick de Groot.</li>",
          "                <li><b>Web: </b>https://gorilla.bi/power-query/date-table/</li>",
          "                <li>------------------------------------------------------</li>",
          "                <li><b>Editor: </b>Oscar Martinez.</li>",
          "                <li><b>Web: </b>https://bibb.pro</li>",
          "                <li><b>LinkedIn: </b>https://www.linkedin.com/in/oscarmartinezv/</li>",
          "                <p>This function generates a date table with a range of dates from the start year to the end year.</p>",
          "                <p><b>Parameters:</b></p>",
          "                <ul>",
          "                    <li><b>startYear:</b> The starting year of the date range.</li>",
          "                    <li><b>endYear:</b> The ending year of the date range.</li>",
          "                </ul>",
          "                <p><b>Returns:</b></p>",
          "                <p>A date table.</p>",
          "            \"",
          "    ],",
          "    // Define the main function",
          "    myFunction = (startYear as number, endYear as number ) =>",
          "        let",
          "            Today = Date.From( DateTime.LocalNow() ),",
          "            StartDate = #date(startYear, 1, 1),",
          "            EndDate = #date(endYear, 12, 31),",
          "            #\"List of Dates\" = List.Dates( StartDate, Duration.Days( EndDate - StartDate ) +1, #duration( 1, 0, 0, 0 ) ),",
          "            #\"Converted to Table\" = Table.FromList( #\"List of Dates\", Splitter.SplitByNothing(), type table[Date = Date.Type] ),",
          "            #\"Insert Date Integer\" = Table.AddColumn(#\"Converted to Table\", \"Date Integer\", each Number.From( Date.ToText( [Date], \"yyyyMMdd\" ) ), Int64.Type ),",
          "            #\"Insert Year\" = Table.AddColumn(#\"Insert Date Integer\", \"Year\", each Date.Year([Date]), Int64.Type),",
          "            // Creates a dynamic year value called 'Current' that moves with the current date. Put this value in a slicer and it automatically switches to the Current period.",
          "            #\"Add Year Default\" = Table.AddColumn(#\"Insert Year\", \"Year Default\", each if Date.Year( Today ) = [Year] then \"Current\" else Text.From( [Year] ), type text),",
          "            #\"Insert YYYY-MM\" = Table.AddColumn(#\"Add Year Default\", \"YYYY-MM\", each Date.ToText( [Date], \"yyyy-MM\"), type text),",
          "            #\"Insert Month-Year\" = Table.AddColumn(#\"Insert YYYY-MM\", \"Month-Year\", each Date.ToText( [Date], \"MMM yyyy\"), type text),",
          "            #\"Insert Month Number\" = Table.AddColumn(#\"Insert Month-Year\", \"Month Of Year\", each Date.Month([Date]), Int64.Type),",
          "            #\"Insert Month Name\" = Table.AddColumn(#\"Insert Month Number\", \"Month Name\", each Date.MonthName([Date], \"EN-us\"), type text),",
          "            #\"Insert Month Name Short\" = Table.AddColumn(#\"Insert Month Name\", \"Month Name Short\", each Date.ToText( [Date] , \"MMM\", \"EN-us\" ), type text),",
          "            // Creates a dynamic year value called 'Current' that moves with the current date. Put this value in a slicer and it automatically switches to the current period.",
          "            #\"Add Month Name Default\" = Table.AddColumn(#\"Insert Month Name Short\", \"Month Name Default\", each if Date.Month( Today ) = [Month Of Year] then \"Current\" else [Month Name], type text ),",
          "            #\"Insert Start of Month\" = Table.AddColumn(#\"Add Month Name Default\", \"Start of Month\", each Date.StartOfMonth([Date]), type date),",
          "            #\"Inserted End of Month\" = Table.AddColumn(#\"Insert Start of Month\", \"End of Month\", each Date.EndOfMonth( [Date] ), type date),",
          "            #\"Inserted Days in Month\" = Table.AddColumn(#\"Inserted End of Month\", \"Days in Month\", each Date.DaysInMonth([Date]), Int64.Type),",
          "            #\"Add ISO Week\" = Table.AddColumn(#\"Inserted Days in Month\", \"ISO Weeknumber\", each ",
          "                let",
          "                    CurrentThursday = Date.AddDays([Date], 3 - Date.DayOfWeek([Date], Day.Monday ) ),",
          "                    YearCurrThursday = Date.Year( CurrentThursday ),",
          "                    FirstThursdayOfYear = Date.AddDays(#date( YearCurrThursday,1,7),- Date.DayOfWeek(#date(YearCurrThursday,1,1), Day.Friday) ),",
          "                    ISO_Week = Duration.Days( CurrentThursday - FirstThursdayOfYear) / 7 + 1",
          "                in ",
          "            ISO_Week, Int64.Type ),",
          "            #\"Add ISO Year\" = Table.AddColumn(#\"Add ISO Week\", \"ISO Year\", each Date.Year(  Date.AddDays( [Date], 26 - [ISO Weeknumber] ) ), Int64.Type ),",
          "            #\"Insert Start of Week\" = Table.AddColumn(#\"Add ISO Year\", \"Start of Week\", each Date.StartOfWeek([Date], Day.Monday ), type date),",
          "            #\"Insert Quarter Number\" = Table.AddColumn(#\"Insert Start of Week\", \"Quarter Number\", each Date.QuarterOfYear([Date]), Int64.Type),",
          "            #\"Added Quarter\" = Table.AddColumn(#\"Insert Quarter Number\", \"Quarter\", each \"Q\" & Text.From( Date.QuarterOfYear([Date]) ), type text ),",
          "            #\"Add Year-Quarter\" = Table.AddColumn(#\"Added Quarter\", \"Year-Quarter\", each Text.From( Date.Year([Date]) ) & \"-Q\" & Text.From( Date.QuarterOfYear([Date]) ), type text ),",
          "            #\"Insert Day Name\" = Table.AddColumn(#\"Add Year-Quarter\", \"Day Name\", each Date.DayOfWeekName([Date], \"EN-us\" ), type text),",
          "            #\"Insert Day Name Short\" = Table.AddColumn( #\"Insert Day Name\", \"Day Name Short\", each Date.ToText( [Date], \"ddd\", \"EN-us\" ), type text),",
          "            #\"Insert Day of Month Number\" = Table.AddColumn(#\"Insert Day Name Short\", \"Day of Month Number\", each Date.Day([Date]), Int64.Type),",
          "            // Day.Monday indicates the week starts on Monday. Change this in case you want the week to start on a different date. ",
          "            #\"Insert Day of Week\" = Table.AddColumn(#\"Insert Day of Month Number\", \"Day of Week Number\", each Date.DayOfWeek( [Date], Day.Monday ), Int64.Type),",
          "            #\"Insert Day of Year\" = Table.AddColumn(#\"Insert Day of Week\", \"Day of Year Number\", each Date.DayOfYear( [Date] ), Int64.Type),",
          "            #\"Add Day Offset\" = Table.AddColumn(#\"Insert Day of Year\", \"Day Offset\", each Number.From( Date.From( Today ) - [Date] ) , Int64.Type ),",
          "            #\"Add Week Offset\" = Table.AddColumn(#\"Add Day Offset\", \"Week Offset\", each Duration.Days( Date.StartOfWeek( [Date], Day.Monday ) - Date.StartOfWeek( Today, Day.Monday ) ) / 7 , Int64.Type ),",
          "            #\"Add Month Offset\" = Table.AddColumn(#\"Add Week Offset\", \"Month Offset\", each ( [Year] - Date.Year( Today ) ) * 12 + ( [Month Of Year] - Date.Month( Today ) ), Int64.Type ),",
          "            #\"Add Quarter Offset\" = Table.AddColumn(#\"Add Month Offset\", \"Quarter Offset\", each ( [Year] - Date.Year(Today) ) * 4 + Date.QuarterOfYear( [Date] ) - Date.QuarterOfYear( Today ), Int64.Type ),",
          "            #\"Add Year Offset\" = Table.AddColumn(#\"Add Quarter Offset\", \"Year Offset\", each [Year] - Date.Year(Today), Int64.Type ),",
          "            #\"Insert Is Weekend\" = Table.AddColumn(#\"Add Year Offset\", \"Is Weekend\", each if Date.DayOfWeek( [Date] ) >= 5 then 1 else 0, Int64.Type ),",
          "            #\"Insert Is Weekday\" = Table.AddColumn(#\"Insert Is Weekend\", \"Is Weekday\", each if Date.DayOfWeek( [Date] ) < 5 then 1 else 0, Int64.Type )",
          "        in",
          "            #\"Insert Is Weekday\"",
          "",
          "    in",
          "    // Apply the function metadata to myFunction.",
          "    Value.ReplaceType(myFunction, metaDocumentation)"
        ],
        "kind": "m",
        "lineageTag": "337085df-aa70-4077-8224-afa941859738",
        "queryGroup": "Oscar Valerock"
      },
      {
        "name": "fnDates",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let",
          "  customFunction =",
          "// 1.0: invoke function & define parameter inputs",
          "  ",
          "    let",
          "     // 4.0: edit function metadata here",
          "      documentation = [",
          "        // Inspired by Enterprise DNA - Melissa de Korte (https://www.youtube.com/watch?v=H8F60sgQZOI)",
          "        Documentation.Name = \" fnDates \", ",
          "        Documentation.Description = \" Dates Table with Fiscal and Academic Year \", ",
          "        Documentation.LongDescription = \"    ",
          "                <p><b>  Date Table Generator  </b></p>",
          "",
          "                <li>------------------------------------------------------</li>",
          "                ",
          "                <li><b>  Creator: </b> Imran Haq  </li>",
          "                <li><b>  Web: </b> https://github.com/PBIQueryous/M-Code/tree/main/Calendars  </li>",
          "                <li><b>  Acknowledgements: </b> Melissa de Korte  </li>",
          "                <li><b>  LinkedIn: </b> (https://www.linkedin.com/in/melissa-de-korte/)  </li>",
          "",
          "                <li>------------------------------------------------------</li>",
          "",
          "                <li><b>  Editor: </b>  Oscar Martinez  </li>",
          "                <li><b>  Web: </b>  https://bibb.pro  </li>",
          "                <li><b>  LinkedIn: </b>  https://www.linkedin.com/in/oscarmartinezv/  </li>",
          "",
          "                <li>------------------------------------------------------</li>",
          "",
          "                <p><b>  Function Description:  </b></p>",
          "                <p>  This function generates a date table with a range of dates from the start year to the end year. Additional parameters are available generate Fiscal/Financial and Academic Year columns.  </p>",
          "                <p><b>  Parameters:  </b></p>",
          "                <ul>",
          "                    <li><b>  StartYearNUM:  </b>  The starting year of the date range. <code> (eg: 2023) </code> </li>",
          "                    <li><b>  EndYearNUM:  </b>  The ending year of the date range. <code> (eg: 2025) </code> </li>",
          "                    <li><b>  FYStartMonthNUM (optional):  </b>  The fiscal year start month.  <code> (eg: 4) </code> </li>",
          "                    <li><b>  AYStartMonthNUM (optional):  </b>  The academic year start month.  <code> (eg: 8) </code> </li>",
          "                    <li><b>  Holidays (optional):  </b>  Provide a list of public holidays.   </li>",
          "                    <li><b>  WDStartNum (optional):  </b>  Weekday start (1 = Monday, 0 = Sunday).  <code> (eg: null) </code> </li>",
          "                    <li><b>  AddRelativeNetworkDays (optional):  </b>  Include Relative Network Days.  <code> (eg: null) </code> </li>",
          "                </ul>",
          "                <p><b>  Returns:  </b></p>",
          "                <p>  A date table.  </p>",
          "",
          "                <li><b>  fx:  </b> <code> = fnDates(2023, 2025, 4, 8, null, null, null) </code> </li>",
          "            \", ",
          "        Documentation.Category = \" Dates / Calendar \", ",
          "        Documentation.Source = \"  PBI Queryous  \", ",
          "        Documentation.Version = \" 4.0: Upated for Oscar Valderock\", ",
          "        Documentation.Author = \" Imran Haq \", ",
          "        Documentation.Examples = {",
          "          [",
          "            Description = \"  Dates Table with Fiscal and Academic Year   \", ",
          "            Code = \" = fnDates(2023, 2025, 4, 8, null, null, null) \", ",
          "            Result = ",
          "\"",
          "  1. Input paramaters",
          "  2. Invoke function",
          "  3. Optional: replace start / end year parameters with dynamic values to automatically extend table",
          "",
          "\"",
          "          ]",
          "        /* ,",
          "            [",
          "            Description = \"  description   \",",
          "            Code    = \" code \", ",
          "            Result  = \" result #(cr,lf) new line",
          "                      #(cr,lf) new line #(cr,lf) 2 \"",
          "            ] */",
          "        }",
          "      ], ",
          "      invokeFunction = (StartYearNUM as number,  // start year             ",
          "      EndYearNUM as number,  // end year           ",
          "      optional FYStartMonthNum as nullable number,  // Fiscal Year Start                    ",
          "      optional AYStartMonthNum as nullable number,  // Academic Year Start                      ",
          "      optional Holidays as list,  // Holidays list                ",
          "      optional WDStartNum as number,  // WeekDay Start                ",
          "      optional AddRelativeNetWorkdays as logical // Network Days               ",
          "      ) as table =>",
          "        // ------------------------------------------------------------------",
          "        // 2.0: function transformations",
          "let",
          "          // // //Parameters",
          "",
          "          // StartDate = #date(2020, 1, 1), // - turn off in custom function",
          "          // EndDate = #date(2024, 12, 31), // -turn off in custom function",
          "          // FYStartMonthNum = 4,",
          "          // AYStartMonthNum  = 8,",
          "          // Holidays = {},",
          "          // WDStartNum = 1,",
          "          // AddRelativeNetWorkdays = true,",
          "",
          "        // //-- Date table code",
          "",
          "          StartDate = Date.From(\"01/01/\" & Text.From(StartYearNUM)),  // -- turn ON for CUSTOM FN",
          "          EndDate = Date.From(\"31/12/\" & Text.From(EndYearNUM)),  // -- turn ON for CUSTOM FN ",
          "                                                                             ",
          "          FYStartMonth = List.Select({1 .. 12}, each _ = FYStartMonthNum){0}? ?? 1, ",
          "          AYStartMonth = List.Select({1 .. 12}, each _ = AYStartMonthNum){0}? ?? 1, ",
          "          WDStart = List.Select({0 .. 1}, each _ = WDStartNum){0}? ?? 0, ",
          "          var_CurrentDate = Date.From(DateTime.FixedLocalNow()), ",
          "          var_DayCount = Duration.Days(Duration.From(EndDate - StartDate)) + 1, ",
          "          list_Dates = List.Dates(StartDate, var_DayCount, #duration(1, 0, 0, 0)), ",
          "          tx_AddToday = ",
          "            if EndDate < var_CurrentDate then",
          "              List.Combine({list_Dates, {var_CurrentDate}})",
          "            else",
          "              list_Dates, ",
          "          make_Table = Table.FromList(",
          "            tx_AddToday, ",
          "            Splitter.SplitByNothing(), ",
          "            type table [Date = Date.Type]",
          "          ), ",
          "          ",
          "          // start deriving columns here",
          "",
          "          // Year as integer",
          "          col_Year = Table.AddColumn(make_Table, \"YearNUM\", each Date.Year([Date]), type number),",
          "",
          "          // calendar Year Offset ",
          "          col_YearOFFSET = Table.AddColumn(",
          "            col_Year, ",
          "            \"YearOFFSET\", ",
          "            each Date.Year([Date]) - Date.Year(Date.From(var_CurrentDate)), ",
          "            type number",
          "          ), ",
          "",
          "          // is current calendar year complete as boolean",
          "          col_isYearComplete = Table.AddColumn(",
          "            col_YearOFFSET, ",
          "            \"isYearComplete\", ",
          "            each Date.EndOfYear([Date]) < Date.From(Date.EndOfYear(var_CurrentDate)), ",
          "            type logical",
          "          ),",
          "",
          "",
          "          // calendar quarter as integer ",
          "          col_QuarterNUM = Table.AddColumn(",
          "            col_isYearComplete, ",
          "            \"QuarterNUM\", ",
          "            each Date.QuarterOfYear([Date]), ",
          "            type number",
          "          ),",
          "",
          "          // calendar quart as text ",
          "          col_QuarterTXT = Table.AddColumn(",
          "            col_QuarterNUM, ",
          "            \"Quarter\", ",
          "            each \"Q\" & Number.ToText([QuarterNUM]), ",
          "            type text",
          "          ),",
          "",
          "          // start of calendar quarter as date ",
          "          col_QuarterSTART = Table.AddColumn(",
          "            col_QuarterTXT, ",
          "            \"Quarter Start\", ",
          "            each Date.StartOfQuarter([Date]), ",
          "            type date",
          "          ),",
          "",
          "          // end of calendar quarter as date ",
          "          col_QuarterEND = Table.AddColumn(",
          "            col_QuarterSTART, ",
          "            \"Quarter End\", ",
          "            each Date.EndOfQuarter([Date]), ",
          "            type date",
          "          ),",
          "",
          "          // calendar quarter & year as text (Q1 23) ",
          "          col_Quarter_Year = Table.AddColumn(",
          "            col_QuarterEND, ",
          "            \"Quarter & Year\", ",
          "            each \"Q\"",
          "              & Number.ToText(Date.QuarterOfYear([Date]))",
          "              & Date.ToText([Date], [Format = \" yy\"]), ",
          "            type text",
          "          ), ",
          "",
          "          // calendar quarter and year as integer key (202302)",
          "          col_QuarterYearINT = Table.AddColumn(",
          "            col_Quarter_Year, ",
          "            \"QuarterYearINT\", ",
          "            each [YearNUM] * 10 + [QuarterNUM], ",
          "            type number",
          "          ), ",
          "",
          "          // calendar quarter offset",
          "          col_QuarterOFFSET = Table.AddColumn(",
          "            col_QuarterYearINT, ",
          "            \"QuarterOFFSET\", ",
          "            each ((4 * Date.Year([Date])) + Date.QuarterOfYear([Date]))",
          "              - (",
          "                (4 * Date.Year(Date.From(var_CurrentDate)))",
          "                  + Date.QuarterOfYear(Date.From(var_CurrentDate))",
          "              ), ",
          "            type number",
          "          ), ",
          "",
          "          // is current quarter complete as boolean",
          "          col_isQuarterComplete = Table.AddColumn(",
          "            col_QuarterOFFSET, ",
          "            \"isQuarterComplete\", ",
          "            each ",
          "              let",
          "                qtrEnd        = Date.EndOfQuarter([Date]), ",
          "                currQtrEnd    = Date.From(Date.EndOfQuarter(var_CurrentDate)), ",
          "                isQtrComplete = qtrEnd < currQtrEnd",
          "              in",
          "                isQtrComplete, ",
          "            type logical",
          "          ), ",
          "",
          "          // calendar month num",
          "          col_MonthNUM = Table.AddColumn(",
          "            col_isQuarterComplete, ",
          "            \"MonthNUM\", ",
          "            each Date.Month([Date]), ",
          "            type number",
          "          ), ",
          "",
          "          // calendar month start date",
          "          col_MonthSTART = Table.AddColumn(",
          "            col_MonthNUM, ",
          "            \"Month Start\", ",
          "            each Date.StartOfMonth([Date]), ",
          "            type date",
          "          ), ",
          "",
          "          // calendar month end date",
          "          col_MonthEND = Table.AddColumn(",
          "            col_MonthSTART, ",
          "            \"Month End\", ",
          "            each Date.EndOfMonth([Date]), ",
          "            type date",
          "          ), ",
          "",
          "          // calendar month and year as text",
          "          col_CalendarMONTH = Table.AddColumn(",
          "            col_MonthEND, ",
          "            \"Month & Year\", ",
          "            each Text.Proper(Date.ToText([Date], [Format = \"MMM yy\"])), ",
          "            type text",
          "          ), ",
          "",
          "          // calendar month and year as integer key (20230001)",
          "          col_MonthYearINT = Table.AddColumn(",
          "            col_CalendarMONTH, ",
          "            \"MonthYearINT\", ",
          "            each [YearNUM] * 100 + [MonthNUM], ",
          "            type number",
          "          ), ",
          "",
          "          // calendar month offset",
          "          col_MonthOFFSET = Table.AddColumn(",
          "            col_MonthYearINT, ",
          "            \"MonthOFFSET\", ",
          "            each ((12 * Date.Year([Date])) + Date.Month([Date]))",
          "              - (",
          "                (12 * Date.Year(Date.From(var_CurrentDate)))",
          "                  + Date.Month(Date.From(var_CurrentDate))",
          "              ), ",
          "            type number",
          "          ), ",
          "",
          "          // is month complete as boolean",
          "          col_isMonthComplete = Table.AddColumn(",
          "            col_MonthOFFSET, ",
          "            \"isMonthComplete\", ",
          "            each Date.EndOfMonth([Date]) < Date.From(Date.EndOfMonth(var_CurrentDate)), ",
          "            type logical",
          "          ), ",
          "",
          "          // month long name",
          "          col_MonthNAME = Table.AddColumn(",
          "            col_isMonthComplete, ",
          "            \"Month Name\", ",
          "            each Text.Proper(Date.ToText([Date], \"MMMM\")), ",
          "            type text",
          "          ), ",
          "",
          "          // month short name",
          "          col_MonthNameSHORT = Table.AddColumn(",
          "            col_MonthNAME, ",
          "            \"Month Short\", ",
          "            each Text.Proper(Date.ToText([Date], \"MMM\")), ",
          "            type text",
          "          ), ",
          "",
          "          // month initial",
          "          col_MonthNameINITIAL = Table.AddColumn(",
          "            col_MonthNameSHORT, ",
          "            \"Month Initial\", ",
          "            each Text.Start([Month Name], 1)",
          "              & Text.Repeat(Character.FromNumber(8203), Date.Month([Date])), ",
          "            type text",
          "          ), ",
          "",
          "          // variable (current month name)",
          "          var_CurrentMonthName = Date.MonthName(DateTime.LocalNow()), ",
          "",
          "          // month selection (if month name = variable_crrentMonthName, then \"Current\" else [Month Short] )",
          "          col_MonthSelection = Table.AddColumn(",
          "            col_MonthNameINITIAL, ",
          "            \"Month Selection\", ",
          "            each if [Month Name] = var_CurrentMonthName then \"Current\" else [Month Short], ",
          "            type text",
          "          ), ",
          "",
          "          // fiscal month ( duplicate for report purposes - needs fiscal month sort order)",
          "          col_FiscalMonth = Table.DuplicateColumn(col_MonthSelection, \"Month Short\", \"Fiscal Month\", type text),",
          "",
          "          // academic month ( duplicate for report purposes - needs academic month sort order)",
          "          col_AcademicMonth = Table.DuplicateColumn(col_FiscalMonth, \"Month Short\", \"Academic Month\", type text),",
          "          ",
          "          // add day month number",
          "          col_DayMonthNUM = Table.AddColumn(",
          "            col_AcademicMonth, ",
          "            \"DayMonthNUM\", ",
          "            each Date.Day([Date]), ",
          "            type number",
          "          ), ",
          "",
          "          // calendar week number",
          "          col_WeekNUM = Table.AddColumn(",
          "            col_DayMonthNUM, ",
          "            \"Week Number\", ",
          "            each ",
          "              if Number.RoundDown(",
          "                (Date.DayOfYear([Date]) - (Date.DayOfWeek([Date], Day.Monday) + 1) + 10) / 7",
          "              )",
          "                = 0",
          "              then",
          "                Number.RoundDown(",
          "                  (",
          "                    Date.DayOfYear(#date(Date.Year([Date]) - 1, 12, 31))",
          "                      - (Date.DayOfWeek(#date(Date.Year([Date]) - 1, 12, 31), Day.Monday) + 1)",
          "                      + 10",
          "                  )",
          "                    / 7",
          "                )",
          "              else if (",
          "                Number.RoundDown(",
          "                  (Date.DayOfYear([Date]) - (Date.DayOfWeek([Date], Day.Monday) + 1) + 10) / 7",
          "                )",
          "                  = 53 and (Date.DayOfWeek(#date(Date.Year([Date]), 12, 31), Day.Monday) + 1 < 4)",
          "              )",
          "              then",
          "                1",
          "              else",
          "                Number.RoundDown(",
          "                  (Date.DayOfYear([Date]) - (Date.DayOfWeek([Date], Day.Monday) + 1) + 10) / 7",
          "                ), ",
          "            type number",
          "          ), ",
          "",
          "          // calendar week start date",
          "          col_WeekSTART = Table.AddColumn(",
          "            col_WeekNUM, ",
          "            \"Week Start\", ",
          "            each Date.StartOfWeek([Date], Day.Monday), ",
          "            type date",
          "          ), ",
          "",
          "          // calendar week end date",
          "          col_WeekEND = Table.AddColumn(",
          "            col_WeekSTART, ",
          "            \"Week End\", ",
          "            each Date.EndOfWeek([Date], Day.Monday), ",
          "            type date",
          "          ), ",
          "",
          "          // week and year as text",
          "          col_CalendarWEEK = Table.AddColumn(",
          "            col_WeekEND, ",
          "            \"Week & Year\", ",
          "            each \"W\"",
          "              & Text.PadStart(Text.From([Week Number]), 2, \"0\")",
          "              & \" \"",
          "              & Text.End(",
          "                Text.From(Date.Year(Date.AddDays(Date.StartOfWeek([Date], Day.Monday), 3))), ",
          "                2",
          "              ), ",
          "            type text",
          "          ), ",
          "",
          "          // week year integer",
          "          col_WeekYearINT = Table.AddColumn(",
          "            col_CalendarWEEK, ",
          "            \"WeekYearINT\", ",
          "            each Date.Year(Date.AddDays(Date.StartOfWeek([Date], Day.Monday), 3))",
          "              * 100 + [Week Number], ",
          "            Int64.Type",
          "          ), ",
          "          col_WeekOFFSET = Table.AddColumn(",
          "            col_WeekYearINT, ",
          "            \"WeekOFFSET\", ",
          "            each (",
          "              Number.From(Date.StartOfWeek([Date], Day.Monday))",
          "                - Number.From(Date.StartOfWeek(var_CurrentDate, Day.Monday))",
          "            )",
          "              / 7, ",
          "            type number",
          "          ), ",
          "          col_isWeekComplete = Table.AddColumn(",
          "            col_WeekOFFSET, ",
          "            \"WeekCompleted\", ",
          "            each Date.EndOfWeek([Date], Day.Monday)",
          "              < Date.From(Date.EndOfWeek(var_CurrentDate, Day.Monday)), ",
          "            type logical",
          "          ), ",
          "          col_DayWeekNUM = Table.AddColumn(",
          "            col_isWeekComplete, ",
          "            \"DayWeekNUM\", ",
          "            each Date.DayOfWeek([Date], Day.Monday) + WDStart, ",
          "            Int64.Type",
          "          ), ",
          "          col_DayNAME = Table.AddColumn(",
          "            col_DayWeekNUM, ",
          "            \"Day of Week Name\", ",
          "            each Text.Proper(Date.ToText([Date], \"dddd\")), ",
          "            type text",
          "          ), ",
          "          col_DayINITIAL = Table.AddColumn(",
          "            col_DayNAME, ",
          "            \"Day Initial\", ",
          "            each Text.Proper(Text.Start([Day of Week Name], 1))",
          "              & Text.Repeat(",
          "                Character.FromNumber(8203), ",
          "                Date.DayOfWeek([Date], Day.Monday) + WDStart",
          "              ), ",
          "            type text",
          "          ), ",
          "          col_DayYearNUM = Table.AddColumn(",
          "            col_DayINITIAL, ",
          "            \"DayYearNUM\", ",
          "            each Date.DayOfYear([Date]), ",
          "            Int64.Type",
          "          ), ",
          "          col_DayMonthYearINT = Table.AddColumn(",
          "            col_DayYearNUM, ",
          "            \"DateINT\", ",
          "            each [YearNUM] * 10000 + [MonthNUM] * 100 + [DayMonthNUM], ",
          "            type number",
          "          ), ",
          "          col_DayOFFSET = Table.AddColumn(",
          "            col_DayMonthYearINT, ",
          "            \"DayOffset\", ",
          "            each Number.From([Date]) - Number.From(var_CurrentDate), ",
          "            type number",
          "          ), ",
          "          col_isYTD = Table.AddColumn(",
          "            col_DayOFFSET, ",
          "            \"IsYTD\", ",
          "            each ([Date] <= Date.From(var_CurrentDate)), ",
          "            type logical",
          "          ), ",
          "          col_isFuture = Table.AddColumn(",
          "            col_isYTD, ",
          "            \"IsFuture\", ",
          "            each not ([Date] <= Date.From(var_CurrentDate)), ",
          "            type logical",
          "          ), ",
          "          col_isAfterToday = Table.AddColumn(",
          "            col_isFuture, ",
          "            \"IsAfterToday\", ",
          "            each not ([Date] <= Date.From(var_CurrentDate)), ",
          "            type logical",
          "          ), ",
          "          col_isWeekDay = Table.AddColumn(",
          "            col_isAfterToday, ",
          "            \"IsWeekDay\", ",
          "            each if Date.DayOfWeek([Date], Day.Monday) > 4 then false else true, ",
          "            type logical",
          "          ), ",
          "          col_isHoliday = Table.AddColumn(",
          "            col_isWeekDay, ",
          "            \"IsHoliday\", ",
          "            each if Holidays = null then \"Unknown\" else List.Contains(Holidays, [Date]), ",
          "            if Holidays = null then type text else type logical",
          "          ), ",
          "          col_isBusinessDay = Table.AddColumn(",
          "            col_isHoliday, ",
          "            \"IsBusinessDay\", ",
          "            each if [IsWeekDay] = true and [IsHoliday] <> true then true else false, ",
          "            type logical",
          "          ), ",
          "          col_DayTYPE = Table.AddColumn(",
          "            col_isBusinessDay, ",
          "            \"Day Type\", ",
          "            each ",
          "              if [IsHoliday] = true then",
          "                \"Holiday\"",
          "              else if [IsWeekDay] = false then",
          "                \"Weekend\"",
          "              else if [IsWeekDay] = true then",
          "                \"Weekday\"",
          "              else",
          "                null, ",
          "            type text",
          "          ), ",
          "          col_ISOYear = Table.AddColumn(",
          "            col_DayTYPE, ",
          "            \"ISO Year\", ",
          "            each Date.Year(Date.AddDays(Date.StartOfWeek([Date], Day.Monday), 3)), ",
          "            type number",
          "          ), ",
          "          col_ISOQuarterNUM = Table.AddColumn(",
          "            col_ISOYear, ",
          "            \"ISO QuarterNUM\", ",
          "            each ",
          "              if [Week Number] > 39 then",
          "                4",
          "              else if [Week Number] > 26 then",
          "                3",
          "              else if [Week Number] > 13 then",
          "                2",
          "              else",
          "                1, ",
          "            Int64.Type",
          "          ), ",
          "          col_ISOQuarterNAME = Table.AddColumn(",
          "            col_ISOQuarterNUM, ",
          "            \"ISO Quarter\", ",
          "            each \"Q\" & Number.ToText([ISO QuarterNUM]), ",
          "            type text",
          "          ), ",
          "          col_ISOQuarterYearNAME = Table.AddColumn(",
          "            col_ISOQuarterNAME, ",
          "            \"ISO Quarter & Year\", ",
          "            each \"Q\" & Number.ToText([ISO QuarterNUM]) & \" \" & Number.ToText([ISO Year]), ",
          "            type text",
          "          ), ",
          "          col_ISOQuarterYearINT = Table.AddColumn(",
          "            col_ISOQuarterYearNAME, ",
          "            \"ISO QuarterYearINT\", ",
          "            each [ISO Year] * 10 + [ISO QuarterNUM], ",
          "            type number",
          "          ), ",
          "          // BufferTable = Table.Buffer(Table.Distinct( col_ISOQuarterYearINT[[ISO Year], [DateInt]])),",
          "          // InsertISOday = Table.AddColumn(col_ISOQuarterYearINT, \"ISO Day of Year\", (OT) => Table.RowCount( Table.SelectRows( BufferTable, (IT) => IT[DateInt] <= OT[DateInt] and IT[ISO Year] = OT[ISO Year])),  Int64.Type),",
          "          col_FY = Table.AddColumn(",
          "            col_ISOQuarterYearINT, ",
          "            \"Fiscal Year\", ",
          "            each ",
          "              let",
          "                arg1     = ([MonthNUM] >= FYStartMonth and FYStartMonth > 1), ",
          "                yearNum1 = Text.End(Text.From([YearNUM] + 0), 2), ",
          "                yearNum0 = Text.End(Text.From([YearNUM] - 1), 2), ",
          "                result1  = if arg1 then yearNum1 else yearNum0",
          "              in",
          "                \"FY\" & result1, ",
          "            type text",
          "          ),",
          "          col_FY1 = Table.AddColumn(",
          "            col_FY, ",
          "            \"Fiscal_Year\", ",
          "            each ",
          "              let",
          "                ",
          "                yearNum1 = Number.From(Text.End([Fiscal Year], 2)), ",
          "                 ",
          "                result1  = Text.From(yearNum1) & \"/\" & Text.From(yearNum1+1)",
          "              in",
          "                result1, ",
          "            type text",
          "          ), ",
          "          col_AY = Table.AddColumn(",
          "            col_FY1, ",
          "            \"Academic Year\", ",
          "            each ",
          "              let",
          "                arg1     = ([MonthNUM] >= AYStartMonth and AYStartMonth > 1), ",
          "                yearNum1 = Text.End(Text.From([YearNUM] + 0), 2), ",
          "                yearNum0 = Text.End(Text.From([YearNUM] - 1), 2), ",
          "                result1  = if arg1 then yearNum1 else yearNum0",
          "              in",
          "                \"AY\" & result1, ",
          "            type text",
          "          ),",
          "          col_AY1 = Table.AddColumn(",
          "            col_AY, ",
          "            \"Academic_Year\", ",
          "            each ",
          "              let",
          "                ",
          "                yearNum1 = Number.From(Text.End([Academic Year], 2)), ",
          "                 ",
          "                result1  = Text.From(yearNum1) & \"/\" & Text.From(yearNum1+1)",
          "              in",
          "                result1, ",
          "            type text",
          "          ),  ",
          "          //col_FYs = Table.AddColumn(col_FY, \"Fiscal Year short\", each \"FY\" & (if [MonthNUM] >= FYStartMonth and FYStartMonth >1 then Text.PadEnd( Text.End( Text.From([YearNUM] +1), 2), 2, \"0\") else Text.End( Text.From([YearNUM]), 2)), type text),",
          "          col_FQ = Table.AddColumn(",
          "            col_AY1, ",
          "            \"Fiscal Quarter\", ",
          "            each \"FQ\"",
          "              & Text.From(",
          "                Number.RoundUp(Date.Month(Date.AddMonths([Date], - (FYStartMonth - 1))) / 3)",
          "              )",
          "              & \" \"",
          "              & (",
          "                if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then",
          "                  Text.End(Text.From([YearNUM] + 0), 2)",
          "                else",
          "                  Text.End(Text.From([YearNUM] - 1), 2)",
          "              ), ",
          "            type text",
          "          ), ",
          "          col_AQ = Table.AddColumn(",
          "            col_FQ, ",
          "            \"Academic Quarter\", ",
          "            each \"AQ\"",
          "              & Text.From(",
          "                Number.RoundUp(Date.Month(Date.AddMonths([Date], - (AYStartMonth - 1))) / 3)",
          "              )",
          "              & \" \"",
          "              & (",
          "                if [MonthNUM] >= AYStartMonth and AYStartMonth > 1 then",
          "                  Text.End(Text.From([YearNUM] + 0), 2)",
          "                else",
          "                  Text.End(Text.From([YearNUM] - 1), 2)",
          "              ), ",
          "            type text",
          "          ), ",
          "          col_FQtrYrINT = Table.AddColumn(",
          "            col_AQ, ",
          "            \"FiscalQuarterYearINT\", ",
          "            each (",
          "              if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then",
          "                [YearNUM] + 0",
          "              else",
          "                [YearNUM] - 1",
          "            )",
          "              * 10 + Number.RoundUp(Date.Month(Date.AddMonths([Date], - (FYStartMonth - 1))) / 3), ",
          "            type number",
          "          ), ",
          "          col_AQtrYrINT = Table.AddColumn(",
          "            col_FQtrYrINT, ",
          "            \"AcademicQuarterYearINT\", ",
          "            each (",
          "              if [MonthNUM] >= AYStartMonth and AYStartMonth > 1 then",
          "                [YearNUM] + 0",
          "              else",
          "                [YearNUM] - 1",
          "            )",
          "              * 10 + Number.RoundUp(Date.Month(Date.AddMonths([Date], - (AYStartMonth - 1))) / 3), ",
          "            type number",
          "          ), ",
          "          col_FPNUM = Table.AddColumn(",
          "            col_AQtrYrINT, ",
          "            \"FiscalPeriodNUM\", ",
          "            each ",
          "              let",
          "                arg1   = [MonthNUM] >= FYStartMonth and FYStartMonth > 1, ",
          "                res1   = [MonthNUM] - (FYStartMonth - 1), ",
          "                arg2   = [MonthNUM] >= FYStartMonth and FYStartMonth = 1, ",
          "                res2   = [MonthNUM], ",
          "                res3   = [MonthNUM] + (12 - FYStartMonth + 1), ",
          "                result = if arg1 then res1 else if arg2 then res2 else res3",
          "              in",
          "                result, ",
          "            type number",
          "          ), ",
          "          col_APNUM = Table.AddColumn(",
          "            col_FPNUM, ",
          "            \"AcademicPeriodNUM\", ",
          "            each ",
          "              let",
          "                arg1   = [MonthNUM] >= AYStartMonth and AYStartMonth > 1, ",
          "                res1   = [MonthNUM] - (AYStartMonth - 1), ",
          "                arg2   = [MonthNUM] >= AYStartMonth and AYStartMonth = 1, ",
          "                res2   = [MonthNUM], ",
          "                res3   = [MonthNUM] + (12 - AYStartMonth + 1), ",
          "                result = if arg1 then res1 else if arg2 then res2 else res3",
          "              in",
          "                result, ",
          "            type number",
          "          ), ",
          "          col_FYPeriod = Table.AddColumn(",
          "            col_APNUM, ",
          "            \"Fiscal Period\", ",
          "            each \"FP\"",
          "              & Text.PadStart(Text.From([FiscalPeriodNUM]), 2, \"0\")",
          "              & \" \"",
          "              & (",
          "                if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then",
          "                  Text.End(Text.From([YearNUM] + 0), 2)",
          "                else",
          "                  Text.End(Text.From([YearNUM] - 1), 2)",
          "              ), ",
          "            type text",
          "          ), ",
          "          col_AYPeriod = Table.AddColumn(",
          "            col_FYPeriod, ",
          "            \"Academic Period\", ",
          "            each \"AP\"",
          "              & Text.PadStart(Text.From([AcademicPeriodNUM]), 2, \"0\")",
          "              & \" \"",
          "              & (",
          "                if [MonthNUM] >= AYStartMonth and AYStartMonth > 1 then",
          "                  Text.End(Text.From([YearNUM] + 0), 2)",
          "                else",
          "                  Text.End(Text.From([YearNUM] - 1), 2)",
          "              ), ",
          "            type text",
          "          ), ",
          "          col_FPYrINT = Table.AddColumn(",
          "            col_AYPeriod, ",
          "            \"FiscalPeriodYearINT\", ",
          "            each (",
          "              if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then",
          "                [YearNUM] + 0",
          "              else",
          "                [YearNUM] - 1",
          "            )",
          "              * 100 + [FiscalPeriodNUM], ",
          "            type number",
          "          ), ",
          "          col_APYrINT = Table.AddColumn(",
          "            col_FPYrINT, ",
          "            \"AcademicPeriodYearINT\", ",
          "            each (",
          "              if [MonthNUM] >= AYStartMonth and AYStartMonth > 1 then",
          "                [YearNUM] + 0",
          "              else",
          "                [YearNUM] - 1",
          "            )",
          "              * 100 + [AcademicPeriodNUM], ",
          "            type number",
          "          ), ",
          "          var_FiscalCalendarSTART = #date(Date.Year(StartDate) - 1, FYStartMonth, 1), ",
          "          var_AcademicCalendarSTART = #date(Date.Year(StartDate) - 1, AYStartMonth, 1), ",
          "          col_FiscalFirstDay = Table.AddColumn(",
          "            col_APYrINT, ",
          "            \"FiscalFirstDate\", ",
          "            each ",
          "              if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then",
          "                #date(Date.Year([Date]) + 0, FYStartMonth, 1)",
          "              else",
          "                #date(Date.Year([Date]) - 1, FYStartMonth, 1), ",
          "            type date",
          "          ), ",
          "          col_AYStartDate = Table.AddColumn(",
          "            col_FiscalFirstDay, ",
          "            \"AYStartDate\", ",
          "            each ",
          "              if [MonthNUM] >= AYStartMonth and AYStartMonth > 1 then",
          "                #date(Date.Year([Date]) + 0, AYStartMonth, 1)",
          "              else",
          "                #date(Date.Year([Date]) - 1, AYStartMonth, 1), ",
          "            type date",
          "          ), ",
          "          col_AYEndDate = Table.AddColumn(",
          "            col_AYStartDate, ",
          "            \"AYEndDate\", ",
          "            each ",
          "              if [MonthNUM] >= AYStartMonth and AYStartMonth > 1 then",
          "                Date.AddDays(#date(Date.Year([Date]) + 1, AYStartMonth, 1),-1)",
          "              else",
          "                Date.AddDays(#date(Date.Year([Date]) - 0, AYStartMonth, 1),-1), ",
          "            type date",
          "          ), ",
          "          col_FYStartDate = Table.AddColumn(",
          "            col_AYEndDate, ",
          "            \"FYStartDate\", ",
          "            each ",
          "              if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then",
          "                #date(Date.Year([Date]) + 0, FYStartMonth, 1)",
          "              else",
          "                #date(Date.Year([Date]) - 1, FYStartMonth, 1), ",
          "            type date",
          "          ), ",
          "          col_FYEndDate = Table.AddColumn(",
          "            col_FYStartDate, ",
          "            \"FYEndDate\", ",
          "            each ",
          "              if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then",
          "                Date.AddDays(#date(Date.Year([Date]) + 1, FYStartMonth, 1),-1)",
          "              else",
          "                Date.AddDays(#date(Date.Year([Date]) - 0, FYStartMonth, 1),-1), ",
          "            type date",
          "          ),",
          "          //------------------------------------------\\\\ ",
          "          //----- begin sub-ETL stages and return later ----\\\\",
          "          var_Table = Table.FromList(",
          "            List.Transform(",
          "              {Number.From(var_AcademicCalendarSTART) .. Number.From(EndDate)}, ",
          "              Date.From",
          "            ), ",
          "            Splitter.SplitByNothing(), ",
          "            type table [DateFW = Date.Type]",
          "          ), ",
          "          col_FFD = Table.AddColumn(",
          "            var_Table, ",
          "            \"FiscalFirstDay\", ",
          "            each ",
          "              if Date.Month([DateFW]) < FYStartMonth then",
          "                #date(Date.Year([DateFW]) - 1, FYStartMonth, 1)",
          "              else",
          "                #date(Date.Year([DateFW]) + 0, FYStartMonth, 1)",
          "          ), ",
          "          col_FWSD = Table.AddColumn(",
          "            col_FFD, ",
          "            \"FWStartDate\", ",
          "            each Date.AddYears(Date.StartOfWeek([DateFW], Day.Monday), 0)",
          "          ), ",
          "          tbl_Group1 = Table.Group(",
          "            col_FWSD, ",
          "            {\"FiscalFirstDay\", \"FWStartDate\"}, ",
          "            {",
          "              {",
          "                \"AllRows\", ",
          "                each _, ",
          "                type table [DateFW = nullable date, FiscalFirstDay = date, FWStartDate = date]",
          "              }",
          "            }",
          "          ), ",
          "          tbl_Group2 = Table.Group(",
          "            tbl_Group1, ",
          "            {\"FiscalFirstDay\"}, ",
          "            {",
          "              {",
          "                \"AllRows2\", ",
          "                each _, ",
          "                type table [FiscalFirstDay = date, FWStartDate = date, AllRows = table]",
          "              }",
          "            }",
          "          ), ",
          "          col_Index = Table.AddColumn(",
          "            tbl_Group2, ",
          "            \"Custom\", ",
          "            each Table.AddIndexColumn([AllRows2], \"Fiscal Week Number\", 1, 1)",
          "          )[[Custom]], ",
          "          cols_Expand1 = Table.ExpandTableColumn(",
          "            col_Index, ",
          "            \"Custom\", ",
          "            {\"FiscalFirstDay\", \"FWStartDate\", \"AllRows\", \"Fiscal Week Number\"}, ",
          "            {\"FiscalFirstDay\", \"FWStartDate\", \"AllRows\", \"Fiscal Week Number\"}",
          "          ), ",
          "          cols_Expand2 = Table.ExpandTableColumn(cols_Expand1, \"AllRows\", {\"DateFW\"}, {\"DateFW\"})[",
          "            [DateFW], ",
          "            [Fiscal Week Number]",
          "          ], ",
          "          //------ return here to begin ETL steps again",
          "          join_Date_DateFW = Table.Join(",
          "            col_FYEndDate, ",
          "            {\"Date\"}, ",
          "            cols_Expand2, ",
          "            {\"DateFW\"}, ",
          "            JoinKind.LeftOuter, ",
          "            JoinAlgorithm.SortMerge",
          "          ), ",
          "          var_FYLogicTest = List.Contains({null}, FYStartMonthNum), ",
          "          var_AYLogicTest = List.Contains({null}, AYStartMonthNum), ",
          "          var_FYAYTest = var_FYLogicTest = true and var_AYLogicTest = true, ",
          "          txt_Replace = ",
          "            if var_AYLogicTest then",
          "              Table.ReplaceValue(",
          "                join_Date_DateFW, ",
          "                each [Fiscal Week Number], ",
          "                each if FYStartMonth = 1 then [Week Number] else [Fiscal Week Number], ",
          "                Replacer.ReplaceValue, ",
          "                {\"Fiscal Week Number\"}",
          "              )",
          "            else",
          "              join_Date_DateFW, ",
          "          col_FYW = Table.AddColumn(",
          "            txt_Replace, ",
          "            \"Fiscal Week\", ",
          "            each ",
          "              if var_AYLogicTest then",
          "                \"F\" & [#\"Week & Year\"]",
          "              else if FYStartMonth = 1 then",
          "                \"FW\"",
          "                  & Text.PadStart(Text.From([Fiscal Week Number]), 2, \"0\")",
          "                  & Date.ToText(Date.AddYears([Date], 0), \" yy\")",
          "              else if Date.Month([Date]) < FYStartMonth then",
          "                \"FW\"",
          "                  & Text.PadStart(Text.From([Fiscal Week Number]), 2, \"0\")",
          "                  & Date.ToText(Date.AddYears([Date], - 1), \" yy\")",
          "              else",
          "                \"FW\"",
          "                  & Text.PadStart(Text.From([Fiscal Week Number]), 2, \"0\")",
          "                  & \" \"",
          "                  & Text.End(Text.From(Date.Year([Date]) + 0), 2), ",
          "            type text",
          "          ), ",
          "          col_FWYearINT = Table.AddColumn(",
          "            col_FYW, ",
          "            \"FiscalWeekYearINT\", ",
          "            each ",
          "              if var_FYLogicTest then",
          "                [WeeknYear]",
          "              else",
          "                (",
          "                  if FYStartMonth = 1 then",
          "                    Date.Year([Date])",
          "                  else if Date.Month([Date]) < FYStartMonth then",
          "                    Date.Year([Date]) - 1",
          "                  else",
          "                    Date.Year([Date]) + 0",
          "                )",
          "                  * 100 + [Fiscal Week Number], ",
          "            Int64.Type",
          "          ), ",
          "          rec_CurrentDate = Table.SelectRows(col_FWYearINT, each ([Date] = var_CurrentDate)), ",
          "          var_CurrISOYear = rec_CurrentDate{0}[ISO Year], ",
          "          var_CurrISOQtr = rec_CurrentDate{0}[ISO QuarterNUM], ",
          "          var_CurrYear = rec_CurrentDate{0}[YearNUM], ",
          "          var_CurrMonth = rec_CurrentDate{0}[MonthNUM], ",
          "          var_FFD = rec_CurrentDate{0}[FiscalFirstDate], ",
          "          var_AFD = rec_CurrentDate{0}[AYStartDate], ",
          "          var_PFFD = Date.AddYears(var_FFD, - 1), ",
          "          var_PAFD = Date.AddYears(var_AFD, - 1), ",
          "          var_CurrFY = rec_CurrentDate{0}[Fiscal Year], ",
          "          var_CurrAY = rec_CurrentDate{0}[Academic Year], ",
          "          var_CurrFQ = rec_CurrentDate{0}[FiscalQuarterYearINT], ",
          "          var_CurrAQ = rec_CurrentDate{0}[AcademicQuarterYearINT], ",
          "          var_CurrFP = rec_CurrentDate{0}[FiscalPeriodYearINT], ",
          "          var_CurrAP = rec_CurrentDate{0}[AcademicPeriodYearINT], ",
          "          var_CurrFW = rec_CurrentDate{0}[FiscalWeekYearINT], ",
          "          col_ISOYearOFFSET = Table.AddColumn(",
          "            col_FWYearINT, ",
          "            \"ISO YearOFFSET\", ",
          "            each [ISO Year] - var_CurrISOYear, ",
          "            type number",
          "          ), ",
          "          col_ISOQuarterOFFSET = Table.AddColumn(",
          "            col_ISOYearOFFSET, ",
          "            \"ISO QuarterOFFSET\", ",
          "            each ((4 * [ISO Year]) + [ISO QuarterNUM]) - ((4 * var_CurrISOYear) + var_CurrISOQtr), ",
          "            type number",
          "          ), ",
          "          col_FiscalYearOFFSET = Table.AddColumn(",
          "            col_ISOQuarterOFFSET, ",
          "            \"FiscalYearOFFSET\", ",
          "            each try",
          "              (if [MonthNUM] >= FYStartMonth then [YearNUM] + 1 else [YearNUM])",
          "                - (if var_CurrMonth >= FYStartMonth then var_CurrYear + 1 else var_CurrYear)",
          "            otherwise",
          "              null, ",
          "            type number",
          "          ), ",
          "          col_AcademicYearOFFSET = Table.AddColumn(",
          "            col_FiscalYearOFFSET, ",
          "            \"AcademicYearOFFSET\", ",
          "            each try",
          "              (if [MonthNUM] >= AYStartMonth then [YearNUM] + 1 else [YearNUM])",
          "                - (if var_CurrMonth >= AYStartMonth then var_CurrYear + 1 else var_CurrYear)",
          "            otherwise",
          "              null, ",
          "            type number",
          "          ), ",
          "          col_CYSelection = Table.AddColumn(",
          "            col_AcademicYearOFFSET, ",
          "            \"CY Selection\", ",
          "            each if [YearOFFSET] = 0 then \"Current CY\" else Text.From([YearNUM]), ",
          "            type text",
          "          ),",
          "          col_AYSelection = Table.AddColumn(",
          "            col_CYSelection, ",
          "            \"AY Selection\", ",
          "            each if [AcademicYearOFFSET] = 0 then \"Current AY\" else [Academic_Year], ",
          "            type text",
          "          ),",
          "          col_FYSelection = Table.AddColumn(",
          "            col_AYSelection, ",
          "            \"FY Selection\", ",
          "            each if [FiscalYearOFFSET] = 0 then \"Current FY\" else [Fiscal_Year], ",
          "            type text",
          "          ),",
          "",
          "          //-- enter function here",
          "          fn_GetAcQtrOFFSET = ",
          "            let",
          "              fxAddFiscalQuarterOFFSET = (Date as date, FiscalYearStartMonth as number) as number =>",
          "                let",
          "                  CurrentDate = Date.From(DateTime.LocalNow()), ",
          "                  n = ",
          "                    if List.Contains({1 .. 12}, FiscalYearStartMonth) and FiscalYearStartMonth > 1 then",
          "                      FiscalYearStartMonth - 1",
          "                    else",
          "                      0, ",
          "                  FiscalQuarterOFFSET = (",
          "                    (4 * Date.Year(Date.AddMonths(Date.StartOfMonth(Date), - n)))",
          "                      + Date.QuarterOfYear(Date.AddMonths(Date.StartOfMonth(Date), - n))",
          "                  )",
          "                    - (",
          "                      (4 * Date.Year(Date.AddMonths(Date.StartOfMonth(CurrentDate), - n)))",
          "                        + Date.QuarterOfYear(Date.AddMonths(Date.StartOfMonth(CurrentDate), - n))",
          "                    )",
          "                in",
          "                  FiscalQuarterOFFSET",
          "            in",
          "              fxAddFiscalQuarterOFFSET, ",
          "",
          "          //-- Restart table here",
          "          col_AYQtrOFFSET = Table.AddColumn(",
          "            col_FYSelection, ",
          "            \"AcademicQuarterOFFSET\", ",
          "            each fn_GetAcQtrOFFSET([Date], AYStartMonth), ",
          "            Int64.Type",
          "          ), ",
          "          col_FYQtrOFFSET = Table.AddColumn(",
          "            col_AYQtrOFFSET, ",
          "            \"FiscalQuarterOFFSET\", ",
          "            each fn_GetAcQtrOFFSET([Date], FYStartMonth), ",
          "            Int64.Type",
          "          ), ",
          "          col_isCurrFY = Table.AddColumn(",
          "            col_FYQtrOFFSET, ",
          "            \"IsCurrentFY\", ",
          "            each if [Fiscal Year] = var_CurrFY then true else false, ",
          "            type logical",
          "          ), ",
          "          col_isCurrAY = Table.AddColumn(",
          "            col_isCurrFY, ",
          "            \"IsCurrentAY\", ",
          "            each if [Academic Year] = var_CurrAY then true else false, ",
          "            type logical",
          "          ), ",
          "          col_isCurrFQ = Table.AddColumn(",
          "            col_isCurrAY, ",
          "            \"IsCurrentFQ\", ",
          "            each if [FiscalQuarterYearINT] = var_CurrFQ then true else false, ",
          "            type logical",
          "          ), ",
          "          col_isCurrAQ = Table.AddColumn(",
          "            col_isCurrFQ, ",
          "            \"IsCurrentAQ\", ",
          "            each if [AcademicQuarterYearINT] = var_CurrAQ then true else false, ",
          "            type logical",
          "          ), ",
          "          col_isCurrFP = Table.AddColumn(",
          "            col_isCurrAQ, ",
          "            \"IsCurrentFP\", ",
          "            each if [FiscalPeriodYearINT] = var_CurrFP then true else false, ",
          "            type logical",
          "          ), ",
          "          col_isCurrAP = Table.AddColumn(",
          "            col_isCurrFP, ",
          "            \"IsCurrentAP\", ",
          "            each if [AcademicPeriodYearINT] = var_CurrAP then true else false, ",
          "            type logical",
          "          ), ",
          "          col_isCurrFW = Table.AddColumn(",
          "            col_isCurrAP, ",
          "            \"IsCurrentFW\", ",
          "            each if [FiscalWeekYearINT] = var_CurrFW then true else false, ",
          "            type logical",
          "          ), ",
          "          col_isPrevYTD = Table.AddColumn(",
          "            col_isCurrFW, ",
          "            \"IsPreviousYTD\", ",
          "            each ",
          "              if var_CurrYear - 1 = [YearNUM] and [DayYearNUM] <= rec_CurrentDate{0}[DayYearNUM] then",
          "                true",
          "              else",
          "                false, ",
          "            type logical",
          "          ), ",
          "          list_PrevFiscalYearDates = List.Buffer(",
          "            Table.SelectRows(",
          "              Table.ExpandTableColumn(",
          "                Table.NestedJoin(",
          "                  Table.AddIndexColumn(",
          "                    Table.RenameColumns(",
          "                      Table.TransformColumnTypes(",
          "                        Table.FromList(",
          "                          List.Dates(",
          "                            var_PFFD, ",
          "                            Number.From(var_FFD - var_PFFD), ",
          "                            #duration(1, 0, 0, 0)",
          "                          ), ",
          "                          Splitter.SplitByNothing()",
          "                        ), ",
          "                        {{\"Column1\", type date}}",
          "                      ), ",
          "                      {{\"Column1\", \"DateFY\"}}",
          "                    ), ",
          "                    \"Index\", ",
          "                    1, ",
          "                    1",
          "                  ), ",
          "                  {\"Index\"}, ",
          "                  Table.AddIndexColumn(",
          "                    Table.RenameColumns(",
          "                      Table.TransformColumnTypes(",
          "                        Table.FromList(",
          "                          List.Dates(",
          "                            Date.AddYears(var_PFFD, + 0), ",
          "                            Number.From(var_PFFD - Date.AddYears(var_PFFD, - 1)), ",
          "                            #duration(1, 0, 0, 0)",
          "                          ), ",
          "                          Splitter.SplitByNothing()",
          "                        ), ",
          "                        {{\"Column1\", type date}}",
          "                      ), ",
          "                      {{\"Column1\", \"DateFY\"}}",
          "                    ), ",
          "                    \"Index\", ",
          "                    1, ",
          "                    1",
          "                  ), ",
          "                  {\"Index\"}, ",
          "                  \"Table\", ",
          "                  JoinKind.LeftOuter",
          "                ), ",
          "                \"Table\", ",
          "                {\"DateFY\"}, ",
          "                {\"PrevDateFY\"}",
          "              ), ",
          "              each [DateFY] <= var_CurrentDate",
          "            )[PrevDateFY]",
          "          ), ",
          "          col_isPrevFY = Table.AddColumn(",
          "            col_isPrevYTD, ",
          "            \"IsPreviousFY\", ",
          "            each ",
          "              if [FiscalYearOFFSET] = - 1 and List.Contains(list_PrevFiscalYearDates, [Date]) then",
          "                true",
          "              else",
          "                false, ",
          "            type logical",
          "          ), ",
          "          col_isPrevAY = Table.AddColumn(",
          "            col_isPrevFY, ",
          "            \"IsPreviousAY\", ",
          "            each if [AcademicYearOFFSET] = - 1 then true else false, ",
          "            type logical",
          "          ), ",
          "          ",
          "          col_NetWorkDays = ",
          "            if AddRelativeNetWorkdays = true then",
          "              Table.AddColumn(",
          "                col_isPrevAY, ",
          "                \"Relative Networkdays\", ",
          "                each fxNETWORKDAYS(StartDate, [Date], Holidays), ",
          "                type number",
          "              )",
          "            else",
          "              col_isPrevAY, ",
          "      extend_calendar = ",
          "      let",
          "",
          "date_periods = let",
          "tbl_weekly = Table.AddColumn( col_NetWorkDays, \"2W Date\", each if Number.Mod(Date.WeekOfYear([Date]), 2) = 1 then Date.EndOfWeek([Date], Day.Monday) else Date.EndOfWeek(Date.AddDays([Date], - 7), Day.Monday), type date ),",
          "tbl_fortnightly = Table.AddColumn(tbl_weekly, \"2M Date\", each Date.EndOfMonth(Date.AddMonths([Date], - (Number.Mod(Date.Month([Date]) - 1, 2)))), type date),",
          "tbl_quarterly = Table.AddColumn(tbl_fortnightly, \"3W Date\", each Date.EndOfMonth(Date.AddMonths([Date], - (Number.Mod(Date.Month([Date]) - 1, 3)))), type date),",
          "tbl_biannually = Table.AddColumn(tbl_fortnightly, \"6M Date\", each Date.EndOfMonth(Date.AddMonths([Date], - (Number.Mod(Date.Month([Date]) - 1, 6)))), type date),",
          "tbl_ouputs = tbl_biannually",
          "in tbl_ouputs,",
          "",
          "",
          "fiscal_academic_periods = let",
          "     FY_TBL = Table.RenameColumns( Table.Group(  Table.Distinct( Table.SelectColumns(date_periods,{\"Month Start\", \"Month End\", \"FiscalPeriodYearINT\", \"FiscalQuarterYearINT\"}) , {\"FiscalPeriodYearINT\"}) , {\"FiscalQuarterYearINT\"}, {{\"Fiscal Quarter Month Start\", each List.Min([Month Start]), type date}, {\"Fiscal Quarter Month End\", each List.Max([Month End]), type date}}) ,{{\"FiscalQuarterYearINT\", \"FiscalKey\"}}),",
          "     AY_TBL = Table.RenameColumns( Table.Group(  Table.Distinct( Table.SelectColumns(date_periods,{\"Month Start\", \"Month End\", \"AcademicPeriodYearINT\", \"AcademicQuarterYearINT\"}) , {\"AcademicPeriodYearINT\"}) , {\"AcademicQuarterYearINT\"}, {{\"Academic Quarter Month Start\", each List.Min([Month Start]), type date}, {\"Academic Quarter Month End\", each List.Max([Month End]), type date}}) ,{{\"AcademicQuarterYearINT\", \"AcademicKey\"}}),",
          "     tbl_fiscal = Table.Join(date_periods, {\"FiscalQuarterYearINT\"}, FY_TBL, {\"FiscalKey\"}, JoinKind.LeftOuter, JoinAlgorithm.SortMerge ) ,",
          "     tbl_academic = Table.Join(tbl_fiscal, {\"AcademicQuarterYearINT\"}, AY_TBL, {\"AcademicKey\"}, JoinKind.LeftOuter, JoinAlgorithm.SortMerge ),",
          "     tbl_merges = Table.RemoveColumns( tbl_academic, {\"FiscalKey\", \"AcademicKey\"} )",
          "in tbl_merges",
          "",
          "in fiscal_academic_periods,",
          "",
          "          // function starts here",
          "          fxNETWORKDAYS = (StartDate, EndDate, optional Holidays as list) =>",
          "            let",
          "              list_Dates = List.Dates(",
          "                StartDate, ",
          "                Number.From(EndDate - StartDate) + 1, ",
          "                Duration.From(1)",
          "              ), ",
          "              DeleteHolidays = ",
          "                if Holidays = null then",
          "                  list_Dates",
          "                else",
          "                  List.Difference(list_Dates, List.Transform(Holidays, Date.From)), ",
          "              DeleteWeekends = List.Select(DeleteHolidays, each Date.DayOfWeek(_, Day.Monday) < 5), ",
          "              CountDays = List.Count(DeleteWeekends)",
          "            in",
          "              CountDays,",
          "",
          "          // function ends here",
          "",
          "",
          "          cols_RemoveToday = Table.RemoveColumns(",
          "            if EndDate < var_CurrentDate then",
          "              Table.SelectRows(extend_calendar, each ([Date] <> var_CurrentDate))",
          "            else",
          "              extend_calendar, ",
          "            {\"DayYearNUM\", \"FiscalFirstDate\"}",
          "          ), ",
          "          cols_Format = Table.TransformColumnTypes(",
          "            cols_RemoveToday, ",
          "            {",
          "              {\"YearNUM\", Int64.Type}, ",
          "              {\"QuarterNUM\", Int64.Type}, ",
          "              {\"MonthNUM\", Int64.Type}, ",
          "              {\"DayMonthNUM\", Int64.Type}, ",
          "              {\"DateINT\", Int64.Type}, ",
          "              {\"DayWeekNUM\", Int64.Type}, ",
          "              {\"ISO YearOFFSET\", Int64.Type}, ",
          "              {\"ISO QuarterYearINT\", Int64.Type}, ",
          "              {\"ISO QuarterOFFSET\", Int64.Type}, ",
          "              {\"Week Number\", Int64.Type}, ",
          "              {\"WeekYearINT\", Int64.Type}, ",
          "              {\"MonthYearINT\", Int64.Type}, ",
          "              {\"QuarterYearINT\", Int64.Type}, ",
          "              {\"FiscalQuarterYearINT\", Int64.Type}, ",
          "              {\"FiscalPeriodNUM\", Int64.Type}, ",
          "              {\"FiscalPeriodYearINT\", Int64.Type}, ",
          "              {\"WeekOFFSET\", Int64.Type}, ",
          "              {\"MonthOFFSET\", Int64.Type}, ",
          "              {\"QuarterOFFSET\", Int64.Type}, ",
          "              {\"YearOFFSET\", Int64.Type}, ",
          "              {\"FiscalYearOFFSET\", Int64.Type}, ",
          "              {\"FiscalWeekYearINT\", Int64.Type},",
          "              {\"Fiscal Week Number\", Int64.Type},",
          "              {\"DateFW\", type date}",
          "            }",
          "          ), ",
          "          cols_Reorder = Table.ReorderColumns(",
          "            cols_Format, ",
          "            {",
          "              \"Date\",",
          "              \"CY Selection\", ",
          "              \"isYearComplete\", ",
          "              \"IsYTD\",",
          "              \"YearNUM\", ",
          "              \"YearOFFSET\", ",
          "              \"Academic Year\",",
          "              \"Academic_Year\",",
          "              \"AY Selection\",",
          "              \"Fiscal Year\", ",
          "              \"Fiscal_Year\",",
          "              \"FY Selection\", ",
          "              \"IsFuture\",",
          "              \"QuarterNUM\", ",
          "              \"Quarter\", ",
          "              \"Quarter Start\", ",
          "              \"Quarter End\", ",
          "              \"Quarter & Year\", ",
          "              \"QuarterYearINT\", ",
          "              \"QuarterOFFSET\", ",
          "              \"isQuarterComplete\", ",
          "              \"MonthNUM\",",
          "              \"FiscalPeriodNUM\",",
          "              \"Fiscal Month\",",
          "              \"AcademicPeriodNUM\", ",
          "              \"Academic Month\",",
          "              \"Month Start\", ",
          "              \"Month End\", ",
          "              \"Month & Year\", ",
          "              \"MonthYearINT\", ",
          "              \"MonthOFFSET\", ",
          "              \"isMonthComplete\", ",
          "              \"Month Name\", ",
          "              \"Month Short\", ",
          "              \"Month Initial\", ",
          "              \"DayMonthNUM\", ",
          "              \"Week Number\", ",
          "              \"Week Start\", ",
          "              \"Week End\", ",
          "              \"Week & Year\", ",
          "              \"WeekYearINT\", ",
          "              \"WeekOFFSET\", ",
          "              \"WeekCompleted\", ",
          "              \"DayWeekNUM\", ",
          "              \"Day of Week Name\", ",
          "              \"Day Initial\", ",
          "              \"DateINT\", ",
          "              \"DayOffset\", ",
          "              \"IsAfterToday\", ",
          "              \"IsWeekDay\", ",
          "              \"IsHoliday\", ",
          "              \"IsBusinessDay\", ",
          "              \"Day Type\", ",
          "              \"ISO Year\", ",
          "              \"ISO YearOFFSET\", ",
          "              \"ISO QuarterNUM\", ",
          "              \"ISO Quarter\", ",
          "              \"ISO Quarter & Year\", ",
          "              \"ISO QuarterYearINT\", ",
          "              \"ISO QuarterOFFSET\", ",
          "              \"FiscalYearOFFSET\",",
          "              \"FiscalQuarterOFFSET\", ",
          "              \"Fiscal Quarter\", ",
          "              \"FiscalQuarterYearINT\", ",
          "              \"Fiscal Quarter Month Start\",",
          "              \"Fiscal Quarter Month End\",",
          "              \"Fiscal Period\", ",
          "              \"FiscalPeriodYearINT\", ",
          "              \"DateFW\", ",
          "              \"Fiscal Week Number\", ",
          "              \"Fiscal Week\", ",
          "              \"FiscalWeekYearINT\",",
          "              \"AcademicYearOFFSET\", ",
          "              \"AcademicQuarterOFFSET\",",
          "              \"Academic Quarter Month Start\",",
          "              \"Academic Quarter Month End\", ",
          "              \"IsCurrentFY\", ",
          "              \"IsCurrentFQ\", ",
          "              \"IsCurrentFP\", ",
          "              \"IsCurrentFW\", ",
          "              \"IsPreviousYTD\", ",
          "              \"IsPreviousFY\",",
          "              \"2W Date\",",
          "              \"2M Date\",",
          "              \"6M Date\"",
          "            }",
          "          ), ",
          "          AYCols = {",
          "            \"Academic Year\",",
          "            \"Academic_Year\",",
          "            \"AY Selection\",",
          "            \"Academic Quarter\", ",
          "            \"AcademicQuarterYearINT\",",
          "            \"Academic Quarter Month Start\",",
          "            \"Academic Quarter Month End\", ",
          "            \"Academic Month\", ",
          "            \"AcademicPeriodNUM\", ",
          "            \"Academic Period\", ",
          "            \"AcademicPeriodYearINT\", ",
          "            \"AcademicYearOFFSET\", ",
          "            \"AcademicQuarterOFFSET\",",
          "            \"IsCurrentAQ\", ",
          "            \"IsCurrentAP\", ",
          "            \"IsPreviousAY\", ",
          "            \"IsCurrentAY\", ",
          "            \"AYStartDate\",",
          "            \"AYEndDate\"",
          "",
          "          }, ",
          "          FYCols = {",
          "            \"ISO QuarterNUM\", ",
          "            \"Fiscal Year\",",
          "            \"Fiscal_Year\",",
          "            \"FY Selection\", ",
          "            \"Fiscal Quarter\", ",
          "            \"FiscalQuarterYearINT\",",
          "            \"Fiscal Quarter Month Start\",",
          "            \"Fiscal Quarter Month End\",",
          "            \"Fiscal Month\", ",
          "            \"FiscalPeriodNUM\", ",
          "            \"Fiscal Period\", ",
          "            \"FiscalPeriodYearINT\", ",
          "            \"DateFW\", ",
          "            \"Fiscal Week Number\", ",
          "            \"Fiscal Week\", ",
          "            \"FiscalWeekYearINT\", ",
          "            \"FiscalYearOFFSET\",",
          "            \"FiscalQuarterOFFSET\",",
          "            \"IsCurrentFQ\", ",
          "            \"IsCurrentFP\", ",
          "            \"IsCurrentFW\", ",
          "            \"IsPreviousFY\", ",
          "            \"IsCurrentFY\"",
          "          }, ",
          "          AllCols = List.Union({FYCols, AYCols}), ",
          "          ListCols = ",
          "            if var_FYAYTest then",
          "              Table.RemoveColumns(cols_Reorder, AllCols)",
          "            else if var_AYLogicTest then",
          "              Table.RemoveColumns(cols_Reorder, AYCols)",
          "            else if var_FYLogicTest then",
          "              Table.RemoveColumns(cols_Reorder, FYCols)",
          "            else",
          "              Table.RemoveColumns(",
          "                cols_Reorder, ",
          "                {\"DateFW\", \"FiscalWeekYearINT\", \"ISO QuarterNUM\" /* \"FiscalPeriodNUM\",  */                         }",
          "              )",
          "in",
          "    ListCols",
          "        , ",
          "      // ------------------------------------------------------------------     ",
          "      /*",
          "  invokeFunction = (",
          "    StartYearNUM as number, ",
          "    EndYearNUM as number, ",
          "    optional FYStartMonthNum as number, ",
          "    optional AYStartMonthNum as number, ",
          "    optional Holidays as list, ",
          "    optional WDStartNum as number, ",
          "    optional AddRelativeNetWorkdays as logical",
          "  ) as table =>",
          "*/",
          "      // 3.0: change parameter metadata here",
          "      fnType = type function (",
          "        // 3.0.1: Calendar Start Year parameter",
          "        StartYearNUM as (",
          "          type number",
          "            meta [",
          "              Documentation.FieldCaption     = \" Start Year: #(lf) 4-digit integer \", ",
          "              Documentation.FieldDescription = \" 4-digit integer: #(cr,lf) YYYY \", ",
          "              Documentation.SampleValues     = {2021}",
          "            ]",
          "        ), ",
          "        // 3.0.2: Calendar End Year parameter",
          "        EndYearNUM as (",
          "          type number",
          "            meta [",
          "              Documentation.FieldCaption     = \" End Year: #(lf) 4-digit integer \", ",
          "              Documentation.FieldDescription = \" 4-digit integer: #(cr,lf) YYYY \", ",
          "              Documentation.SampleValues     = {2023}",
          "            ]",
          "        ), ",
          "        // 3.0.3: Fiscal Start Month parameter",
          "        optional FYStartMonthNum as (",
          "          type number",
          "            meta [",
          "              Documentation.FieldCaption     = \" Fiscal Month Start: #(lf) Feb = 2 \", ",
          "              Documentation.FieldDescription = \" Fiscal Month Start: #(lf) Feb = 2 \", ",
          "              Documentation.SampleValues     = {02}",
          "            ]",
          "        )// 3.0.4: Academic Start Month parameter",
          "        , ",
          "        optional AYStartMonthNum as (",
          "          type number",
          "            meta [",
          "              Documentation.FieldCaption     = \" Academic Month Start: #(lf) Aug = 8 \", ",
          "              Documentation.FieldDescription = \" Academic Month Start: #(lf) Aug = 8 \", ",
          "              Documentation.SampleValues     = {08}",
          "            ]",
          "        )// 3.0.5: Holidays list parameter",
          "        , ",
          "        optional Holidays as (",
          "          type list",
          "            meta [",
          "              Documentation.FieldCaption     = \" Choose holidays as a list \", ",
          "              Documentation.FieldDescription = \" Choose holidays as a list \", ",
          "              Documentation.SampleValues     = {\"List\"}",
          "            ]",
          "        )// 3.0.6: Weekday Start parameter ",
          "        , ",
          "        optional WDStartNum as (",
          "          type number",
          "            meta [",
          "              Documentation.FieldCaption     = \" Input weekday start number  \", ",
          "              Documentation.FieldDescription = \" Input weekday start number \", ",
          "              Documentation.SampleValues     = {01}",
          "            ]",
          "        )// 3.0.7: AddRelativeNetWorkdays parameter ",
          "        , ",
          "        optional AddRelativeNetWorkdays as (",
          "          type logical",
          "            meta [",
          "              Documentation.FieldCaption     = \" Input relative network days as boolean \", ",
          "              Documentation.FieldDescription = \" Input relative network days as boolean \", ",
          "              Documentation.SampleValues     = {\"True/False\"}",
          "            ]",
          "        )",
          "      // 3.1: parameter return type   ",
          "      ) as list, ",
          "      // ------------------------------------------------------------------",
          "     ",
          "      // ------------------------------------------------------------------",
          "      // 5.0: Choose between Parameter Documentation or Function Documentation",
          "      functionDocumentation =  // -- function metadata                       ",
          "      Value.ReplaceType(",
          "        invokeFunction, ",
          "        Value.ReplaceMetadata(Value.Type(invokeFunction), documentation)",
          "      ), ",
          "      parameterDocumentation =  // -- parameter metadata                        ",
          "      Value.ReplaceType(functionDocumentation, fnType)",
          "    in",
          "      // ------------------------------------------------------------------",
          "      // select one of the above steps and paste below",
          "      functionDocumentation /* <-- Choose final documentation type */                                         ",
          "in",
          "  customFunction"
        ],
        "kind": "m",
        "lineageTag": "310f3c2d-2c0d-4330-8f52-92ebcb84f18e"
      },
      {
        "name": "MelissaDeKorte_Calendars_v1",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Source =",
          "    [",
          "        fxCalendar = let fnDateTable = ( StartDate as date, EndDate as date, optional FYStartMonthNum as number, optional Holidays as list, optional WDStartNum as number, optional AddRelativeNetWorkdays as logical ) as table =>",
          "            let",
          "                // //Parameters",
          "                // StartDate = #date(2020, 1, 1),",
          "                // EndDate = #date(2024, 12, 31),",
          "                // FYStartMonthNum = 1,",
          "                // Holidays = {},",
          "                // WDStartNum = 1,",
          "                // AddRelativeNetWorkdays = true,",
          "",
          "                //Date table code",
          "                FYStartMonth = List.Select( {1..12}, each _ = FYStartMonthNum ){0}? ?? 1,",
          "                WDStart = List.Select( {0..1}, each _ = WDStartNum ){0}? ?? 0,",
          "                CurrentDate = Date.From( DateTime.FixedLocalNow()),",
          "                DayCount = Duration.Days( Duration.From( EndDate - StartDate)) +1,",
          "                Source = List.Dates( StartDate, DayCount, #duration(1,0,0,0)),",
          "                AddToday = if EndDate < CurrentDate then List.Combine( {Source, {CurrentDate}}) else Source,",
          "                ToTable = Table.FromList(AddToday, Splitter.SplitByNothing(), type table [Date = Date.Type] ),",
          "                InsertYear = Table.AddColumn(ToTable, \"Year\", each Date.Year([Date]), type number),",
          "                InsertYearOffset = Table.AddColumn(InsertYear, \"CurrYearOffset\", each Date.Year([Date]) - Date.Year( Date.From(CurrentDate)), type number),",
          "                InsertCompletedYear = Table.AddColumn(InsertYearOffset, \"YearCompleted\", each Date.EndOfYear([Date]) < Date.From( Date.EndOfYear(CurrentDate)), type logical),",
          "",
          "                InsertQuarterNum = Table.AddColumn(InsertCompletedYear, \"Quarter Number\", each Date.QuarterOfYear([Date]), type number),",
          "                InsertQuarter = Table.AddColumn(InsertQuarterNum, \"Quarter\", each \"Q\" & Number.ToText([Quarter Number]), type text),",
          "                InsertStartOfQuarter = Table.AddColumn(InsertQuarter, \"Start of Quarter\", each Date.StartOfQuarter([Date]), type date),",
          "                InsertEndOfQuarter = Table.AddColumn(InsertStartOfQuarter, \"End of Quarter\", each Date.EndOfQuarter([Date]), type date),",
          "                InsertCalendarQtr = Table.AddColumn(InsertEndOfQuarter, \"Quarter & Year\", each \"Q\" & Number.ToText( Date.QuarterOfYear([Date])) & Date.ToText([Date], [Format = \" yyyy\"]), type text),",
          "                InsertQuarternYear = Table.AddColumn(InsertCalendarQtr, \"QuarternYear\", each [Year] * 10 + [Quarter Number], type number),",
          "                InsertQuarterOffset = Table.AddColumn(InsertQuarternYear, \"CurrQuarterOffset\", each ((4 * Date.Year([Date])) +  Date.QuarterOfYear([Date])) - ((4 * Date.Year(Date.From(CurrentDate))) +  Date.QuarterOfYear(Date.From(CurrentDate))), type number),",
          "                InsertCompletedQuarter = Table.AddColumn(InsertQuarterOffset, \"QuarterCompleted\", each Date.EndOfQuarter([Date]) < Date.From(Date.EndOfQuarter(CurrentDate)), type logical),",
          "",
          "                InsertMonth = Table.AddColumn(InsertCompletedQuarter, \"Month\", each Date.Month([Date]), type number),",
          "                InsertStartOfMonth = Table.AddColumn(InsertMonth, \"Start of Month\", each Date.StartOfMonth([Date]), type date),",
          "                InsertEndOfMonth = Table.AddColumn(InsertStartOfMonth, \"End of Month\", each Date.EndOfMonth([Date]), type date),",
          "                InsertCalendarMonth = Table.AddColumn(InsertEndOfMonth, \"Month & Year\", each Text.Proper( Date.ToText([Date], [Format = \"MMM yyyy\"])), type text),",
          "                InsertMonthnYear = Table.AddColumn(InsertCalendarMonth , \"MonthnYear\", each [Year] * 100 + [Month], type number),",
          "                InsertMonthOffset = Table.AddColumn(InsertMonthnYear, \"CurrMonthOffset\", each ((12 * Date.Year([Date])) +  Date.Month([Date])) - ((12 * Date.Year(Date.From(CurrentDate))) +  Date.Month(Date.From(CurrentDate))), type number),",
          "                InsertCompletedMonth = Table.AddColumn(InsertMonthOffset, \"MonthCompleted\", each Date.EndOfMonth([Date]) < Date.From(Date.EndOfMonth(CurrentDate)), type logical),",
          "                InsertMonthName = Table.AddColumn(InsertCompletedMonth, \"Month Name\", each Text.Proper( Date.ToText([Date], \"MMMM\")), type text),",
          "                InsertMonthShort = Table.AddColumn( InsertMonthName, \"Month Short\", each Text.Proper( Date.ToText([Date], \"MMM\")), type text),",
          "                InsertMonthInitial = Table.AddColumn(InsertMonthShort, \"Month Initial\", each Text.Start([Month Name], 1) & Text.Repeat( Character.FromNumber(8203), Date.Month([Date]) ), type text),",
          "                InsertDayOfMonth = Table.AddColumn(InsertMonthInitial, \"Day of Month\", each Date.Day([Date]), type number),",
          "            ",
          "                InsertWeekNumber = Table.AddColumn(InsertDayOfMonth, \"Week Number\", each",
          "                    if Number.RoundDown((Date.DayOfYear([Date])-(Date.DayOfWeek([Date], Day.Monday)+1)+10)/7)=0",
          "                    then Number.RoundDown((Date.DayOfYear(#date(Date.Year([Date])-1,12,31))-(Date.DayOfWeek(#date(Date.Year([Date])-1,12,31), Day.Monday)+1)+10)/7)",
          "                    else if (Number.RoundDown((Date.DayOfYear([Date])-(Date.DayOfWeek([Date], Day.Monday)+1)+10)/7)=53 and (Date.DayOfWeek(#date(Date.Year([Date]),12,31), Day.Monday)+1<4))",
          "                    then 1 else Number.RoundDown((Date.DayOfYear([Date])-(Date.DayOfWeek([Date], Day.Monday)+1)+10)/7), type number),",
          "                InsertStartOfWeek = Table.AddColumn(InsertWeekNumber, \"Start of Week\", each Date.StartOfWeek([Date], Day.Monday), type date),",
          "                InsertWeekEnding = Table.AddColumn(InsertStartOfWeek, \"End of Week\", each Date.EndOfWeek( [Date], Day.Monday), type date),",
          "                InsertCalendarWk = Table.AddColumn(InsertWeekEnding, \"Week & Year\", each \"W\" & Text.PadStart( Text.From( [Week Number] ), 2, \"0\") & \" \" & Text.From(Date.Year( Date.AddDays( Date.StartOfWeek([Date], Day.Monday), 3 ))), type text ),",
          "                InsertWeeknYear = Table.AddColumn(InsertCalendarWk, \"WeeknYear\", each Date.Year( Date.AddDays( Date.StartOfWeek([Date], Day.Monday), 3 )) * 100 + [Week Number],  Int64.Type),",
          "                InsertWeekOffset = Table.AddColumn(InsertWeeknYear, \"CurrWeekOffset\", each (Number.From(Date.StartOfWeek([Date], Day.Monday))-Number.From(Date.StartOfWeek(CurrentDate, Day.Monday)))/7, type number),",
          "                InsertCompletedWeek = Table.AddColumn(InsertWeekOffset, \"WeekCompleted\", each Date.EndOfWeek( [Date], Day.Monday) < Date.From(Date.EndOfWeek(CurrentDate, Day.Monday)), type logical),",
          "            ",
          "                InsertDayWeek = Table.AddColumn(InsertCompletedWeek, \"Day of Week Number\", each Date.DayOfWeek([Date], Day.Monday) + WDStart, Int64.Type),",
          "                InsertDayName = Table.AddColumn(InsertDayWeek, \"Day of Week Name\", each Text.Proper( Date.ToText([Date], \"dddd\" )), type text),",
          "                InsertDayInitial = Table.AddColumn(InsertDayName, \"Day of Week Initial\", each Text.Proper(Text.Start([Day of Week Name], 1)) & Text.Repeat( Character.FromNumber(8203), Date.DayOfWeek([Date], Day.Monday) + WDStart ), type text),",
          "                InsertDayOfYear = Table.AddColumn(InsertDayInitial, \"Day of Year\", each Date.DayOfYear([Date]), Int64.Type),",
          "                InsertDayInt = Table.AddColumn(InsertDayOfYear, \"DateInt\", each [Year] * 10000 + [Month] * 100 + [Day of Month], type number),",
          "                InsertDayOffset = Table.AddColumn(InsertDayInt, \"CurrDayOffset\", each Number.From([Date]) - Number.From(CurrentDate), type number),",
          "                InsertIsAfterToday = Table.AddColumn(InsertDayOffset, \"IsAfterToday\", each not ([Date] <= Date.From(CurrentDate)), type logical),",
          "                InsertIsWorkingDay = Table.AddColumn(InsertIsAfterToday, \"IsWeekDay\", each if Date.DayOfWeek([Date], Day.Monday) > 4 then false else true, type logical),",
          "                InsertIsHoliday = Table.AddColumn(InsertIsWorkingDay, \"IsHoliday\", each if Holidays = null then \"Unknown\" else List.Contains( Holidays, [Date] ), if Holidays = null then type text else type logical),",
          "                InsertIsBusinessDay = Table.AddColumn(InsertIsHoliday, \"IsBusinessDay\", each if [IsWeekDay] = true and [IsHoliday] <> true then true else false, type logical),",
          "                InsertDayType = Table.AddColumn(InsertIsBusinessDay, \"Day Type\", each if [IsHoliday] = true then \"Holiday\" else if [IsWeekDay] = false then \"Weekend\" else if [IsWeekDay] = true then \"Weekday\" else null, type text),",
          "",
          "                InsertISOYear = Table.AddColumn( InsertDayType, \"ISO Year\", each Date.Year( Date.AddDays( Date.StartOfWeek([Date], Day.Monday), 3 )), type number),",
          "                InsertISOqNum = Table.AddColumn(InsertISOYear, \"ISO Quarter Number\", each if [Week Number] >39 then 4 else if [Week Number] >26 then 3 else if [Week Number] >13 then 2 else 1, Int64.Type),",
          "                InsertISOqtr = Table.AddColumn(InsertISOqNum, \"ISO Quarter\", each \"Q\" & Number.ToText([ISO Quarter Number]), type text),",
          "                InsertISOQuarter = Table.AddColumn(InsertISOqtr, \"ISO Quarter & Year\", each \"Q\" & Number.ToText([ISO Quarter Number]) & \" \" & Number.ToText([ISO Year]), type text),",
          "                InsertISOqNy = Table.AddColumn(InsertISOQuarter, \"ISO QuarternYear\", each [ISO Year] * 10 + [ISO Quarter Number], type number),",
          "",
          "                // BufferTable = Table.Buffer(Table.Distinct( InsertISOqNy[[ISO Year], [DateInt]])),",
          "                // InsertISOday = Table.AddColumn(InsertISOqNy, \"ISO Day of Year\", (OT) => Table.RowCount( Table.SelectRows( BufferTable, (IT) => IT[DateInt] <= OT[DateInt] and IT[ISO Year] = OT[ISO Year])),  Int64.Type),",
          "                AddFY = Table.AddColumn(InsertISOqNy, \"Fiscal Year\", each \"FY\" & (if [Month] >= FYStartMonth and FYStartMonth >1 then Text.From([Year] +1) else Text.From([Year])), type text),",
          "                //AddFYs = Table.AddColumn(AddFY, \"Fiscal Year short\", each \"FY\" & (if [Month] >= FYStartMonth and FYStartMonth >1 then Text.PadEnd( Text.End( Text.From([Year] +1), 2), 2, \"0\") else Text.End( Text.From([Year]), 2)), type text),",
          "                AddFQ = Table.AddColumn(AddFY, \"Fiscal Quarter\", each \"FQ\" & Text.From( Number.RoundUp( Date.Month( Date.AddMonths( [Date], - (FYStartMonth -1) )) / 3 )) & \" \" & (if [Month] >= FYStartMonth and FYStartMonth >1 then Text.From([Year] +1) else Text.From([Year])), type text),",
          "                AddFQnYr = Table.AddColumn(AddFQ, \"FQuarternYear\", each (if [Month] >= FYStartMonth and FYStartMonth >1 then [Year] +1 else [Year]) * 10 + Number.RoundUp( Date.Month( Date.AddMonths( [Date], - (FYStartMonth -1) )) / 3 ), type number),",
          "                AddFM = Table.AddColumn(AddFQnYr, \"Fiscal Period Number\", each if [Month] >= FYStartMonth and FYStartMonth >1 then [Month] - (FYStartMonth-1) else if [Month] >= FYStartMonth and FYStartMonth =1 then [Month] else [Month] + (12-FYStartMonth+1), type number),",
          "                AddFP = Table.AddColumn(AddFM, \"Fiscal Period\", each \"FP\" & Text.PadStart( Text.From([Fiscal Period Number]), 2, \"0\") & \" \" & (if [Month] >= FYStartMonth and FYStartMonth >1 then Text.From([Year] +1) else Text.From([Year])), type text),",
          "                AddFMnYr = Table.AddColumn(AddFP , \"FPeriodnYear\", each (if [Month] >= FYStartMonth and FYStartMonth >1 then [Year] +1 else [Year]) * 100 + [Fiscal Period Number], type number),",
          "                FYCalendarStart = #date( Date.Year(StartDate)-1, FYStartMonth, 1 ),",
          "                InsertFFD = Table.AddColumn( AddFMnYr, \"FiscalFirstDay\", each if [Month] >= FYStartMonth and FYStartMonth >1 then #date( Date.Year([Date])+1, FYStartMonth, 1) else #date( Date.Year([Date]), FYStartMonth, 1), type date ),",
          "",
          "                InitTable = Table.FromList( List.Transform( {Number.From(FYCalendarStart) .. Number.From(EndDate)}, Date.From), Splitter.SplitByNothing(), type table [DateFW = Date.Type]),",
          "                AddFFD = Table.AddColumn( InitTable, \"FiscalFirstDay\", each if Date.Month([DateFW]) < FYStartMonth then #date(Date.Year([DateFW]), FYStartMonth, 1) else #date(Date.Year([DateFW]) + 1, FYStartMonth, 1)),",
          "                AddFWSD = Table.AddColumn( AddFFD, \"FWStartDate\", each Date.AddYears(Date.StartOfWeek([DateFW], Day.Monday), 1)),",
          "                Group1 = Table.Group( AddFWSD, {\"FiscalFirstDay\", \"FWStartDate\"}, {{\"AllRows\", each _, type table [DateFW = nullable date, FiscalFirstDay = date, FWStartDate = date]}}),",
          "                Group2 = Table.Group( Group1, {\"FiscalFirstDay\"}, {{\"AllRows2\", each _, type table [FiscalFirstDay = date, FWStartDate = date, AllRows = table]}}),",
          "                AddIndex = Table.AddColumn( Group2, \"Custom\", each Table.AddIndexColumn([AllRows2], \"Fiscal Week Number\", 1, 1) )[[Custom]],",
          "                ExpandG2 = Table.ExpandTableColumn( AddIndex, \"Custom\", {\"FiscalFirstDay\", \"FWStartDate\", \"AllRows\", \"Fiscal Week Number\"}, {\"FiscalFirstDay\", \"FWStartDate\", \"AllRows\", \"Fiscal Week Number\"}), ",
          "                ExpandG1 = Table.ExpandTableColumn( ExpandG2, \"AllRows\", {\"DateFW\"}, {\"DateFW\"} )[[DateFW], [Fiscal Week Number]],",
          "                MergeFYW = Table.Join( InsertFFD, {\"Date\"}, ExpandG1, {\"DateFW\"}, JoinKind.LeftOuter, JoinAlgorithm.SortMerge ),",
          "                FWlogic = List.Contains( {null}, FYStartMonthNum),",
          "                UpdateFYWeek = if FWlogic then Table.ReplaceValue(MergeFYW, each [Fiscal Week Number], each if FYStartMonth =1 then [Week Number] else [Fiscal Week Number], Replacer.ReplaceValue, {\"Fiscal Week Number\"}) else MergeFYW,",
          "                AddFYW = Table.AddColumn( UpdateFYWeek, \"Fiscal Week\", each if FWlogic then \"F\" & [#\"Week & Year\"] else if FYStartMonth =1 then \"FW\" & Text.PadStart( Text.From([Fiscal Week Number]), 2, \"0\") & Date.ToText([Date], \" yyyy\") else if Date.Month([Date]) < FYStartMonth then \"FW\" & Text.PadStart( Text.From([Fiscal Week Number]), 2, \"0\") & Date.ToText([Date], \" yyyy\") else \"FW\" & Text.PadStart(Text.From([Fiscal Week Number]), 2, \"0\") & \" \" & Text.From( Date.Year([Date])+1), type text),",
          "                InsertFWeeknYear = Table.AddColumn(AddFYW, \"FWeeknYear\", each if FWlogic then [WeeknYear] else (if FYStartMonth =1 then Date.Year([Date]) else if Date.Month([Date]) < FYStartMonth then Date.Year([Date]) else Date.Year([Date])+1) * 100 + [Fiscal Week Number],  Int64.Type),",
          "                ",
          "                CurrentDateRecord = Table.SelectRows(InsertFWeeknYear, each ([Date] = CurrentDate)),",
          "                CurrentISOyear = CurrentDateRecord{0}[ISO Year],",
          "                CurrentISOqtr = CurrentDateRecord{0}[ISO Quarter Number],",
          "                CurrentYear = CurrentDateRecord{0}[Year],",
          "                CurrentMonth = CurrentDateRecord{0}[Month],",
          "                CurrentFiscalFirstDay = CurrentDateRecord{0}[FiscalFirstDay],",
          "                PrevFiscalFirstDay = Date.AddYears(CurrentFiscalFirstDay, -1),",
          "                CurrentFY = CurrentDateRecord{0}[Fiscal Year],",
          "                CurrentFQ = CurrentDateRecord{0}[FQuarternYear],",
          "                CurrentFP = CurrentDateRecord{0}[FPeriodnYear],",
          "                CurrentFW = CurrentDateRecord{0}[FWeeknYear],",
          "",
          "                InsertISOYrOffset = Table.AddColumn(InsertFWeeknYear, \"ISO CurrYearOffset\", each [ISO Year] - CurrentISOyear, type number),",
          "                InsertISOQtrOffset = Table.AddColumn(InsertISOYrOffset, \"ISO CurrQuarterOffset\", each ((4 * [ISO Year]) +  [ISO Quarter Number]) - ((4 * CurrentISOyear) + CurrentISOqtr), type number),",
          "                InsertFYoffset = Table.AddColumn(InsertISOQtrOffset, \"Fiscal CurrYearOffset\", each try (if [Month] >= FYStartMonth then [Year]+1 else [Year]) - (if CurrentMonth >= FYStartMonth then CurrentYear+1 else CurrentYear) otherwise null, type number),",
          "                InsertCurrentFY = Table.AddColumn(InsertFYoffset, \"IsCurrentFY\", each if [Fiscal Year] = CurrentFY then true else false, type logical),",
          "                InsertCurrentFQ = Table.AddColumn(InsertCurrentFY, \"IsCurrentFQ\", each if [FQuarternYear] = CurrentFQ then true else false, type logical),",
          "                InsertCurrentFP = Table.AddColumn(InsertCurrentFQ, \"IsCurrentFP\", each if [FPeriodnYear] = CurrentFP then true else false, type logical),",
          "                InsertCurrentFW = Table.AddColumn(InsertCurrentFP, \"IsCurrentFW\", each if [FWeeknYear] = InsertISOYrOffset then true else false, type logical),",
          "                InsertPYTD = Table.AddColumn(InsertCurrentFW, \"IsPYTD\", each if CurrentYear-1 = [Year] and [Day of Year] <= CurrentDateRecord{0}[Day of Year] then true else false, type logical),",
          "                    ListPrevFYDates = List.Buffer( Table.SelectRows( Table.ExpandTableColumn( Table.NestedJoin(",
          "                        Table.AddIndexColumn( Table.RenameColumns( Table.TransformColumnTypes( Table.FromList( List.Dates( PrevFiscalFirstDay, Number.From(CurrentFiscalFirstDay-PrevFiscalFirstDay),#duration(1,0,0,0)), Splitter.SplitByNothing()),{{\"Column1\", type date}}), {{\"Column1\", \"DateFY\"}}), \"Index\", 1, 1), {\"Index\"}, ",
          "                        Table.AddIndexColumn( Table.RenameColumns( Table.TransformColumnTypes( Table.FromList( List.Dates( Date.AddYears( PrevFiscalFirstDay, -1), Number.From( PrevFiscalFirstDay - Date.AddYears( PrevFiscalFirstDay, -1)),#duration(1,0,0,0)), Splitter.SplitByNothing()),{{\"Column1\", type date}}), {{\"Column1\", \"DateFY\"}}), \"Index\", 1, 1)",
          "                        , {\"Index\"}, \"Table\", JoinKind.LeftOuter), \"Table\", {\"DateFY\"}, {\"PrevDateFY\"}), each [DateFY] <= CurrentDate)[PrevDateFY] ),",
          "                InsertPFYTD = Table.AddColumn(InsertPYTD, \"IsPFYTD\", each if [Fiscal CurrYearOffset] = -1 and List.Contains(ListPrevFYDates, [Date] ) then true else false, type logical),",
          "                InsertNetWorkdays = if AddRelativeNetWorkdays = true then Table.AddColumn(InsertPFYTD, \"Relative Networkdays\", each fxNETWORKDAYS( StartDate, [Date], Holidays ), type number ) else InsertPFYTD,",
          "                fxNETWORKDAYS = (StartDate, EndDate, optional Holidays as list) =>",
          "                    let",
          "                    ListOfDates = List.Dates( StartDate, Number.From(EndDate-StartDate)+1, Duration.From(1) ),",
          "                    DeleteHolidays = if Holidays = null then ListOfDates else List.Difference( ListOfDates, List.Transform(Holidays, Date.From )),",
          "                    DeleteWeekends = List.Select( DeleteHolidays, each Date.DayOfWeek( _, Day.Monday) < 5 ),",
          "                    CountDays = List.Count( DeleteWeekends)",
          "                    in",
          "                    CountDays,",
          "                RemoveToday = Table.RemoveColumns( if EndDate < CurrentDate then Table.SelectRows(InsertNetWorkdays, each ([Date] <> CurrentDate)) else InsertNetWorkdays, {\"Day of Year\", \"FiscalFirstDay\"}), ",
          "                ChType = Table.TransformColumnTypes(RemoveToday,{{\"Year\", Int64.Type}, {\"Quarter Number\", Int64.Type}, {\"Month\", Int64.Type}, {\"Day of Month\", Int64.Type}, {\"DateInt\", Int64.Type}, {\"Day of Week Number\", Int64.Type}, {\"ISO CurrYearOffset\", Int64.Type}, {\"ISO QuarternYear\", Int64.Type}, {\"ISO CurrQuarterOffset\", Int64.Type}, {\"Week Number\", Int64.Type}, {\"WeeknYear\", Int64.Type}, {\"MonthnYear\", Int64.Type}, {\"QuarternYear\", Int64.Type}, {\"FQuarternYear\", Int64.Type}, {\"Fiscal Period Number\", Int64.Type}, {\"FPeriodnYear\", Int64.Type}, {\"CurrWeekOffset\", Int64.Type}, {\"CurrMonthOffset\", Int64.Type}, {\"CurrQuarterOffset\", Int64.Type}, {\"CurrYearOffset\", Int64.Type}, {\"Fiscal CurrYearOffset\", Int64.Type}, {\"Fiscal Week Number\", Int64.Type}}),",
          "                ReorderCols = Table.ReorderColumns(ChType,{\"Date\", \"Year\", \"CurrYearOffset\", \"YearCompleted\", \"Quarter Number\", \"Quarter\", \"Start of Quarter\", \"End of Quarter\", \"Quarter & Year\", \"QuarternYear\", \"CurrQuarterOffset\", \"QuarterCompleted\", \"Month\", \"Start of Month\", \"End of Month\", \"Month & Year\", \"MonthnYear\", \"CurrMonthOffset\", \"MonthCompleted\", \"Month Name\", \"Month Short\", \"Month Initial\", \"Day of Month\", \"Week Number\", \"Start of Week\", \"End of Week\", \"Week & Year\", \"WeeknYear\", \"CurrWeekOffset\", \"WeekCompleted\", \"Day of Week Number\", \"Day of Week Name\", \"Day of Week Initial\", \"DateInt\", \"CurrDayOffset\", \"IsAfterToday\", \"IsWeekDay\", \"IsHoliday\", \"IsBusinessDay\", \"Day Type\", \"ISO Year\", \"ISO CurrYearOffset\", \"ISO Quarter Number\", \"ISO Quarter\", \"ISO Quarter & Year\", \"ISO QuarternYear\", \"ISO CurrQuarterOffset\", \"Fiscal Year\", \"Fiscal CurrYearOffset\", \"Fiscal Quarter\", \"FQuarternYear\", \"Fiscal Period Number\", \"Fiscal Period\", \"FPeriodnYear\", \"DateFW\", \"Fiscal Week Number\", \"Fiscal Week\", \"FWeeknYear\", \"IsCurrentFY\", \"IsCurrentFQ\", \"IsCurrentFP\", \"IsCurrentFW\", \"IsPYTD\", \"IsPFYTD\"}),",
          "                ListCols = if FWlogic then Table.RemoveColumns(ReorderCols,{\"ISO Quarter Number\", \"Fiscal Year\", \"Fiscal Quarter\", \"FQuarternYear\", \"Fiscal Period Number\", \"Fiscal Period\", \"FPeriodnYear\", \"DateFW\", \"Fiscal Week Number\", \"Fiscal Week\", \"FWeeknYear\", \"Fiscal CurrYearOffset\", \"IsCurrentFQ\", \"IsCurrentFP\", \"IsCurrentFW\"}) else Table.RemoveColumns(ReorderCols,{\"Fiscal Period Number\", \"DateFW\", \"Fiscal Week Number\", \"ISO Quarter Number\"})",
          "            in",
          "                ListCols,",
          "                Documentation = [",
          "                Documentation.Name =  \" fxCalendar\", ",
          "                Documentation.Description = \" Date table function to create an ISO-8601 calendar\", ",
          "                Documentation.LongDescription = \" Date table function to create an ISO-8601 calendar\", ",
          "                Documentation.Category = \" Table\", ",
          "                Documentation.Version = \" 2.01: full code review\",",
          "                Documentation.Source = \" local\", ",
          "                Documentation.Author = \" Melissa de Korte\", ",
          "                Documentation.Examples = { [Description =  \" See: https://forum.enterprisedna.co/t/extended-date-table-power-query-m-function/6390\", ",
          "                    Code = \" Optional paramters: #(lf)",
          "                    (FYStartMonthNum) Month number the fiscal year starts, Januari if omitted #(lf) ",
          "                    (Holidays) Select a query (and column) that contains a list of holiday dates #(lf) ",
          "                    (WDStartNum) Switch default weekday numbering from 0-6 to 1-7 by entering a 1 #(lf)",
          "                    (AddRelativeNetWorkdays) if true adds a Relative Networkdays column to the date table #(lf)",
          "                    #(lf)",
          "                    Important to note: #(lf)",
          "                    [Fiscal Week] starts on a Monday and can contain less than 7 days in a First- and/or Last Week of a FY #(lf)",
          "                    [IsWeekDay] does not take holiday dates into account  #(lf)",
          "                    [IsBusinessDay] does take optional holiday dates into account  #(lf)",
          "                    [IsPYTD] and [IsPFYTD] compare Previous [Day of Year] with the Current [Day of Year] number, so dates don't align in leap years #(lf)",
          "                    IMPORTANT! No Fiscal columns will be added if the (FYStartMonthNum) is omitted\", ",
          "                    Result = \" \" ] }",
          "                ]",
          "            in ",
          "            Value.ReplaceType( fnDateTable, Value.ReplaceMetadata( Value.Type( fnDateTable ), Documentation )),",
          "        ",
          "        fxCalendarDepricated = let fnDateTable = ( StartDate as date, EndDate as date, optional FYStartMonthNum as number, optional Holidays as list, optional WDStartNum as number ) as table =>",
          "            let",
          "                FYStartMonth = if List.Contains( {1..12}, FYStartMonthNum ) then FYStartMonthNum else 1,",
          "                WDStart = if List.Contains( {0, 1}, WDStartNum ) then WDStartNum else 0,",
          "                CurrentDate = Date.From(DateTime.FixedLocalNow()),",
          "                DayCount = Duration.Days(Duration.From(EndDate - StartDate))+1,",
          "                Source = List.Dates(StartDate,DayCount,#duration(1,0,0,0)),",
          "                AddToday = if EndDate < CurrentDate then List.Combine( {Source, {CurrentDate}}) else Source,",
          "                TableFromList = Table.FromList(AddToday, Splitter.SplitByNothing()),",
          "                ChangedType = Table.TransformColumnTypes(TableFromList,{{\"Column1\", type date}}),",
          "                RenamedColumns = Table.RenameColumns(ChangedType,{{\"Column1\", \"Date\"}}),",
          "                InsertYear = Table.AddColumn(RenamedColumns, \"Year\", each Date.Year([Date]), type number),",
          "                InsertYearOffset = Table.AddColumn(InsertYear, \"YearOffset\", each Date.Year([Date]) - Date.Year(Date.From(CurrentDate)), type number),",
          "                InsertCompletedYear = Table.AddColumn(InsertYearOffset, \"YearCompleted\", each Date.EndOfYear([Date]) < Date.From(Date.EndOfYear(CurrentDate)), type logical),",
          "",
          "                InsertQuarter = Table.AddColumn(InsertCompletedYear, \"QuarterOfYear\", each Date.QuarterOfYear([Date]), type number),",
          "                InsertCalendarQtr = Table.AddColumn(InsertQuarter, \"Quarter & Year\", each \"Q\" & Number.ToText([QuarterOfYear]) & \" \" & Number.ToText([Year]), type text),",
          "                InsertQuarternYear = Table.AddColumn(InsertCalendarQtr, \"QuarternYear\", each [Year] * 10000 + [QuarterOfYear] * 100, type number),",
          "                InsertQuarterOffset = Table.AddColumn(InsertQuarternYear, \"QuarterOffset\", each ((4 * Date.Year([Date])) +  Date.QuarterOfYear([Date])) - ((4 * Date.Year(Date.From(CurrentDate))) +  Date.QuarterOfYear(Date.From(CurrentDate))), type number),",
          "                InsertCompletedQuarter = Table.AddColumn(InsertQuarterOffset, \"QuarterCompleted\", each Date.EndOfQuarter([Date]) < Date.From(Date.EndOfQuarter(CurrentDate)), type logical),",
          "",
          "                InsertMonth = Table.AddColumn(InsertCompletedQuarter, \"MonthOfYear\", each Date.Month([Date]), type number),",
          "                InsertDay = Table.AddColumn(InsertMonth, \"DayOfMonth\", each Date.Day([Date]), type number),",
          "                InsertMonthName = Table.AddColumn(InsertDay, \"Month Name\", each Text.Proper( Date.ToText([Date], \"MMMM\")), type text),",
          "                InsertMonthShort = Table.AddColumn( InsertMonthName, \"MonthShortName\", each try Text.Proper( Text.Start([Month Name], 3 )) otherwise Text.Proper( [Month Name] ), type text),",
          "                InsertMonthInitial = Table.AddColumn(InsertMonthShort, \"Month Initial\", each Text.Proper(Text.Start([Month Name], 1)) & Text.Repeat( Character.FromNumber(8203), [MonthOfYear] ), type text),",
          "                InsertCalendarMonth = Table.AddColumn(InsertMonthInitial, \"Month & Year\", each [MonthShortName] & \" \" & Number.ToText([Year]), type text),",
          "                InsertMonthnYear = Table.AddColumn(InsertCalendarMonth , \"MonthnYear\", each [Year] * 10000 + [MonthOfYear] * 100, type number),",
          "                InsertMonthOffset = Table.AddColumn(InsertMonthnYear, \"MonthOffset\", each ((12 * Date.Year([Date])) +  Date.Month([Date])) - ((12 * Date.Year(Date.From(CurrentDate))) +  Date.Month(Date.From(CurrentDate))), type number),",
          "                InsertCompletedMonth = Table.AddColumn(InsertMonthOffset, \"MonthCompleted\", each Date.EndOfMonth([Date]) < Date.From(Date.EndOfMonth(CurrentDate)), type logical),",
          "                InsertMonthEnding = Table.AddColumn(InsertCompletedMonth, \"MonthEnding\", each Date.EndOfMonth([Date]), type date),",
          "",
          "                InsertDayInt = Table.AddColumn(InsertMonthEnding, \"DateInt\", each [Year] * 10000 + [MonthOfYear] * 100 + [DayOfMonth], type number),",
          "                InsertDayOfYear = Table.AddColumn(InsertDayInt, \"Day of Year\", each Date.DayOfYear([Date]), Int64.Type),",
          "                InsertDayWeek = Table.AddColumn(InsertDayOfYear, \"DayOfWeek\", each Date.DayOfWeek([Date], Day.Monday) + WDStart, Int64.Type),",
          "                InsertDayName = Table.AddColumn(InsertDayWeek, \"DayOfWeekName\", each Text.Proper( Date.ToText([Date], \"dddd\" )), type text),",
          "                InsertDayInitial = Table.AddColumn(InsertDayName, \"Weekday Initial\", each Text.Proper(Text.Start([DayOfWeekName], 1)) & Text.Repeat( Character.FromNumber(8203), [DayOfWeek] ), type text),",
          "                ",
          "                InsertWeekNumber= Table.AddColumn(InsertDayInitial, \"ISO Weeknumber\", each",
          "                if Number.RoundDown((Date.DayOfYear([Date])-(Date.DayOfWeek([Date], Day.Monday)+1)+10)/7)=0",
          "                then Number.RoundDown((Date.DayOfYear(#date(Date.Year([Date])-1,12,31))-(Date.DayOfWeek(#date(Date.Year([Date])-1,12,31), Day.Monday)+1)+10)/7)",
          "                else if (Number.RoundDown((Date.DayOfYear([Date])-(Date.DayOfWeek([Date], Day.Monday)+1)+10)/7)=53 and (Date.DayOfWeek(#date(Date.Year([Date]),12,31), Day.Monday)+1<4))",
          "                then 1 else Number.RoundDown((Date.DayOfYear([Date])-(Date.DayOfWeek([Date], Day.Monday)+1)+10)/7), type number),",
          "                InsertISOyear = Table.AddColumn(InsertWeekNumber, \"ISO Year\", each Date.Year( Date.AddDays( Date.StartOfWeek([Date], Day.Monday), 3 )),  Int64.Type),",
          "                BufferTable = Table.Buffer(Table.Distinct( InsertISOyear[[ISO Year], [DateInt]])),",
          "                InsertISOqNum = Table.AddColumn(InsertISOyear, \"ISO QuarterOfYear\", each if [ISO Weeknumber] >39 then 4 else if [ISO Weeknumber] >26 then 3 else if [ISO Weeknumber] >13 then 2 else 1, Int64.Type),",
          "                InsertISOqtr = Table.AddColumn(InsertISOqNum, \"ISO Quarter\", each \"Q\" & Number.ToText([ISO QuarterOfYear]), type text),",
          "                InsertISOQuarter = Table.AddColumn(InsertISOqtr, \"ISO Quarter & Year\", each \"Q\" & Number.ToText([ISO QuarterOfYear]) & \" \" & Number.ToText([ISO Year]), type text),",
          "                InsertISOqNy = Table.AddColumn(InsertISOQuarter, \"ISO QuarternYear\", each [ISO Year] * 10000 + [ISO QuarterOfYear] * 100, type number),",
          "                //InsertISOday = Table.AddColumn(InsertISOqNy, \"ISO Day of Year\", (OT) => Table.RowCount( Table.SelectRows( BufferTable, (IT) => IT[DateInt] <= OT[DateInt] and IT[ISO Year] = OT[ISO Year])),  Int64.Type),",
          "                InsertCalendarWk = Table.AddColumn(InsertISOqNy, \"Week & Year\", each Text.From([ISO Year]) & \"-\" & Text.PadStart( Text.From( [ISO Weeknumber] ), 2, \"0\"), type text ),",
          "                InsertWeeknYear = Table.AddColumn(InsertCalendarWk, \"WeeknYear\", each [ISO Year] * 10000 + [ISO Weeknumber] * 100,  Int64.Type),",
          "                InsertWeekOffset = Table.AddColumn(InsertWeeknYear, \"WeekOffset\", each (Number.From(Date.StartOfWeek([Date], Day.Monday))-Number.From(Date.StartOfWeek(CurrentDate, Day.Monday)))/7, type number),",
          "                InsertCompletedWeek = Table.AddColumn(InsertWeekOffset, \"WeekCompleted\", each Date.EndOfWeek( [Date], Day.Monday) < Date.From(Date.EndOfWeek(CurrentDate, Day.Monday)), type logical),",
          "                InsertWeekEnding = Table.AddColumn(InsertCompletedWeek, \"WeekEnding\", each Date.EndOfWeek( [Date], Day.Monday), type date),",
          "",
          "                AddFY = Table.AddColumn(InsertWeekEnding, \"Fiscal Year\", each \"FY\" & (if [MonthOfYear] >= FYStartMonth and FYStartMonth >1 then Text.PadEnd( Text.End( Text.From([Year] +1), 2), 2, \"0\") else Text.End( Text.From([Year]), 2)), type text),",
          "                AddFQ = Table.AddColumn(AddFY, \"Fiscal Quarter\", each \"FQ\" & Text.From( Number.RoundUp( Date.Month( Date.AddMonths( [Date], - (FYStartMonth -1) )) / 3 )), type text),",
          "                AddFQnYr = Table.AddColumn(AddFQ, \"FQuarternYear\", each (if [MonthOfYear] >= FYStartMonth and FYStartMonth >1 then [Year] +1 else [Year]) * 10000 + Number.RoundUp( Date.Month( Date.AddMonths( [Date], - (FYStartMonth -1) )) / 3 ) * 100, type number),",
          "                AddFM = Table.AddColumn(AddFQnYr, \"Fiscal Period\", each if [MonthOfYear] >= FYStartMonth and FYStartMonth >1 then [MonthOfYear] - (FYStartMonth-1) else if [MonthOfYear] >= FYStartMonth and FYStartMonth =1 then [MonthOfYear] else [MonthOfYear] + (12-FYStartMonth+1), type text),",
          "                AddFMnYr = Table.AddColumn(AddFM , \"FPeriodnYear\", each (if [MonthOfYear] >= FYStartMonth and FYStartMonth >1 then [Year] +1 else [Year]) * 10000 + [Fiscal Period] * 100, type number),",
          "                FYCalendarStart = #date( Date.Year(StartDate)-1, FYStartMonth, 1 ),",
          "                InsertFFD = Table.AddColumn( AddFMnYr, \"FiscalFirstDay\", each if [MonthOfYear] >= FYStartMonth and FYStartMonth >1 then #date( Date.Year([Date])+1, FYStartMonth, 1) else #date( Date.Year([Date]), FYStartMonth, 1) ),",
          "                AddFYDateRange = Table.Buffer( Table.ExpandTableColumn( Table.ExpandTableColumn( Table.AddColumn( Table.Group( Table.Group( Table.AddColumn( Table.AddColumn( ",
          "                Table.RenameColumns( Table.TransformColumnTypes( Table.FromList( { Number.From(FYCalendarStart)..Number.From(EndDate) }, Splitter.SplitByNothing()),{{\"Column1\", type date}}), {{\"Column1\", \"Date\"}}), ",
          "                    \"FiscalFirstDay\", each if Date.Month([Date]) < FYStartMonth then #date( Date.Year([Date]), FYStartMonth, 1) else #date( Date.Year([Date])+1, FYStartMonth, 1)),",
          "                    \"FWStartDate\", each  Date.AddYears(Date.StartOfWeek( [Date], Day.Monday), 1)),",
          "                    {\"FiscalFirstDay\", \"FWStartDate\"}, {{\"AllRows\", each _, type table [Date=nullable date, FiscalFirstDay=date, FWStartDate=date]}}),",
          "                    {\"FiscalFirstDay\"}, {{\"AllRows2\", each _, type table [FiscalFirstDay=date, FWStartDate=date, AllRows=table]}}),",
          "                    \"Custom\", each Table.AddIndexColumn( [AllRows2], \"FY Week\", 1, 1))[[Custom]],",
          "                    \"Custom\", {\"FiscalFirstDay\", \"FWStartDate\", \"AllRows\", \"FY Week\"}, {\"FiscalFirstDay\", \"FWStartDate\", \"AllRows\", \"FY Week\"}),",
          "                    \"AllRows\", {\"Date\"}, {\"Date\"})[[Date], [FY Week]]",
          "                ),",
          "                MergeFYW = Table.NestedJoin(InsertFFD, {\"Date\"}, AddFYDateRange, {\"Date\"}, \"AddFYWeek\", JoinKind.LeftOuter),",
          "                ExpandFYWeek = Table.TransformColumnTypes( Table.ExpandTableColumn(MergeFYW, \"AddFYWeek\", {\"FY Week\"}, {\"Fiscal Week\"}),{{\"Fiscal Week\", Int64.Type}}),",
          "                UpdateFYWeek = if FYStartMonthNum =null then",
          "                Table.ReplaceValue(ExpandFYWeek, each [Fiscal Week], each if FYStartMonth =1 then [#\"ISO Weeknumber\"] else [Fiscal Week],Replacer.ReplaceValue,{\"Fiscal Week\"})",
          "                else ExpandFYWeek,",
          "                AddFYW = Table.AddColumn( UpdateFYWeek, \"Fiscal Year & Week\", each if FYStartMonthNum =null then [#\"Week & Year\"] else if Date.Month([Date]) < FYStartMonth then Text.From( Date.Year([Date])) & \"-\" & Text.PadStart( Text.From([Fiscal Week]), 2, \"0\") else Text.From( Date.Year([Date])+1) & \"-\" & Text.PadStart(Text.From([Fiscal Week]), 2, \"0\"), type text),",
          "                InsertFWeeknYear = Table.AddColumn(AddFYW, \"FWeeknYear\", each if FYStartMonthNum =null then [WeeknYear] else (if Date.Month([Date]) < FYStartMonth then Date.Year([Date]) else Date.Year([Date])+1) * 10000 + [Fiscal Week] * 100,  Int64.Type),",
          "                ",
          "                InsertIsAfterToday = Table.AddColumn(InsertFWeeknYear, \"IsAfterToday\", each not ([Date] <= Date.From(CurrentDate)), type logical),",
          "                InsertIsWorkingDay = Table.AddColumn(InsertIsAfterToday, \"IsWorkingDay\", each if Date.DayOfWeek([Date], Day.Monday) > 4 then false else true, type logical),",
          "                InsertIsHoliday = Table.AddColumn(InsertIsWorkingDay, \"IsHoliday\", each if Holidays = null then \"Unknown\" else List.Contains( Holidays, [Date] ), if Holidays = null then type text else type logical),",
          "                InsertIsBusinessDay = Table.AddColumn(InsertIsHoliday, \"IsBusinessDay\", each if [IsWorkingDay] = true and [IsHoliday] <> true then true else false, type logical),",
          "                InsertDayType = Table.AddColumn(InsertIsBusinessDay, \"Day Type\", each if [IsHoliday] = true then \"Holiday\" else if [IsWorkingDay] = false then \"Weekend\" else if [IsWorkingDay] = true then \"Weekday\" else null, type text),",
          "",
          "                CurrentDateRecord = Table.SelectRows(InsertDayType, each ([Date] = CurrentDate)),",
          "                CurrentISOyear = CurrentDateRecord{0}[ISO Year],",
          "                CurrentISOqtr = CurrentDateRecord{0}[ISO QuarterOfYear],",
          "                CurrentYear = CurrentDateRecord{0}[Year],",
          "                CurrentMonth = CurrentDateRecord{0}[MonthOfYear],",
          "                CurrentFiscalFirstDay = CurrentDateRecord{0}[FiscalFirstDay],",
          "                PrevFiscalFirstDay = Date.AddYears(CurrentFiscalFirstDay, -1),",
          "                CurrentFQ = CurrentDateRecord{0}[FQuarternYear],",
          "                CurrentFP = CurrentDateRecord{0}[FPeriodnYear],",
          "                CurrentFW = CurrentDateRecord{0}[FWeeknYear],",
          "                InsertISOQtrOffset = Table.AddColumn(InsertDayType, \"ISO QuarterOffset\", each ((4 * [ISO Year]) +  [ISO QuarterOfYear]) - ((4 * CurrentISOyear) + CurrentISOqtr), type number),",
          "                InsertISOYrOffset = Table.AddColumn(InsertISOQtrOffset, \"ISO YearOffset\", each [ISO Year] - CurrentISOyear, type number),",
          "                InsertFYoffset = Table.AddColumn(InsertISOYrOffset, \"FiscalYearOffset\", each try (if [MonthOfYear] >= FYStartMonth then [Year]+1 else [Year]) - (if CurrentMonth >= FYStartMonth then CurrentYear+1 else CurrentYear) otherwise null, type number),",
          "                InsertCurrentFQ = Table.AddColumn(InsertFYoffset, \"IsCurrentFQ\", each if [FQuarternYear] = CurrentFQ then true else false, type logical),",
          "                InsertCurrentFP = Table.AddColumn(InsertCurrentFQ, \"IsCurrentFP\", each if [FPeriodnYear] = CurrentFP then true else false, type logical),",
          "                InsertCurrentFW = Table.AddColumn(InsertCurrentFP, \"IsCurrentFW\", each if [FWeeknYear] = CurrentFW then true else false, type logical),",
          "                InsertPYTD = Table.AddColumn(InsertCurrentFW, \"IsPYTD\", each if CurrentYear-1 = [Year] and [Day of Year] <= CurrentDateRecord{0}[Day of Year] then true else false, type logical),",
          "                ListPrevFYDates = List.Buffer( Table.SelectRows( Table.ExpandTableColumn( Table.NestedJoin(",
          "                    Table.AddIndexColumn( Table.RenameColumns( Table.TransformColumnTypes( Table.FromList( List.Dates( PrevFiscalFirstDay, Number.From(CurrentFiscalFirstDay-PrevFiscalFirstDay),#duration(1,0,0,0)), Splitter.SplitByNothing()),{{\"Column1\", type date}}), {{\"Column1\", \"DateFY\"}}), \"Index\", 1, 1), {\"Index\"}, ",
          "                    Table.AddIndexColumn( Table.RenameColumns( Table.TransformColumnTypes( Table.FromList( List.Dates( Date.AddYears( PrevFiscalFirstDay, -1), Number.From( PrevFiscalFirstDay - Date.AddYears( PrevFiscalFirstDay, -1)),#duration(1,0,0,0)), Splitter.SplitByNothing()),{{\"Column1\", type date}}), {{\"Column1\", \"DateFY\"}}), \"Index\", 1, 1)",
          "                    , {\"Index\"}, \"Table\", JoinKind.LeftOuter), \"Table\", {\"DateFY\"}, {\"PrevDateFY\"}), each [DateFY] <= CurrentDate)[PrevDateFY] ),",
          "                InsertPFYTD = Table.AddColumn(InsertPYTD, \"IsPFYTD\", each if [FiscalYearOffset] = -1 and List.Contains(ListPrevFYDates, [Date] ) then true else false, type logical),",
          "                ",
          "                RemoveToday = Table.RemoveColumns( if EndDate < CurrentDate then Table.SelectRows(InsertPFYTD, each ([Date] <> CurrentDate)) else InsertPFYTD, {\"Day of Year\", \"FiscalFirstDay\"}),",
          "                ChType = Table.TransformColumnTypes(RemoveToday,{{\"Year\", Int64.Type}, {\"QuarterOfYear\", Int64.Type}, {\"MonthOfYear\", Int64.Type}, {\"DayOfMonth\", Int64.Type}, {\"DateInt\", Int64.Type}, {\"DayOfWeek\", Int64.Type}, {\"ISO YearOffset\", Int64.Type}, {\"ISO QuarternYear\", Int64.Type}, {\"ISO QuarterOffset\", Int64.Type}, {\"ISO Weeknumber\", Int64.Type}, {\"WeeknYear\", Int64.Type}, {\"MonthnYear\", Int64.Type}, {\"QuarternYear\", Int64.Type}, {\"FQuarternYear\", Int64.Type}, {\"Fiscal Period\", Int64.Type}, {\"FPeriodnYear\", Int64.Type}, {\"WeekOffset\", Int64.Type}, {\"MonthOffset\", Int64.Type}, {\"QuarterOffset\", Int64.Type}, {\"YearOffset\", Int64.Type}, {\"FiscalYearOffset\", Int64.Type}}),",
          "                ReorderColumns = Table.ReorderColumns(ChType, {\"Date\", \"Year\", \"YearOffset\", \"YearCompleted\", \"QuarterOfYear\", \"Quarter & Year\", \"QuarternYear\", \"QuarterOffset\", \"QuarterCompleted\", \"MonthOfYear\", \"DayOfMonth\", \"Month Name\", \"MonthShortName\", \"Month Initial\", \"Month & Year\", \"MonthnYear\", \"MonthOffset\", \"MonthCompleted\", \"MonthEnding\", \"DateInt\", \"DayOfWeek\", \"DayOfWeekName\", \"Weekday Initial\", \"Day Type\", \"ISO Year\", \"ISO YearOffset\", \"ISO QuarterOfYear\", \"ISO Quarter\", \"ISO Quarter & Year\", \"ISO QuarternYear\", \"ISO QuarterOffset\", \"ISO Weeknumber\", \"Week & Year\", \"WeeknYear\", \"WeekOffset\", \"WeekCompleted\", \"WeekEnding\", \"Fiscal Year\", \"FiscalYearOffset\", \"Fiscal Quarter\", \"FQuarternYear\", \"IsCurrentFQ\", \"Fiscal Period\", \"FPeriodnYear\", \"IsCurrentFP\", \"Fiscal Week\", \"Fiscal Year & Week\", \"FWeeknYear\", \"IsCurrentFW\", \"IsAfterToday\", \"IsWorkingDay\", \"IsHoliday\", \"IsBusinessDay\", \"IsPYTD\", \"IsPFYTD\"}, MissingField.UseNull)",
          "            in",
          "                ReorderColumns,",
          "                Documentation = [",
          "                Documentation.Name =  \" fxCalendar\", ",
          "                Documentation.Description = \" Date table function to create an ISO-8601 calendar\", ",
          "                Documentation.LongDescription = \" Date table function to create an ISO-8601 calendar\", ",
          "                Documentation.Category = \" Table\", ",
          "                Documentation.Version = \" 1.32: Adjusted fiscal weeks logic depending on wheter a fiscal start month was submitted\",",
          "                Documentation.Source = \" local\", ",
          "                Documentation.Author = \" Melissa de Korte\", ",
          "                Documentation.Examples = { [Description =  \" See: https://forum.enterprisedna.co/t/extended-date-table-power-query-m-function/6390\", ",
          "                    Code = \" Optional paramters: #(lf)",
          "                    (FYStartMonthNum) Month number the fiscal year starts, Januari if omitted #(lf) ",
          "                    (Holidays) Select a query (and column) that contains a list of holiday dates #(lf) ",
          "                    (WDStartNum) Switch default weekday numbering from 0-6 to 1-7 by entering a 1 #(lf)",
          "                    #(lf)",
          "                    Important to note: #(lf)",
          "                    [Fiscal Week] starts on a Monday and can contain less than 7 days in a First- and/or Last Week of a FY #(lf)",
          "                    [IsWorkingDay] does not take holiday dates into account  #(lf)",
          "                    [IsBusinessDay] does take optional holiday dates into account  #(lf)",
          "                    [IsPYTD] and [IsPFYTD] compare Previous [Day of Year] with the Current [Day of Year] number, so dates don't align in leap years\", ",
          "                    Result = \" \" ] }",
          "                ]",
          "            in ",
          "            Value.ReplaceType( fnDateTable, Value.ReplaceMetadata( Value.Type( fnDateTable ), Documentation )),",
          "        ",
          "        ChangeLog = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"nVXLjtowFP0VizW0CahTzXIKEzWjlvcoQnQWbuNARHBGiSll133/cr6kfsd5Z7Ii+J77Ovf4er8fzCBBg+HAHtmjsTW26KcvTgYvw/1gh2BCv6UFX84/UaJs00uSMPsiCFJE6OlobGLWCMMz8ofgClPwC0YR8oEBV9Gn8fk1QgT51GW7fn6kP1F8CKmDyrO6wISgBMxVZLstjfRYBLx8IwbFr5g3QX9YwXN05dYNoVYQByCDlflQ4Efs56ETezSpwarSf1wsa3wHJJsrG0i4rMPEYoPyXKPTI8QH2pw4AEGcnCHRg9Atq1nYVmeW9DzkSftIvseYHLtMggONOWimdYQ2nhVwUkbWJqSuIT5klRb4f4K4agAcatL/Hv5lo4r9SVdmNPf8f0fmwZyGE43Qid2q+gCbY5wQgcnstYVwNI+aRXBxSEKe+ent779Ckhm85cbY1i7FLwKBZu4eQqd3XGh3swDMRYJySmLnTB/WyB5Tgdj3tVKSyE+dhMTAho54wXkZeVbxHiuJsL+mQHjpPYXFfI1bPfncxpXhoHK3y0qOMz+W1nXOh8pZLcUQAvWQj1HqQ0OijXG0As1YmQ49qsOcFOv6pxm1mwhHkIuJpj8/AM01r0NRfX+XAyktuelDQHfkNhZdOQ/fNhV8uikrY8YhJcYrFZ56cXKiamM+IsLXOApFkmd8wvEVZ0E+mlfRTb9c0pDynNbk04xub69iKpyhwo1md6zpuWf2Hk++CmtIkh1VP8hFc6eH08D3eDxVWz0eUCOx0Z0TptSuSnZ23VaE9OpBsPAsUCzDZSw7Je5qK2nj0kywREkYs7XiLDtvQ0c49VmIMqtc5E55A9cTxAei9MQCfAC1BTbva3np2KgQJs6ucgtk60LhVk3bQoGWXUBeE2i5284a7U4jYI0iSMLfCMwRudKNRPdEWnyheW8v/wE=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [FIELD = _t, #\"EXAMPLE VALUE\" = _t, #\"DATA TYPE\" = _t, REMARK = _t])",
          "    ]",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "d2539242-1d45-451f-9e1b-58b420ec72c4",
        "queryGroup": "Melissa De Korte"
      },
      {
        "name": "Melissa_Calendar_v1_ChangeLog",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "    Source =",
          "    [",
          "        fxCalendar = let fnDateTable = ( StartDate as date, EndDate as date, optional FYStartMonthNum as number, optional Holidays as list, optional WDStartNum as number, optional AddRelativeNetWorkdays as logical ) as table =>",
          "            let",
          "                // //Parameters",
          "                // StartDate = #date(2020, 1, 1),",
          "                // EndDate = #date(2024, 12, 31),",
          "                // FYStartMonthNum = 1,",
          "                // Holidays = {},",
          "                // WDStartNum = 1,",
          "                // AddRelativeNetWorkdays = true,",
          "",
          "                //Date table code",
          "                FYStartMonth = List.Select( {1..12}, each _ = FYStartMonthNum ){0}? ?? 1,",
          "                WDStart = List.Select( {0..1}, each _ = WDStartNum ){0}? ?? 0,",
          "                CurrentDate = Date.From( DateTime.FixedLocalNow()),",
          "                DayCount = Duration.Days( Duration.From( EndDate - StartDate)) +1,",
          "                Source = List.Dates( StartDate, DayCount, #duration(1,0,0,0)),",
          "                AddToday = if EndDate < CurrentDate then List.Combine( {Source, {CurrentDate}}) else Source,",
          "                ToTable = Table.FromList(AddToday, Splitter.SplitByNothing(), type table [Date = Date.Type] ),",
          "                InsertYear = Table.AddColumn(ToTable, \"Year\", each Date.Year([Date]), type number),",
          "                InsertYearOffset = Table.AddColumn(InsertYear, \"CurrYearOffset\", each Date.Year([Date]) - Date.Year( Date.From(CurrentDate)), type number),",
          "                InsertCompletedYear = Table.AddColumn(InsertYearOffset, \"YearCompleted\", each Date.EndOfYear([Date]) < Date.From( Date.EndOfYear(CurrentDate)), type logical),",
          "",
          "                InsertQuarterNum = Table.AddColumn(InsertCompletedYear, \"Quarter Number\", each Date.QuarterOfYear([Date]), type number),",
          "                InsertQuarter = Table.AddColumn(InsertQuarterNum, \"Quarter\", each \"Q\" & Number.ToText([Quarter Number]), type text),",
          "                InsertStartOfQuarter = Table.AddColumn(InsertQuarter, \"Start of Quarter\", each Date.StartOfQuarter([Date]), type date),",
          "                InsertEndOfQuarter = Table.AddColumn(InsertStartOfQuarter, \"End of Quarter\", each Date.EndOfQuarter([Date]), type date),",
          "                InsertCalendarQtr = Table.AddColumn(InsertEndOfQuarter, \"Quarter & Year\", each \"Q\" & Number.ToText( Date.QuarterOfYear([Date])) & Date.ToText([Date], [Format = \" yyyy\"]), type text),",
          "                InsertQuarternYear = Table.AddColumn(InsertCalendarQtr, \"QuarternYear\", each [Year] * 10 + [Quarter Number], type number),",
          "                InsertQuarterOffset = Table.AddColumn(InsertQuarternYear, \"CurrQuarterOffset\", each ((4 * Date.Year([Date])) +  Date.QuarterOfYear([Date])) - ((4 * Date.Year(Date.From(CurrentDate))) +  Date.QuarterOfYear(Date.From(CurrentDate))), type number),",
          "                InsertCompletedQuarter = Table.AddColumn(InsertQuarterOffset, \"QuarterCompleted\", each Date.EndOfQuarter([Date]) < Date.From(Date.EndOfQuarter(CurrentDate)), type logical),",
          "",
          "                InsertMonth = Table.AddColumn(InsertCompletedQuarter, \"Month\", each Date.Month([Date]), type number),",
          "                InsertStartOfMonth = Table.AddColumn(InsertMonth, \"Start of Month\", each Date.StartOfMonth([Date]), type date),",
          "                InsertEndOfMonth = Table.AddColumn(InsertStartOfMonth, \"End of Month\", each Date.EndOfMonth([Date]), type date),",
          "                InsertCalendarMonth = Table.AddColumn(InsertEndOfMonth, \"Month & Year\", each Text.Proper( Date.ToText([Date], [Format = \"MMM yyyy\"])), type text),",
          "                InsertMonthnYear = Table.AddColumn(InsertCalendarMonth , \"MonthnYear\", each [Year] * 100 + [Month], type number),",
          "                InsertMonthOffset = Table.AddColumn(InsertMonthnYear, \"CurrMonthOffset\", each ((12 * Date.Year([Date])) +  Date.Month([Date])) - ((12 * Date.Year(Date.From(CurrentDate))) +  Date.Month(Date.From(CurrentDate))), type number),",
          "                InsertCompletedMonth = Table.AddColumn(InsertMonthOffset, \"MonthCompleted\", each Date.EndOfMonth([Date]) < Date.From(Date.EndOfMonth(CurrentDate)), type logical),",
          "                InsertMonthName = Table.AddColumn(InsertCompletedMonth, \"Month Name\", each Text.Proper( Date.ToText([Date], \"MMMM\")), type text),",
          "                InsertMonthShort = Table.AddColumn( InsertMonthName, \"Month Short\", each Text.Proper( Date.ToText([Date], \"MMM\")), type text),",
          "                InsertMonthInitial = Table.AddColumn(InsertMonthShort, \"Month Initial\", each Text.Start([Month Name], 1) & Text.Repeat( Character.FromNumber(8203), Date.Month([Date]) ), type text),",
          "                InsertDayOfMonth = Table.AddColumn(InsertMonthInitial, \"Day of Month\", each Date.Day([Date]), type number),",
          "            ",
          "                InsertWeekNumber = Table.AddColumn(InsertDayOfMonth, \"Week Number\", each",
          "                    if Number.RoundDown((Date.DayOfYear([Date])-(Date.DayOfWeek([Date], Day.Monday)+1)+10)/7)=0",
          "                    then Number.RoundDown((Date.DayOfYear(#date(Date.Year([Date])-1,12,31))-(Date.DayOfWeek(#date(Date.Year([Date])-1,12,31), Day.Monday)+1)+10)/7)",
          "                    else if (Number.RoundDown((Date.DayOfYear([Date])-(Date.DayOfWeek([Date], Day.Monday)+1)+10)/7)=53 and (Date.DayOfWeek(#date(Date.Year([Date]),12,31), Day.Monday)+1<4))",
          "                    then 1 else Number.RoundDown((Date.DayOfYear([Date])-(Date.DayOfWeek([Date], Day.Monday)+1)+10)/7), type number),",
          "                InsertStartOfWeek = Table.AddColumn(InsertWeekNumber, \"Start of Week\", each Date.StartOfWeek([Date], Day.Monday), type date),",
          "                InsertWeekEnding = Table.AddColumn(InsertStartOfWeek, \"End of Week\", each Date.EndOfWeek( [Date], Day.Monday), type date),",
          "                InsertCalendarWk = Table.AddColumn(InsertWeekEnding, \"Week & Year\", each \"W\" & Text.PadStart( Text.From( [Week Number] ), 2, \"0\") & \" \" & Text.From(Date.Year( Date.AddDays( Date.StartOfWeek([Date], Day.Monday), 3 ))), type text ),",
          "                InsertWeeknYear = Table.AddColumn(InsertCalendarWk, \"WeeknYear\", each Date.Year( Date.AddDays( Date.StartOfWeek([Date], Day.Monday), 3 )) * 100 + [Week Number],  Int64.Type),",
          "                InsertWeekOffset = Table.AddColumn(InsertWeeknYear, \"CurrWeekOffset\", each (Number.From(Date.StartOfWeek([Date], Day.Monday))-Number.From(Date.StartOfWeek(CurrentDate, Day.Monday)))/7, type number),",
          "                InsertCompletedWeek = Table.AddColumn(InsertWeekOffset, \"WeekCompleted\", each Date.EndOfWeek( [Date], Day.Monday) < Date.From(Date.EndOfWeek(CurrentDate, Day.Monday)), type logical),",
          "            ",
          "                InsertDayWeek = Table.AddColumn(InsertCompletedWeek, \"Day of Week Number\", each Date.DayOfWeek([Date], Day.Monday) + WDStart, Int64.Type),",
          "                InsertDayName = Table.AddColumn(InsertDayWeek, \"Day of Week Name\", each Text.Proper( Date.ToText([Date], \"dddd\" )), type text),",
          "                InsertDayInitial = Table.AddColumn(InsertDayName, \"Day of Week Initial\", each Text.Proper(Text.Start([Day of Week Name], 1)) & Text.Repeat( Character.FromNumber(8203), Date.DayOfWeek([Date], Day.Monday) + WDStart ), type text),",
          "                InsertDayOfYear = Table.AddColumn(InsertDayInitial, \"Day of Year\", each Date.DayOfYear([Date]), Int64.Type),",
          "                InsertDayInt = Table.AddColumn(InsertDayOfYear, \"DateInt\", each [Year] * 10000 + [Month] * 100 + [Day of Month], type number),",
          "                InsertDayOffset = Table.AddColumn(InsertDayInt, \"CurrDayOffset\", each Number.From([Date]) - Number.From(CurrentDate), type number),",
          "                InsertIsAfterToday = Table.AddColumn(InsertDayOffset, \"IsAfterToday\", each not ([Date] <= Date.From(CurrentDate)), type logical),",
          "                InsertIsWorkingDay = Table.AddColumn(InsertIsAfterToday, \"IsWeekDay\", each if Date.DayOfWeek([Date], Day.Monday) > 4 then false else true, type logical),",
          "                InsertIsHoliday = Table.AddColumn(InsertIsWorkingDay, \"IsHoliday\", each if Holidays = null then \"Unknown\" else List.Contains( Holidays, [Date] ), if Holidays = null then type text else type logical),",
          "                InsertIsBusinessDay = Table.AddColumn(InsertIsHoliday, \"IsBusinessDay\", each if [IsWeekDay] = true and [IsHoliday] <> true then true else false, type logical),",
          "                InsertDayType = Table.AddColumn(InsertIsBusinessDay, \"Day Type\", each if [IsHoliday] = true then \"Holiday\" else if [IsWeekDay] = false then \"Weekend\" else if [IsWeekDay] = true then \"Weekday\" else null, type text),",
          "",
          "                InsertISOYear = Table.AddColumn( InsertDayType, \"ISO Year\", each Date.Year( Date.AddDays( Date.StartOfWeek([Date], Day.Monday), 3 )), type number),",
          "                InsertISOqNum = Table.AddColumn(InsertISOYear, \"ISO Quarter Number\", each if [Week Number] >39 then 4 else if [Week Number] >26 then 3 else if [Week Number] >13 then 2 else 1, Int64.Type),",
          "                InsertISOqtr = Table.AddColumn(InsertISOqNum, \"ISO Quarter\", each \"Q\" & Number.ToText([ISO Quarter Number]), type text),",
          "                InsertISOQuarter = Table.AddColumn(InsertISOqtr, \"ISO Quarter & Year\", each \"Q\" & Number.ToText([ISO Quarter Number]) & \" \" & Number.ToText([ISO Year]), type text),",
          "                InsertISOqNy = Table.AddColumn(InsertISOQuarter, \"ISO QuarternYear\", each [ISO Year] * 10 + [ISO Quarter Number], type number),",
          "",
          "                // BufferTable = Table.Buffer(Table.Distinct( InsertISOqNy[[ISO Year], [DateInt]])),",
          "                // InsertISOday = Table.AddColumn(InsertISOqNy, \"ISO Day of Year\", (OT) => Table.RowCount( Table.SelectRows( BufferTable, (IT) => IT[DateInt] <= OT[DateInt] and IT[ISO Year] = OT[ISO Year])),  Int64.Type),",
          "                AddFY = Table.AddColumn(InsertISOqNy, \"Fiscal Year\", each \"FY\" & (if [Month] >= FYStartMonth and FYStartMonth >1 then Text.From([Year] +1) else Text.From([Year])), type text),",
          "                //AddFYs = Table.AddColumn(AddFY, \"Fiscal Year short\", each \"FY\" & (if [Month] >= FYStartMonth and FYStartMonth >1 then Text.PadEnd( Text.End( Text.From([Year] +1), 2), 2, \"0\") else Text.End( Text.From([Year]), 2)), type text),",
          "                AddFQ = Table.AddColumn(AddFY, \"Fiscal Quarter\", each \"FQ\" & Text.From( Number.RoundUp( Date.Month( Date.AddMonths( [Date], - (FYStartMonth -1) )) / 3 )) & \" \" & (if [Month] >= FYStartMonth and FYStartMonth >1 then Text.From([Year] +1) else Text.From([Year])), type text),",
          "                AddFQnYr = Table.AddColumn(AddFQ, \"FQuarternYear\", each (if [Month] >= FYStartMonth and FYStartMonth >1 then [Year] +1 else [Year]) * 10 + Number.RoundUp( Date.Month( Date.AddMonths( [Date], - (FYStartMonth -1) )) / 3 ), type number),",
          "                AddFM = Table.AddColumn(AddFQnYr, \"Fiscal Period Number\", each if [Month] >= FYStartMonth and FYStartMonth >1 then [Month] - (FYStartMonth-1) else if [Month] >= FYStartMonth and FYStartMonth =1 then [Month] else [Month] + (12-FYStartMonth+1), type number),",
          "                AddFP = Table.AddColumn(AddFM, \"Fiscal Period\", each \"FP\" & Text.PadStart( Text.From([Fiscal Period Number]), 2, \"0\") & \" \" & (if [Month] >= FYStartMonth and FYStartMonth >1 then Text.From([Year] +1) else Text.From([Year])), type text),",
          "                AddFMnYr = Table.AddColumn(AddFP , \"FPeriodnYear\", each (if [Month] >= FYStartMonth and FYStartMonth >1 then [Year] +1 else [Year]) * 100 + [Fiscal Period Number], type number),",
          "                FYCalendarStart = #date( Date.Year(StartDate)-1, FYStartMonth, 1 ),",
          "                InsertFFD = Table.AddColumn( AddFMnYr, \"FiscalFirstDay\", each if [Month] >= FYStartMonth and FYStartMonth >1 then #date( Date.Year([Date])+1, FYStartMonth, 1) else #date( Date.Year([Date]), FYStartMonth, 1), type date ),",
          "",
          "                InitTable = Table.FromList( List.Transform( {Number.From(FYCalendarStart) .. Number.From(EndDate)}, Date.From), Splitter.SplitByNothing(), type table [DateFW = Date.Type]),",
          "                AddFFD = Table.AddColumn( InitTable, \"FiscalFirstDay\", each if Date.Month([DateFW]) < FYStartMonth then #date(Date.Year([DateFW]), FYStartMonth, 1) else #date(Date.Year([DateFW]) + 1, FYStartMonth, 1)),",
          "                AddFWSD = Table.AddColumn( AddFFD, \"FWStartDate\", each Date.AddYears(Date.StartOfWeek([DateFW], Day.Monday), 1)),",
          "                Group1 = Table.Group( AddFWSD, {\"FiscalFirstDay\", \"FWStartDate\"}, {{\"AllRows\", each _, type table [DateFW = nullable date, FiscalFirstDay = date, FWStartDate = date]}}),",
          "                Group2 = Table.Group( Group1, {\"FiscalFirstDay\"}, {{\"AllRows2\", each _, type table [FiscalFirstDay = date, FWStartDate = date, AllRows = table]}}),",
          "                AddIndex = Table.AddColumn( Group2, \"Custom\", each Table.AddIndexColumn([AllRows2], \"Fiscal Week Number\", 1, 1) )[[Custom]],",
          "                ExpandG2 = Table.ExpandTableColumn( AddIndex, \"Custom\", {\"FiscalFirstDay\", \"FWStartDate\", \"AllRows\", \"Fiscal Week Number\"}, {\"FiscalFirstDay\", \"FWStartDate\", \"AllRows\", \"Fiscal Week Number\"}), ",
          "                ExpandG1 = Table.ExpandTableColumn( ExpandG2, \"AllRows\", {\"DateFW\"}, {\"DateFW\"} )[[DateFW], [Fiscal Week Number]],",
          "                MergeFYW = Table.Join( InsertFFD, {\"Date\"}, ExpandG1, {\"DateFW\"}, JoinKind.LeftOuter, JoinAlgorithm.SortMerge ),",
          "                FWlogic = List.Contains( {null}, FYStartMonthNum),",
          "                UpdateFYWeek = if FWlogic then Table.ReplaceValue(MergeFYW, each [Fiscal Week Number], each if FYStartMonth =1 then [Week Number] else [Fiscal Week Number], Replacer.ReplaceValue, {\"Fiscal Week Number\"}) else MergeFYW,",
          "                AddFYW = Table.AddColumn( UpdateFYWeek, \"Fiscal Week\", each if FWlogic then \"F\" & [#\"Week & Year\"] else if FYStartMonth =1 then \"FW\" & Text.PadStart( Text.From([Fiscal Week Number]), 2, \"0\") & Date.ToText([Date], \" yyyy\") else if Date.Month([Date]) < FYStartMonth then \"FW\" & Text.PadStart( Text.From([Fiscal Week Number]), 2, \"0\") & Date.ToText([Date], \" yyyy\") else \"FW\" & Text.PadStart(Text.From([Fiscal Week Number]), 2, \"0\") & \" \" & Text.From( Date.Year([Date])+1), type text),",
          "                InsertFWeeknYear = Table.AddColumn(AddFYW, \"FWeeknYear\", each if FWlogic then [WeeknYear] else (if FYStartMonth =1 then Date.Year([Date]) else if Date.Month([Date]) < FYStartMonth then Date.Year([Date]) else Date.Year([Date])+1) * 100 + [Fiscal Week Number],  Int64.Type),",
          "                ",
          "                CurrentDateRecord = Table.SelectRows(InsertFWeeknYear, each ([Date] = CurrentDate)),",
          "                CurrentISOyear = CurrentDateRecord{0}[ISO Year],",
          "                CurrentISOqtr = CurrentDateRecord{0}[ISO Quarter Number],",
          "                CurrentYear = CurrentDateRecord{0}[Year],",
          "                CurrentMonth = CurrentDateRecord{0}[Month],",
          "                CurrentFiscalFirstDay = CurrentDateRecord{0}[FiscalFirstDay],",
          "                PrevFiscalFirstDay = Date.AddYears(CurrentFiscalFirstDay, -1),",
          "                CurrentFY = CurrentDateRecord{0}[Fiscal Year],",
          "                CurrentFQ = CurrentDateRecord{0}[FQuarternYear],",
          "                CurrentFP = CurrentDateRecord{0}[FPeriodnYear],",
          "                CurrentFW = CurrentDateRecord{0}[FWeeknYear],",
          "",
          "                InsertISOYrOffset = Table.AddColumn(InsertFWeeknYear, \"ISO CurrYearOffset\", each [ISO Year] - CurrentISOyear, type number),",
          "                InsertISOQtrOffset = Table.AddColumn(InsertISOYrOffset, \"ISO CurrQuarterOffset\", each ((4 * [ISO Year]) +  [ISO Quarter Number]) - ((4 * CurrentISOyear) + CurrentISOqtr), type number),",
          "                InsertFYoffset = Table.AddColumn(InsertISOQtrOffset, \"Fiscal CurrYearOffset\", each try (if [Month] >= FYStartMonth then [Year]+1 else [Year]) - (if CurrentMonth >= FYStartMonth then CurrentYear+1 else CurrentYear) otherwise null, type number),",
          "                InsertCurrentFY = Table.AddColumn(InsertFYoffset, \"IsCurrentFY\", each if [Fiscal Year] = CurrentFY then true else false, type logical),",
          "                InsertCurrentFQ = Table.AddColumn(InsertCurrentFY, \"IsCurrentFQ\", each if [FQuarternYear] = CurrentFQ then true else false, type logical),",
          "                InsertCurrentFP = Table.AddColumn(InsertCurrentFQ, \"IsCurrentFP\", each if [FPeriodnYear] = CurrentFP then true else false, type logical),",
          "                InsertCurrentFW = Table.AddColumn(InsertCurrentFP, \"IsCurrentFW\", each if [FWeeknYear] = InsertISOYrOffset then true else false, type logical),",
          "                InsertPYTD = Table.AddColumn(InsertCurrentFW, \"IsPYTD\", each if CurrentYear-1 = [Year] and [Day of Year] <= CurrentDateRecord{0}[Day of Year] then true else false, type logical),",
          "                    ListPrevFYDates = List.Buffer( Table.SelectRows( Table.ExpandTableColumn( Table.NestedJoin(",
          "                        Table.AddIndexColumn( Table.RenameColumns( Table.TransformColumnTypes( Table.FromList( List.Dates( PrevFiscalFirstDay, Number.From(CurrentFiscalFirstDay-PrevFiscalFirstDay),#duration(1,0,0,0)), Splitter.SplitByNothing()),{{\"Column1\", type date}}), {{\"Column1\", \"DateFY\"}}), \"Index\", 1, 1), {\"Index\"}, ",
          "                        Table.AddIndexColumn( Table.RenameColumns( Table.TransformColumnTypes( Table.FromList( List.Dates( Date.AddYears( PrevFiscalFirstDay, -1), Number.From( PrevFiscalFirstDay - Date.AddYears( PrevFiscalFirstDay, -1)),#duration(1,0,0,0)), Splitter.SplitByNothing()),{{\"Column1\", type date}}), {{\"Column1\", \"DateFY\"}}), \"Index\", 1, 1)",
          "                        , {\"Index\"}, \"Table\", JoinKind.LeftOuter), \"Table\", {\"DateFY\"}, {\"PrevDateFY\"}), each [DateFY] <= CurrentDate)[PrevDateFY] ),",
          "                InsertPFYTD = Table.AddColumn(InsertPYTD, \"IsPFYTD\", each if [Fiscal CurrYearOffset] = -1 and List.Contains(ListPrevFYDates, [Date] ) then true else false, type logical),",
          "                InsertNetWorkdays = if AddRelativeNetWorkdays = true then Table.AddColumn(InsertPFYTD, \"Relative Networkdays\", each fxNETWORKDAYS( StartDate, [Date], Holidays ), type number ) else InsertPFYTD,",
          "                fxNETWORKDAYS = (StartDate, EndDate, optional Holidays as list) =>",
          "                    let",
          "                    ListOfDates = List.Dates( StartDate, Number.From(EndDate-StartDate)+1, Duration.From(1) ),",
          "                    DeleteHolidays = if Holidays = null then ListOfDates else List.Difference( ListOfDates, List.Transform(Holidays, Date.From )),",
          "                    DeleteWeekends = List.Select( DeleteHolidays, each Date.DayOfWeek( _, Day.Monday) < 5 ),",
          "                    CountDays = List.Count( DeleteWeekends)",
          "                    in",
          "                    CountDays,",
          "                RemoveToday = Table.RemoveColumns( if EndDate < CurrentDate then Table.SelectRows(InsertNetWorkdays, each ([Date] <> CurrentDate)) else InsertNetWorkdays, {\"Day of Year\", \"FiscalFirstDay\"}), ",
          "                ChType = Table.TransformColumnTypes(RemoveToday,{{\"Year\", Int64.Type}, {\"Quarter Number\", Int64.Type}, {\"Month\", Int64.Type}, {\"Day of Month\", Int64.Type}, {\"DateInt\", Int64.Type}, {\"Day of Week Number\", Int64.Type}, {\"ISO CurrYearOffset\", Int64.Type}, {\"ISO QuarternYear\", Int64.Type}, {\"ISO CurrQuarterOffset\", Int64.Type}, {\"Week Number\", Int64.Type}, {\"WeeknYear\", Int64.Type}, {\"MonthnYear\", Int64.Type}, {\"QuarternYear\", Int64.Type}, {\"FQuarternYear\", Int64.Type}, {\"Fiscal Period Number\", Int64.Type}, {\"FPeriodnYear\", Int64.Type}, {\"CurrWeekOffset\", Int64.Type}, {\"CurrMonthOffset\", Int64.Type}, {\"CurrQuarterOffset\", Int64.Type}, {\"CurrYearOffset\", Int64.Type}, {\"Fiscal CurrYearOffset\", Int64.Type}, {\"Fiscal Week Number\", Int64.Type}}),",
          "                ReorderCols = Table.ReorderColumns(ChType,{\"Date\", \"Year\", \"CurrYearOffset\", \"YearCompleted\", \"Quarter Number\", \"Quarter\", \"Start of Quarter\", \"End of Quarter\", \"Quarter & Year\", \"QuarternYear\", \"CurrQuarterOffset\", \"QuarterCompleted\", \"Month\", \"Start of Month\", \"End of Month\", \"Month & Year\", \"MonthnYear\", \"CurrMonthOffset\", \"MonthCompleted\", \"Month Name\", \"Month Short\", \"Month Initial\", \"Day of Month\", \"Week Number\", \"Start of Week\", \"End of Week\", \"Week & Year\", \"WeeknYear\", \"CurrWeekOffset\", \"WeekCompleted\", \"Day of Week Number\", \"Day of Week Name\", \"Day of Week Initial\", \"DateInt\", \"CurrDayOffset\", \"IsAfterToday\", \"IsWeekDay\", \"IsHoliday\", \"IsBusinessDay\", \"Day Type\", \"ISO Year\", \"ISO CurrYearOffset\", \"ISO Quarter Number\", \"ISO Quarter\", \"ISO Quarter & Year\", \"ISO QuarternYear\", \"ISO CurrQuarterOffset\", \"Fiscal Year\", \"Fiscal CurrYearOffset\", \"Fiscal Quarter\", \"FQuarternYear\", \"Fiscal Period Number\", \"Fiscal Period\", \"FPeriodnYear\", \"DateFW\", \"Fiscal Week Number\", \"Fiscal Week\", \"FWeeknYear\", \"IsCurrentFY\", \"IsCurrentFQ\", \"IsCurrentFP\", \"IsCurrentFW\", \"IsPYTD\", \"IsPFYTD\"}),",
          "                ListCols = if FWlogic then Table.RemoveColumns(ReorderCols,{\"ISO Quarter Number\", \"Fiscal Year\", \"Fiscal Quarter\", \"FQuarternYear\", \"Fiscal Period Number\", \"Fiscal Period\", \"FPeriodnYear\", \"DateFW\", \"Fiscal Week Number\", \"Fiscal Week\", \"FWeeknYear\", \"Fiscal CurrYearOffset\", \"IsCurrentFQ\", \"IsCurrentFP\", \"IsCurrentFW\"}) else Table.RemoveColumns(ReorderCols,{\"Fiscal Period Number\", \"DateFW\", \"Fiscal Week Number\", \"ISO Quarter Number\"})",
          "            in",
          "                ListCols,",
          "                Documentation = [",
          "                Documentation.Name =  \" fxCalendar\", ",
          "                Documentation.Description = \" Date table function to create an ISO-8601 calendar\", ",
          "                Documentation.LongDescription = \" Date table function to create an ISO-8601 calendar\", ",
          "                Documentation.Category = \" Table\", ",
          "                Documentation.Version = \" 2.01: full code review\",",
          "                Documentation.Source = \" local\", ",
          "                Documentation.Author = \" Melissa de Korte\", ",
          "                Documentation.Examples = { [Description =  \" See: https://forum.enterprisedna.co/t/extended-date-table-power-query-m-function/6390\", ",
          "                    Code = \" Optional paramters: #(lf)",
          "                    (FYStartMonthNum) Month number the fiscal year starts, Januari if omitted #(lf) ",
          "                    (Holidays) Select a query (and column) that contains a list of holiday dates #(lf) ",
          "                    (WDStartNum) Switch default weekday numbering from 0-6 to 1-7 by entering a 1 #(lf)",
          "                    (AddRelativeNetWorkdays) if true adds a Relative Networkdays column to the date table #(lf)",
          "                    #(lf)",
          "                    Important to note: #(lf)",
          "                    [Fiscal Week] starts on a Monday and can contain less than 7 days in a First- and/or Last Week of a FY #(lf)",
          "                    [IsWeekDay] does not take holiday dates into account  #(lf)",
          "                    [IsBusinessDay] does take optional holiday dates into account  #(lf)",
          "                    [IsPYTD] and [IsPFYTD] compare Previous [Day of Year] with the Current [Day of Year] number, so dates don't align in leap years #(lf)",
          "                    IMPORTANT! No Fiscal columns will be added if the (FYStartMonthNum) is omitted\", ",
          "                    Result = \" \" ] }",
          "                ]",
          "            in ",
          "            Value.ReplaceType( fnDateTable, Value.ReplaceMetadata( Value.Type( fnDateTable ), Documentation )),",
          "        ",
          "        ",
          "        ChangeLog = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"nVXLjtowFP0VizW0CahTzXIKEzWjlvcoQnQWbuNARHBGiSll133/cr6kfsd5Z7Ii+J77Ovf4er8fzCBBg+HAHtmjsTW26KcvTgYvw/1gh2BCv6UFX84/UaJs00uSMPsiCFJE6OlobGLWCMMz8ofgClPwC0YR8oEBV9Gn8fk1QgT51GW7fn6kP1F8CKmDyrO6wISgBMxVZLstjfRYBLx8IwbFr5g3QX9YwXN05dYNoVYQByCDlflQ4Efs56ETezSpwarSf1wsa3wHJJsrG0i4rMPEYoPyXKPTI8QH2pw4AEGcnCHRg9Atq1nYVmeW9DzkSftIvseYHLtMggONOWimdYQ2nhVwUkbWJqSuIT5klRb4f4K4agAcatL/Hv5lo4r9SVdmNPf8f0fmwZyGE43Qid2q+gCbY5wQgcnstYVwNI+aRXBxSEKe+ent779Ckhm85cbY1i7FLwKBZu4eQqd3XGh3swDMRYJySmLnTB/WyB5Tgdj3tVKSyE+dhMTAho54wXkZeVbxHiuJsL+mQHjpPYXFfI1bPfncxpXhoHK3y0qOMz+W1nXOh8pZLcUQAvWQj1HqQ0OijXG0As1YmQ49qsOcFOv6pxm1mwhHkIuJpj8/AM01r0NRfX+XAyktuelDQHfkNhZdOQ/fNhV8uikrY8YhJcYrFZ56cXKiamM+IsLXOApFkmd8wvEVZ0E+mlfRTb9c0pDynNbk04xub69iKpyhwo1md6zpuWf2Hk++CmtIkh1VP8hFc6eH08D3eDxVWz0eUCOx0Z0TptSuSnZ23VaE9OpBsPAsUCzDZSw7Je5qK2nj0kywREkYs7XiLDtvQ0c49VmIMqtc5E55A9cTxAei9MQCfAC1BTbva3np2KgQJs6ucgtk60LhVk3bQoGWXUBeE2i5284a7U4jYI0iSMLfCMwRudKNRPdEWnyheW8v/wE=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [FIELD = _t, #\"EXAMPLE VALUE\" = _t, #\"DATA TYPE\" = _t, REMARK = _t])",
          "    ],",
          "    ChangeLog = Source[ChangeLog],",
          "    #\"Changed Type\" = Table.TransformColumnTypes(ChangeLog,{{\"FIELD\", type text}, {\"EXAMPLE VALUE\", type text}, {\"DATA TYPE\", type text}, {\"REMARK\", type text}})",
          "in",
          "    #\"Changed Type\""
        ],
        "kind": "m",
        "lineageTag": "31e899b9-6a55-41dc-83f9-c0a3e265490e",
        "queryGroup": "Melissa De Korte"
      }
    ],
    "queryGroups": [
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "0"
          }
        ],
        "folder": "Melissa De Korte"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "1"
          }
        ],
        "folder": "Oscar Valerock"
      }
    ],
    "sourceQueryCulture": "en-GB",
    "tables": [
      {
        "name": "Date Fields",
        "annotations": [
          {
            "name": "PBI_Id",
            "value": "865962b8d847483186c61c07ebd509a8"
          }
        ],
        "columns": [
          {
            "name": "DateParameter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "isDataTypeInferred": true,
            "isNameInferred": false,
            "lineageTag": "76fa6769-8c37-4fd3-bf8c-41ea747373be",
            "relatedColumnDetails": {
              "groupByColumns": [
                {
                  "groupingColumn": "DateParameter Fields"
                }
              ]
            },
            "sortByColumn": "DateParameter Order",
            "sourceColumn": "[Value1]",
            "summarizeBy": "none",
            "type": "calculatedTableColumn"
          },
          {
            "name": "DateParameter Fields",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "extendedProperties": [
              {
                "name": "ParameterMetadata",
                "type": "json",
                "value": {
                  "kind": 2,
                  "version": 3
                }
              }
            ],
            "isDataTypeInferred": true,
            "isHidden": true,
            "isNameInferred": false,
            "lineageTag": "5081271e-290b-4707-87ba-0ea080fbe3e9",
            "sortByColumn": "DateParameter Order",
            "sourceColumn": "[Value2]",
            "summarizeBy": "none",
            "type": "calculatedTableColumn"
          },
          {
            "name": "DateParameter Order",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "isDataTypeInferred": true,
            "isHidden": true,
            "isNameInferred": false,
            "lineageTag": "54be3879-10cc-43d2-8623-23ef27022425",
            "sourceColumn": "[Value3]",
            "summarizeBy": "sum",
            "type": "calculatedTableColumn"
          }
        ],
        "lineageTag": "671e2911-9c7a-4f0d-9066-21ec5693eb4d",
        "partitions": [
          {
            "name": "Date Fields",
            "mode": "import",
            "source": {
              "expression": [
                "{",
                "    (\"1 WEEK\",  NAMEOF( tbl_fnDates[Week End] ), 0),",
                "    (\"FORTNIGHTLY (2 WEEKS)\",  NAMEOF( tbl_fnDates[2W Date] ), 1),",
                "    (\"MONTHLY\",  NAMEOF( tbl_fnDates[Month Start] ), 2),",
                "    (\"BIMENSAL (2 MONTHS)\",  NAMEOF( tbl_fnDates[2M Date] ), 3),",
                "    (\"BIANNUAL (6 MONTHS)\",  NAMEOF( tbl_fnDates[6M Date] ), 4)",
                "",
                "}"
              ],
              "type": "calculated"
            }
          }
        ]
      },
      {
        "name": "tbl_fnDateTableGenerator",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "317c24ef-21d4-43d1-ad99-0c9f4f44acf9",
            "sourceColumn": "Date",
            "summarizeBy": "none"
          },
          {
            "name": "Date Integer",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "5755c530-ff70-4501-8950-49171c62597a",
            "sourceColumn": "Date Integer",
            "summarizeBy": "sum"
          },
          {
            "name": "Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "c75fce55-a4ee-4fc3-8e31-f848fb95338e",
            "sourceColumn": "Year",
            "summarizeBy": "sum"
          },
          {
            "name": "Year Default",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "529faabb-3f02-4e2c-9557-96d047253f3c",
            "sourceColumn": "Year Default",
            "summarizeBy": "none"
          },
          {
            "name": "YYYY-MM",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "51b3752d-b9b8-4173-bbde-de614c31d113",
            "sourceColumn": "YYYY-MM",
            "summarizeBy": "none"
          },
          {
            "name": "Month-Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "eb323028-f275-433f-a510-9b89ba68fc2c",
            "sourceColumn": "Month-Year",
            "summarizeBy": "none"
          },
          {
            "name": "Month Of Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "deb000d0-88b9-4366-8ac9-518b9c114919",
            "sourceColumn": "Month Of Year",
            "summarizeBy": "sum"
          },
          {
            "name": "Month Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "64f9f0fc-7080-4293-a89c-22a1b9492744",
            "sourceColumn": "Month Name",
            "summarizeBy": "none"
          },
          {
            "name": "Month Name Short",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "9b4b2e84-3cd2-44b7-a970-7c6e26b3c52a",
            "sourceColumn": "Month Name Short",
            "summarizeBy": "none"
          },
          {
            "name": "Month Name Default",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "23d646b6-875a-4034-bba4-903dc37da695",
            "sourceColumn": "Month Name Default",
            "summarizeBy": "none"
          },
          {
            "name": "Start of Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "3e8a6d73-69d5-486c-b9fc-afb5b58c9b81",
            "sourceColumn": "Start of Month",
            "summarizeBy": "none"
          },
          {
            "name": "End of Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "33e25259-a0e8-4e0c-892a-34e4d345aae6",
            "sourceColumn": "End of Month",
            "summarizeBy": "none"
          },
          {
            "name": "Days in Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "5b04cdb5-fe0e-4b0b-ac3a-4a0a7fec53d0",
            "sourceColumn": "Days in Month",
            "summarizeBy": "sum"
          },
          {
            "name": "ISO Weeknumber",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "c696bf77-48b7-4ba5-8717-b86722662d37",
            "sourceColumn": "ISO Weeknumber",
            "summarizeBy": "sum"
          },
          {
            "name": "ISO Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "5b0a3585-0d3c-4b3c-a026-7dd41e7e7d1e",
            "sourceColumn": "ISO Year",
            "summarizeBy": "sum"
          },
          {
            "name": "Start of Week",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "01552ad6-1d6c-446c-b4f6-c4be667733ba",
            "sourceColumn": "Start of Week",
            "summarizeBy": "none"
          },
          {
            "name": "Quarter Number",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "ff269532-e981-4ef3-a7b8-9768f5b0d0e6",
            "sourceColumn": "Quarter Number",
            "summarizeBy": "sum"
          },
          {
            "name": "Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "0d1b72dc-7134-4d36-9215-8b45c06da5f5",
            "sourceColumn": "Quarter",
            "summarizeBy": "none"
          },
          {
            "name": "Year-Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "af15e71e-c366-488f-a5fc-b021a863330e",
            "sourceColumn": "Year-Quarter",
            "summarizeBy": "none"
          },
          {
            "name": "Day Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "da644fce-0adf-4674-b9c5-80f759275141",
            "sourceColumn": "Day Name",
            "summarizeBy": "none"
          },
          {
            "name": "Day Name Short",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "1aadde01-b68b-4ae1-9a5c-684606b2fcf7",
            "sourceColumn": "Day Name Short",
            "summarizeBy": "none"
          },
          {
            "name": "Day of Month Number",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "5f3314d3-2950-4c19-bc3b-db0c3dd98adc",
            "sourceColumn": "Day of Month Number",
            "summarizeBy": "sum"
          },
          {
            "name": "Day of Week Number",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "9452352c-c927-4cf7-8255-8e3323b56286",
            "sourceColumn": "Day of Week Number",
            "summarizeBy": "sum"
          },
          {
            "name": "Day of Year Number",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "bd896399-31a7-4612-924f-eb45575d824c",
            "sourceColumn": "Day of Year Number",
            "summarizeBy": "sum"
          },
          {
            "name": "Day Offset",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "558c113e-ad0e-454f-8346-001674e2ae78",
            "sourceColumn": "Day Offset",
            "summarizeBy": "sum"
          },
          {
            "name": "Week Offset",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "f1c297ad-7e3e-44a3-a5c9-e0bb739a3ed5",
            "sourceColumn": "Week Offset",
            "summarizeBy": "sum"
          },
          {
            "name": "Month Offset",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "955e6943-ff14-42fd-9340-77d46df0654e",
            "sourceColumn": "Month Offset",
            "summarizeBy": "sum"
          },
          {
            "name": "Quarter Offset",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "292ce778-7826-494c-9462-3783961d1ae1",
            "sourceColumn": "Quarter Offset",
            "summarizeBy": "sum"
          },
          {
            "name": "Year Offset",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "9af7bb94-46d4-4296-af2c-257198c26da6",
            "sourceColumn": "Year Offset",
            "summarizeBy": "sum"
          },
          {
            "name": "Is Weekend",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "c4a09287-067f-4da0-b225-e15d30cd2552",
            "sourceColumn": "Is Weekend",
            "summarizeBy": "sum"
          },
          {
            "name": "Is Weekday",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "853095fd-14ff-4b79-9b92-a369e6938770",
            "sourceColumn": "Is Weekday",
            "summarizeBy": "sum"
          }
        ],
        "lineageTag": "76390234-5c72-4008-8b9f-85bd12f918a3",
        "partitions": [
          {
            "name": "tbl_fnDateTableGenerator",
            "mode": "import",
            "queryGroup": "Oscar Valerock",
            "source": {
              "expression": [
                "let",
                "    Source = fnDateTableGenerator(2023, 2025)",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "fxDates",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Academic Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "41b52abe-77df-42ee-90bd-56b79368b3e9",
            "sourceColumn": "Academic Year",
            "summarizeBy": "none"
          },
          {
            "name": "Academic_Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c2749ca9-7c62-48dd-99cd-7d6fd92c5c57",
            "sourceColumn": "Academic_Year",
            "summarizeBy": "none"
          },
          {
            "name": "AY Selection",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "29459c0f-9040-478a-83aa-f483e388870f",
            "sourceColumn": "AY Selection",
            "summarizeBy": "none"
          },
          {
            "name": "Fiscal Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "8f566f0c-371d-4532-935e-e7e9d74426b5",
            "sourceColumn": "Fiscal Year",
            "summarizeBy": "none"
          },
          {
            "name": "Fiscal_Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "8bffb895-e131-4eda-99a4-1ef79098bce2",
            "sourceColumn": "Fiscal_Year",
            "summarizeBy": "none"
          },
          {
            "name": "FY Selection",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "01d2a064-e7b0-4acf-b42a-151857a8724b",
            "sourceColumn": "FY Selection",
            "summarizeBy": "none"
          },
          {
            "name": "Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "5b890bc3-8fd0-4634-9223-3817eee3687d",
            "sourceColumn": "Date",
            "summarizeBy": "none"
          },
          {
            "name": "IsYTD",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "04acbf80-bfce-42e7-ae03-38c147e6222a",
            "sourceColumn": "IsYTD",
            "summarizeBy": "none"
          },
          {
            "name": "IsFuture",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "ec182738-9825-4558-a82d-a6c96caaebac",
            "sourceColumn": "IsFuture",
            "summarizeBy": "none"
          },
          {
            "name": "YearNUM",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "c8da97da-b85c-43e5-9c76-5336c657fa06",
            "sourceColumn": "YearNUM",
            "summarizeBy": "sum"
          },
          {
            "name": "YearOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "4b249117-3f59-49c1-a6c3-b190c1a18d25",
            "sourceColumn": "YearOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "isYearComplete",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "dd959510-c0ba-40aa-be29-5e61941777b0",
            "sourceColumn": "isYearComplete",
            "summarizeBy": "none"
          },
          {
            "name": "QuarterNUM",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "6c3aa659-f289-46fe-b310-1b841095e149",
            "sourceColumn": "QuarterNUM",
            "summarizeBy": "sum"
          },
          {
            "name": "Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "972f4f6c-5b33-4a8b-9daf-801c9bf898e5",
            "sourceColumn": "Quarter",
            "summarizeBy": "none"
          },
          {
            "name": "Quarter Start",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "01f8f772-36e3-4f71-98d9-7acdbdfd4786",
            "sourceColumn": "Quarter Start",
            "summarizeBy": "none"
          },
          {
            "name": "Quarter End",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "7fdd4663-8a09-4034-8699-c29d1b6e2e44",
            "sourceColumn": "Quarter End",
            "summarizeBy": "none"
          },
          {
            "name": "Quarter & Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "9d89deb3-4a0c-4d13-a88f-736a3e747a97",
            "sourceColumn": "Quarter & Year",
            "summarizeBy": "none"
          },
          {
            "name": "QuarterYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "89092026-b2e7-4b07-8dd1-fee4e41fc917",
            "sourceColumn": "QuarterYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "QuarterOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "b9a4e772-83da-4099-b9aa-8ea95abbc440",
            "sourceColumn": "QuarterOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "isQuarterComplete",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "b4822718-da18-4cc8-96d2-9444dd62b394",
            "sourceColumn": "isQuarterComplete",
            "summarizeBy": "none"
          },
          {
            "name": "MonthNUM",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "f273bf6d-1015-4efe-874b-640bb3901e13",
            "sourceColumn": "MonthNUM",
            "summarizeBy": "sum"
          },
          {
            "name": "FiscalPeriodNUM",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "0c87575d-ff58-45fd-b391-b2c3c76b28f7",
            "sourceColumn": "FiscalPeriodNUM",
            "summarizeBy": "sum"
          },
          {
            "name": "Month Selection",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "5118320c-e2b2-4638-92ca-fe6206dff17c",
            "sourceColumn": "Month Selection",
            "summarizeBy": "none"
          },
          {
            "name": "Fiscal Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "72aa4ee1-cd96-4666-a628-46996bf04b72",
            "sourceColumn": "Fiscal Month",
            "summarizeBy": "none"
          },
          {
            "name": "AcademicPeriodNUM",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "a37197d2-aa7b-47c7-827a-4585d19e2707",
            "sourceColumn": "AcademicPeriodNUM",
            "summarizeBy": "sum"
          },
          {
            "name": "Academic Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ec360b60-7bab-4531-9c45-00097b95b68f",
            "sourceColumn": "Academic Month",
            "summarizeBy": "none"
          },
          {
            "name": "Month Start",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "2bc91254-84ee-4993-8593-0af6d5c8e0be",
            "sourceColumn": "Month Start",
            "summarizeBy": "none"
          },
          {
            "name": "Month End",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "c8045489-13a8-41cb-a614-5f5e414ece69",
            "sourceColumn": "Month End",
            "summarizeBy": "none"
          },
          {
            "name": "Month & Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a6523407-9d76-4dd5-b9c5-74523164e6d1",
            "sourceColumn": "Month & Year",
            "summarizeBy": "none"
          },
          {
            "name": "MonthYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "55a3e4fe-c74d-46a0-9fbe-97caf4294144",
            "sourceColumn": "MonthYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "MonthOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "63b38190-e6a3-4da0-82b9-cda9470cadf1",
            "sourceColumn": "MonthOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "isMonthComplete",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "a62a86d7-adac-4473-9ab4-9ce40875a556",
            "sourceColumn": "isMonthComplete",
            "summarizeBy": "none"
          },
          {
            "name": "Month Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "24126ebc-a5d5-4abf-ab9e-f64c87978b2c",
            "sourceColumn": "Month Name",
            "summarizeBy": "none"
          },
          {
            "name": "Month Short",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d49aa3fe-f741-4b8c-a552-be68c399da86",
            "sourceColumn": "Month Short",
            "summarizeBy": "none"
          },
          {
            "name": "Month Initial",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "7758413e-b2eb-405b-8210-4ba9598dbcd5",
            "sourceColumn": "Month Initial",
            "summarizeBy": "none"
          },
          {
            "name": "DayMonthNUM",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "23031019-a7f0-47d1-8fbf-387620f550ee",
            "sourceColumn": "DayMonthNUM",
            "summarizeBy": "sum"
          },
          {
            "name": "Week Number",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "96c9f2f8-5672-4f1d-96b4-157f335fbd6e",
            "sourceColumn": "Week Number",
            "summarizeBy": "sum"
          },
          {
            "name": "Week Start",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "6f80717a-8e8e-4e6c-a80c-278be55b8245",
            "sourceColumn": "Week Start",
            "summarizeBy": "none"
          },
          {
            "name": "Week End",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "625258ed-18dc-4dda-8440-3b2259e5c8b4",
            "sourceColumn": "Week End",
            "summarizeBy": "none"
          },
          {
            "name": "Week & Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "76b69c44-892a-4c63-b6ca-bf91dc166b39",
            "sourceColumn": "Week & Year",
            "summarizeBy": "none"
          },
          {
            "name": "WeekYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "e5602f78-427d-4b76-9d6b-64b3cfe71474",
            "sourceColumn": "WeekYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "WeekOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "214f8a64-3ca8-4683-b777-b2784ef80a47",
            "sourceColumn": "WeekOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "WeekCompleted",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "dab7f250-47af-4be5-acdf-a3dc3f10f9ed",
            "sourceColumn": "WeekCompleted",
            "summarizeBy": "none"
          },
          {
            "name": "DayWeekNUM",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "9cfb40dd-d3b6-4030-bbe3-963dd500003f",
            "sourceColumn": "DayWeekNUM",
            "summarizeBy": "sum"
          },
          {
            "name": "Day of Week Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a0830ccc-ef4c-48f1-b669-eac5c3f40764",
            "sourceColumn": "Day of Week Name",
            "summarizeBy": "none"
          },
          {
            "name": "Day Initial",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "8c6cbe57-8634-41cf-b721-b49d5468fb34",
            "sourceColumn": "Day Initial",
            "summarizeBy": "none"
          },
          {
            "name": "DateINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "f9adb936-b257-4c24-9e5e-4915371e8fb8",
            "sourceColumn": "DateINT",
            "summarizeBy": "sum"
          },
          {
            "name": "DayOffset",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "d743a45d-21a4-4965-ae8e-b83dab90e32d",
            "sourceColumn": "DayOffset",
            "summarizeBy": "sum"
          },
          {
            "name": "IsAfterToday",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "7d0c5742-251a-4da1-80e1-03941245ae78",
            "sourceColumn": "IsAfterToday",
            "summarizeBy": "none"
          },
          {
            "name": "IsWeekDay",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "65b5234e-3462-49ae-946a-16294f8ddf8c",
            "sourceColumn": "IsWeekDay",
            "summarizeBy": "none"
          },
          {
            "name": "IsHoliday",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "95b6d890-d6de-4fdb-8ac2-47081da16cd7",
            "sourceColumn": "IsHoliday",
            "summarizeBy": "none"
          },
          {
            "name": "IsBusinessDay",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "fd155690-27ce-4331-8ea0-88601688ce23",
            "sourceColumn": "IsBusinessDay",
            "summarizeBy": "none"
          },
          {
            "name": "Day Type",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "67199372-aab1-4535-933d-4d48e9923e04",
            "sourceColumn": "Day Type",
            "summarizeBy": "none"
          },
          {
            "name": "ISO Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "9de11e44-9274-4e00-bbe2-a0710cc8ee8c",
            "sourceColumn": "ISO Year",
            "summarizeBy": "sum"
          },
          {
            "name": "ISO YearOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "f0de1d70-fc89-4875-a8e3-0884d67dff17",
            "sourceColumn": "ISO YearOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "Academic Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "7e38cd87-4393-41cf-9d1e-1124397d912e",
            "sourceColumn": "Academic Quarter",
            "summarizeBy": "none"
          },
          {
            "name": "AcademicQuarterYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "69ef1412-07ee-489d-bb48-ea7236c69b8b",
            "sourceColumn": "AcademicQuarterYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "ISO Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "9ee800c1-69f7-408a-baed-b7c7481b5edd",
            "sourceColumn": "ISO Quarter",
            "summarizeBy": "none"
          },
          {
            "name": "ISO Quarter & Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e3437915-44f5-42c6-8a57-18a792fc0379",
            "sourceColumn": "ISO Quarter & Year",
            "summarizeBy": "none"
          },
          {
            "name": "ISO QuarterYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "2a1eae45-d949-485f-b2ff-332c14e2baa3",
            "sourceColumn": "ISO QuarterYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "Academic Period",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "1a538d29-30ea-41ae-9784-cfed61ca0122",
            "sourceColumn": "Academic Period",
            "summarizeBy": "none"
          },
          {
            "name": "ISO QuarterOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "717de52a-6289-403f-8f45-6e1318c6de1b",
            "sourceColumn": "ISO QuarterOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "AcademicPeriodYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "2e2be1ab-774e-4b9e-ae2a-d536a2ff6d14",
            "sourceColumn": "AcademicPeriodYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "AYStartDate",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "511326ea-e643-4636-af00-729072dac0aa",
            "sourceColumn": "AYStartDate",
            "summarizeBy": "none"
          },
          {
            "name": "AYEndDate",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "5da2cbab-002e-4bae-9486-d3e1c761eae2",
            "sourceColumn": "AYEndDate",
            "summarizeBy": "none"
          },
          {
            "name": "FYStartDate",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "65cda344-bd92-4b34-b53b-b667cbe3a816",
            "sourceColumn": "FYStartDate",
            "summarizeBy": "none"
          },
          {
            "name": "FYEndDate",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "69b56d60-1e22-4522-bf37-3977ed1f9de4",
            "sourceColumn": "FYEndDate",
            "summarizeBy": "none"
          },
          {
            "name": "FiscalYearOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "cc1a992d-a4bc-4dde-a776-7378ae3b9e5f",
            "sourceColumn": "FiscalYearOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "FiscalQuarterOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "0321f894-0f39-4600-995f-4f6da7ec6b5b",
            "sourceColumn": "FiscalQuarterOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "Fiscal Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a61d832a-70f2-44b2-81aa-a64b53db4b66",
            "sourceColumn": "Fiscal Quarter",
            "summarizeBy": "none"
          },
          {
            "name": "FiscalQuarterYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "ef4f627d-a58c-491e-8e61-788aeadae3a9",
            "sourceColumn": "FiscalQuarterYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "Fiscal Period",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "6996e190-c035-466d-9304-b3b9c6d5309a",
            "sourceColumn": "Fiscal Period",
            "summarizeBy": "none"
          },
          {
            "name": "FiscalPeriodYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "5fdede66-c24e-48c2-b3b9-cc2986076055",
            "sourceColumn": "FiscalPeriodYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "Fiscal Week Number",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "fe0270da-1f68-4799-8f10-e9aa08407646",
            "sourceColumn": "Fiscal Week Number",
            "summarizeBy": "sum"
          },
          {
            "name": "Fiscal Week",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "5fd6925e-ee8a-41d1-8f26-d74c02c7963c",
            "sourceColumn": "Fiscal Week",
            "summarizeBy": "none"
          },
          {
            "name": "AcademicYearOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "16a2e55f-c2fb-4167-bd1a-c42b23a9d22d",
            "sourceColumn": "AcademicYearOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "AcademicQuarterOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "d65f853f-1059-4678-aef1-342ee4b25664",
            "sourceColumn": "AcademicQuarterOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "IsCurrentFY",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "a55e31da-c4b1-47c3-a410-d3462ac483c8",
            "sourceColumn": "IsCurrentFY",
            "summarizeBy": "none"
          },
          {
            "name": "IsCurrentAY",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "8520b411-0985-4933-8e40-3049ef3cf6e4",
            "sourceColumn": "IsCurrentAY",
            "summarizeBy": "none"
          },
          {
            "name": "IsCurrentFQ",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "d8197370-66b8-4981-a76c-28dfa62811d0",
            "sourceColumn": "IsCurrentFQ",
            "summarizeBy": "none"
          },
          {
            "name": "IsCurrentAQ",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "42dfe8d0-cb8f-4478-a616-cf5a2f9a25a0",
            "sourceColumn": "IsCurrentAQ",
            "summarizeBy": "none"
          },
          {
            "name": "IsCurrentFP",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "0fff369b-b479-4edf-aa17-4d0776605d4a",
            "sourceColumn": "IsCurrentFP",
            "summarizeBy": "none"
          },
          {
            "name": "IsCurrentAP",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "ef7c5e2f-65d8-4c4f-962a-3133a32cacbe",
            "sourceColumn": "IsCurrentAP",
            "summarizeBy": "none"
          },
          {
            "name": "IsCurrentFW",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "256dbd72-5e9b-41cc-87bd-e5f38ca5ad08",
            "sourceColumn": "IsCurrentFW",
            "summarizeBy": "none"
          },
          {
            "name": "IsPreviousYTD",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "0277fbc0-c171-4052-b32d-945e6301541a",
            "sourceColumn": "IsPreviousYTD",
            "summarizeBy": "none"
          },
          {
            "name": "IsPreviousFY",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "188d1271-1ac1-4299-b335-44134472cc7a",
            "sourceColumn": "IsPreviousFY",
            "summarizeBy": "none"
          },
          {
            "name": "IsPreviousAY",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "a447cb15-1aab-49c8-83c3-bd4c7d3ad184",
            "sourceColumn": "IsPreviousAY",
            "summarizeBy": "none"
          },
          {
            "name": "Relative Networkdays",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "405f8d7f-c3e3-439b-b9bf-b2b5a3cda559",
            "sourceColumn": "Relative Networkdays",
            "summarizeBy": "sum"
          },
          {
            "name": "Fiscal Quarter Month Start",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "f1f7a38c-fea4-4aee-8fcf-4069c1e474fb",
            "sourceColumn": "Fiscal Quarter Month Start",
            "summarizeBy": "none"
          },
          {
            "name": "Fiscal Quarter Month End",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "3e54c43e-79d5-4346-9ac6-997ff0e1b859",
            "sourceColumn": "Fiscal Quarter Month End",
            "summarizeBy": "none"
          },
          {
            "name": "Academic Quarter Month Start",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "66783959-d0c7-4d05-88b1-76fced502c1c",
            "sourceColumn": "Academic Quarter Month Start",
            "summarizeBy": "none"
          },
          {
            "name": "Academic Quarter Month End",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "6c115365-51bb-4391-9a89-eeda464dc09b",
            "sourceColumn": "Academic Quarter Month End",
            "summarizeBy": "none"
          },
          {
            "name": "2W Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "4915fbd9-896f-404e-9e1a-958b10f87551",
            "sourceColumn": "2W Date",
            "summarizeBy": "none"
          },
          {
            "name": "2M Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "4c4705eb-2470-49f5-9981-14c3aa3dcfd9",
            "sourceColumn": "2M Date",
            "summarizeBy": "none"
          },
          {
            "name": "6M Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "26118b77-b066-4ff3-9584-854174087c26",
            "sourceColumn": "6M Date",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "0e3feff2-5e27-4bbf-b1fc-7eb2fe0d91f2",
        "partitions": [
          {
            "name": "fxDates",
            "mode": "import",
            "source": {
              "expression": [
                "let",
                "          // // //Parameters",
                "",
                "          StartDate = #date(2020, 1, 1), // - turn off in custom function",
                "          EndDate = #date(2024, 12, 31), // -turn off in custom function",
                "          FYStartMonthNum = 4,",
                "          AYStartMonthNum  = 8,",
                "          Holidays = {},",
                "          WDStartNum = 1,",
                "          AddRelativeNetWorkdays = true,",
                "",
                "        // //-- Date table code",
                "",
                "        //   StartDate = Date.From(\"01/01/\" & Text.From(StartYearNUM)),  // -- turn ON for CUSTOM FN",
                "        //   EndDate = Date.From(\"31/12/\" & Text.From(EndYearNUM)),  // -- turn ON for CUSTOM FN ",
                "                                                                             ",
                "          FYStartMonth = List.Select({1 .. 12}, each _ = FYStartMonthNum){0}? ?? 1, ",
                "          AYStartMonth = List.Select({1 .. 12}, each _ = AYStartMonthNum){0}? ?? 1, ",
                "          WDStart = List.Select({0 .. 1}, each _ = WDStartNum){0}? ?? 0, ",
                "          var_CurrentDate = Date.From(DateTime.FixedLocalNow()), ",
                "          var_DayCount = Duration.Days(Duration.From(EndDate - StartDate)) + 1, ",
                "          list_Dates = List.Dates(StartDate, var_DayCount, #duration(1, 0, 0, 0)), ",
                "          tx_AddToday = ",
                "            if EndDate < var_CurrentDate then",
                "              List.Combine({list_Dates, {var_CurrentDate}})",
                "            else",
                "              list_Dates, ",
                "          make_Table = Table.FromList(",
                "            tx_AddToday, ",
                "            Splitter.SplitByNothing(), ",
                "            type table [Date = Date.Type]",
                "          ), ",
                "          ",
                "          // start deriving columns here",
                "",
                "          // Year as integer",
                "          col_Year = Table.AddColumn(make_Table, \"YearNUM\", each Date.Year([Date]), type number),",
                "",
                "          // calendar Year Offset ",
                "          col_YearOFFSET = Table.AddColumn(",
                "            col_Year, ",
                "            \"YearOFFSET\", ",
                "            each Date.Year([Date]) - Date.Year(Date.From(var_CurrentDate)), ",
                "            type number",
                "          ), ",
                "",
                "          // is current calendar year complete as boolean",
                "          col_isYearComplete = Table.AddColumn(",
                "            col_YearOFFSET, ",
                "            \"isYearComplete\", ",
                "            each Date.EndOfYear([Date]) < Date.From(Date.EndOfYear(var_CurrentDate)), ",
                "            type logical",
                "          ),",
                "",
                "",
                "          // calendar quarter as integer ",
                "          col_QuarterNUM = Table.AddColumn(",
                "            col_isYearComplete, ",
                "            \"QuarterNUM\", ",
                "            each Date.QuarterOfYear([Date]), ",
                "            type number",
                "          ),",
                "",
                "          // calendar quart as text ",
                "          col_QuarterTXT = Table.AddColumn(",
                "            col_QuarterNUM, ",
                "            \"Quarter\", ",
                "            each \"Q\" & Number.ToText([QuarterNUM]), ",
                "            type text",
                "          ),",
                "",
                "          // start of calendar quarter as date ",
                "          col_QuarterSTART = Table.AddColumn(",
                "            col_QuarterTXT, ",
                "            \"Quarter Start\", ",
                "            each Date.StartOfQuarter([Date]), ",
                "            type date",
                "          ),",
                "",
                "          // end of calendar quarter as date ",
                "          col_QuarterEND = Table.AddColumn(",
                "            col_QuarterSTART, ",
                "            \"Quarter End\", ",
                "            each Date.EndOfQuarter([Date]), ",
                "            type date",
                "          ),",
                "",
                "          // calendar quarter & year as text (Q1 23) ",
                "          col_Quarter_Year = Table.AddColumn(",
                "            col_QuarterEND, ",
                "            \"Quarter & Year\", ",
                "            each \"Q\"",
                "              & Number.ToText(Date.QuarterOfYear([Date]))",
                "              & Date.ToText([Date], [Format = \" yy\"]), ",
                "            type text",
                "          ), ",
                "",
                "          // calendar quarter and year as integer key (202302)",
                "          col_QuarterYearINT = Table.AddColumn(",
                "            col_Quarter_Year, ",
                "            \"QuarterYearINT\", ",
                "            each [YearNUM] * 10 + [QuarterNUM], ",
                "            type number",
                "          ), ",
                "",
                "          // calendar quarter offset",
                "          col_QuarterOFFSET = Table.AddColumn(",
                "            col_QuarterYearINT, ",
                "            \"QuarterOFFSET\", ",
                "            each ((4 * Date.Year([Date])) + Date.QuarterOfYear([Date]))",
                "              - (",
                "                (4 * Date.Year(Date.From(var_CurrentDate)))",
                "                  + Date.QuarterOfYear(Date.From(var_CurrentDate))",
                "              ), ",
                "            type number",
                "          ), ",
                "",
                "          // is current quarter complete as boolean",
                "          col_isQuarterComplete = Table.AddColumn(",
                "            col_QuarterOFFSET, ",
                "            \"isQuarterComplete\", ",
                "            each ",
                "              let",
                "                qtrEnd        = Date.EndOfQuarter([Date]), ",
                "                currQtrEnd    = Date.From(Date.EndOfQuarter(var_CurrentDate)), ",
                "                isQtrComplete = qtrEnd < currQtrEnd",
                "              in",
                "                isQtrComplete, ",
                "            type logical",
                "          ), ",
                "",
                "          // calendar month num",
                "          col_MonthNUM = Table.AddColumn(",
                "            col_isQuarterComplete, ",
                "            \"MonthNUM\", ",
                "            each Date.Month([Date]), ",
                "            type number",
                "          ), ",
                "",
                "          // calendar month start date",
                "          col_MonthSTART = Table.AddColumn(",
                "            col_MonthNUM, ",
                "            \"Month Start\", ",
                "            each Date.StartOfMonth([Date]), ",
                "            type date",
                "          ), ",
                "",
                "          // calendar month end date",
                "          col_MonthEND = Table.AddColumn(",
                "            col_MonthSTART, ",
                "            \"Month End\", ",
                "            each Date.EndOfMonth([Date]), ",
                "            type date",
                "          ), ",
                "",
                "          // calendar month and year as text",
                "          col_CalendarMONTH = Table.AddColumn(",
                "            col_MonthEND, ",
                "            \"Month & Year\", ",
                "            each Text.Proper(Date.ToText([Date], [Format = \"MMM yy\"])), ",
                "            type text",
                "          ), ",
                "",
                "          // calendar month and year as integer key (20230001)",
                "          col_MonthYearINT = Table.AddColumn(",
                "            col_CalendarMONTH, ",
                "            \"MonthYearINT\", ",
                "            each [YearNUM] * 100 + [MonthNUM], ",
                "            type number",
                "          ), ",
                "",
                "          // calendar month offset",
                "          col_MonthOFFSET = Table.AddColumn(",
                "            col_MonthYearINT, ",
                "            \"MonthOFFSET\", ",
                "            each ((12 * Date.Year([Date])) + Date.Month([Date]))",
                "              - (",
                "                (12 * Date.Year(Date.From(var_CurrentDate)))",
                "                  + Date.Month(Date.From(var_CurrentDate))",
                "              ), ",
                "            type number",
                "          ), ",
                "",
                "          // is month complete as boolean",
                "          col_isMonthComplete = Table.AddColumn(",
                "            col_MonthOFFSET, ",
                "            \"isMonthComplete\", ",
                "            each Date.EndOfMonth([Date]) < Date.From(Date.EndOfMonth(var_CurrentDate)), ",
                "            type logical",
                "          ), ",
                "",
                "          // month long name",
                "          col_MonthNAME = Table.AddColumn(",
                "            col_isMonthComplete, ",
                "            \"Month Name\", ",
                "            each Text.Proper(Date.ToText([Date], \"MMMM\")), ",
                "            type text",
                "          ), ",
                "",
                "          // month short name",
                "          col_MonthNameSHORT = Table.AddColumn(",
                "            col_MonthNAME, ",
                "            \"Month Short\", ",
                "            each Text.Proper(Date.ToText([Date], \"MMM\")), ",
                "            type text",
                "          ), ",
                "",
                "          // month initial",
                "          col_MonthNameINITIAL = Table.AddColumn(",
                "            col_MonthNameSHORT, ",
                "            \"Month Initial\", ",
                "            each Text.Start([Month Name], 1)",
                "              & Text.Repeat(Character.FromNumber(8203), Date.Month([Date])), ",
                "            type text",
                "          ), ",
                "",
                "          // variable (current month name)",
                "          var_CurrentMonthName = Date.MonthName(DateTime.LocalNow()), ",
                "",
                "          // month selection (if month name = variable_crrentMonthName, then \"Current\" else [Month Short] )",
                "          col_MonthSelection = Table.AddColumn(",
                "            col_MonthNameINITIAL, ",
                "            \"Month Selection\", ",
                "            each if [Month Name] = var_CurrentMonthName then \"Current\" else [Month Short], ",
                "            type text",
                "          ), ",
                "",
                "          // fiscal month ( duplicate for report purposes - needs fiscal month sort order)",
                "          col_FiscalMonth = Table.DuplicateColumn(col_MonthSelection, \"Month Short\", \"Fiscal Month\", type text),",
                "",
                "          // academic month ( duplicate for report purposes - needs academic month sort order)",
                "          col_AcademicMonth = Table.DuplicateColumn(col_FiscalMonth, \"Month Short\", \"Academic Month\", type text),",
                "          ",
                "          // add day month number",
                "          col_DayMonthNUM = Table.AddColumn(",
                "            col_AcademicMonth, ",
                "            \"DayMonthNUM\", ",
                "            each Date.Day([Date]), ",
                "            type number",
                "          ), ",
                "",
                "          // calendar week number",
                "          col_WeekNUM = Table.AddColumn(",
                "            col_DayMonthNUM, ",
                "            \"Week Number\", ",
                "            each ",
                "              if Number.RoundDown(",
                "                (Date.DayOfYear([Date]) - (Date.DayOfWeek([Date], Day.Monday) + 1) + 10) / 7",
                "              )",
                "                = 0",
                "              then",
                "                Number.RoundDown(",
                "                  (",
                "                    Date.DayOfYear(#date(Date.Year([Date]) - 1, 12, 31))",
                "                      - (Date.DayOfWeek(#date(Date.Year([Date]) - 1, 12, 31), Day.Monday) + 1)",
                "                      + 10",
                "                  )",
                "                    / 7",
                "                )",
                "              else if (",
                "                Number.RoundDown(",
                "                  (Date.DayOfYear([Date]) - (Date.DayOfWeek([Date], Day.Monday) + 1) + 10) / 7",
                "                )",
                "                  = 53 and (Date.DayOfWeek(#date(Date.Year([Date]), 12, 31), Day.Monday) + 1 < 4)",
                "              )",
                "              then",
                "                1",
                "              else",
                "                Number.RoundDown(",
                "                  (Date.DayOfYear([Date]) - (Date.DayOfWeek([Date], Day.Monday) + 1) + 10) / 7",
                "                ), ",
                "            type number",
                "          ), ",
                "",
                "          // calendar week start date",
                "          col_WeekSTART = Table.AddColumn(",
                "            col_WeekNUM, ",
                "            \"Week Start\", ",
                "            each Date.StartOfWeek([Date], Day.Monday), ",
                "            type date",
                "          ), ",
                "",
                "          // calendar week end date",
                "          col_WeekEND = Table.AddColumn(",
                "            col_WeekSTART, ",
                "            \"Week End\", ",
                "            each Date.EndOfWeek([Date], Day.Monday), ",
                "            type date",
                "          ), ",
                "",
                "          // week and year as text",
                "          col_CalendarWEEK = Table.AddColumn(",
                "            col_WeekEND, ",
                "            \"Week & Year\", ",
                "            each \"W\"",
                "              & Text.PadStart(Text.From([Week Number]), 2, \"0\")",
                "              & \" \"",
                "              & Text.End(",
                "                Text.From(Date.Year(Date.AddDays(Date.StartOfWeek([Date], Day.Monday), 3))), ",
                "                2",
                "              ), ",
                "            type text",
                "          ), ",
                "",
                "          // week year integer",
                "          col_WeekYearINT = Table.AddColumn(",
                "            col_CalendarWEEK, ",
                "            \"WeekYearINT\", ",
                "            each Date.Year(Date.AddDays(Date.StartOfWeek([Date], Day.Monday), 3))",
                "              * 100 + [Week Number], ",
                "            Int64.Type",
                "          ), ",
                "          col_WeekOFFSET = Table.AddColumn(",
                "            col_WeekYearINT, ",
                "            \"WeekOFFSET\", ",
                "            each (",
                "              Number.From(Date.StartOfWeek([Date], Day.Monday))",
                "                - Number.From(Date.StartOfWeek(var_CurrentDate, Day.Monday))",
                "            )",
                "              / 7, ",
                "            type number",
                "          ), ",
                "          col_isWeekComplete = Table.AddColumn(",
                "            col_WeekOFFSET, ",
                "            \"WeekCompleted\", ",
                "            each Date.EndOfWeek([Date], Day.Monday)",
                "              < Date.From(Date.EndOfWeek(var_CurrentDate, Day.Monday)), ",
                "            type logical",
                "          ), ",
                "          col_DayWeekNUM = Table.AddColumn(",
                "            col_isWeekComplete, ",
                "            \"DayWeekNUM\", ",
                "            each Date.DayOfWeek([Date], Day.Monday) + WDStart, ",
                "            Int64.Type",
                "          ), ",
                "          col_DayNAME = Table.AddColumn(",
                "            col_DayWeekNUM, ",
                "            \"Day of Week Name\", ",
                "            each Text.Proper(Date.ToText([Date], \"dddd\")), ",
                "            type text",
                "          ), ",
                "          col_DayINITIAL = Table.AddColumn(",
                "            col_DayNAME, ",
                "            \"Day Initial\", ",
                "            each Text.Proper(Text.Start([Day of Week Name], 1))",
                "              & Text.Repeat(",
                "                Character.FromNumber(8203), ",
                "                Date.DayOfWeek([Date], Day.Monday) + WDStart",
                "              ), ",
                "            type text",
                "          ), ",
                "          col_DayYearNUM = Table.AddColumn(",
                "            col_DayINITIAL, ",
                "            \"DayYearNUM\", ",
                "            each Date.DayOfYear([Date]), ",
                "            Int64.Type",
                "          ), ",
                "          col_DayMonthYearINT = Table.AddColumn(",
                "            col_DayYearNUM, ",
                "            \"DateINT\", ",
                "            each [YearNUM] * 10000 + [MonthNUM] * 100 + [DayMonthNUM], ",
                "            type number",
                "          ), ",
                "          col_DayOFFSET = Table.AddColumn(",
                "            col_DayMonthYearINT, ",
                "            \"DayOffset\", ",
                "            each Number.From([Date]) - Number.From(var_CurrentDate), ",
                "            type number",
                "          ), ",
                "          col_isYTD = Table.AddColumn(",
                "            col_DayOFFSET, ",
                "            \"IsYTD\", ",
                "            each ([Date] <= Date.From(var_CurrentDate)), ",
                "            type logical",
                "          ), ",
                "          col_isFuture = Table.AddColumn(",
                "            col_isYTD, ",
                "            \"IsFuture\", ",
                "            each not ([Date] <= Date.From(var_CurrentDate)), ",
                "            type logical",
                "          ), ",
                "          col_isAfterToday = Table.AddColumn(",
                "            col_isFuture, ",
                "            \"IsAfterToday\", ",
                "            each not ([Date] <= Date.From(var_CurrentDate)), ",
                "            type logical",
                "          ), ",
                "          col_isWeekDay = Table.AddColumn(",
                "            col_isAfterToday, ",
                "            \"IsWeekDay\", ",
                "            each if Date.DayOfWeek([Date], Day.Monday) > 4 then false else true, ",
                "            type logical",
                "          ), ",
                "          col_isHoliday = Table.AddColumn(",
                "            col_isWeekDay, ",
                "            \"IsHoliday\", ",
                "            each if Holidays = null then \"Unknown\" else List.Contains(Holidays, [Date]), ",
                "            if Holidays = null then type text else type logical",
                "          ), ",
                "          col_isBusinessDay = Table.AddColumn(",
                "            col_isHoliday, ",
                "            \"IsBusinessDay\", ",
                "            each if [IsWeekDay] = true and [IsHoliday] <> true then true else false, ",
                "            type logical",
                "          ), ",
                "          col_DayTYPE = Table.AddColumn(",
                "            col_isBusinessDay, ",
                "            \"Day Type\", ",
                "            each ",
                "              if [IsHoliday] = true then",
                "                \"Holiday\"",
                "              else if [IsWeekDay] = false then",
                "                \"Weekend\"",
                "              else if [IsWeekDay] = true then",
                "                \"Weekday\"",
                "              else",
                "                null, ",
                "            type text",
                "          ), ",
                "          col_ISOYear = Table.AddColumn(",
                "            col_DayTYPE, ",
                "            \"ISO Year\", ",
                "            each Date.Year(Date.AddDays(Date.StartOfWeek([Date], Day.Monday), 3)), ",
                "            type number",
                "          ), ",
                "          col_ISOQuarterNUM = Table.AddColumn(",
                "            col_ISOYear, ",
                "            \"ISO QuarterNUM\", ",
                "            each ",
                "              if [Week Number] > 39 then",
                "                4",
                "              else if [Week Number] > 26 then",
                "                3",
                "              else if [Week Number] > 13 then",
                "                2",
                "              else",
                "                1, ",
                "            Int64.Type",
                "          ), ",
                "          col_ISOQuarterNAME = Table.AddColumn(",
                "            col_ISOQuarterNUM, ",
                "            \"ISO Quarter\", ",
                "            each \"Q\" & Number.ToText([ISO QuarterNUM]), ",
                "            type text",
                "          ), ",
                "          col_ISOQuarterYearNAME = Table.AddColumn(",
                "            col_ISOQuarterNAME, ",
                "            \"ISO Quarter & Year\", ",
                "            each \"Q\" & Number.ToText([ISO QuarterNUM]) & \" \" & Number.ToText([ISO Year]), ",
                "            type text",
                "          ), ",
                "          col_ISOQuarterYearINT = Table.AddColumn(",
                "            col_ISOQuarterYearNAME, ",
                "            \"ISO QuarterYearINT\", ",
                "            each [ISO Year] * 10 + [ISO QuarterNUM], ",
                "            type number",
                "          ), ",
                "          // BufferTable = Table.Buffer(Table.Distinct( col_ISOQuarterYearINT[[ISO Year], [DateInt]])),",
                "          // InsertISOday = Table.AddColumn(col_ISOQuarterYearINT, \"ISO Day of Year\", (OT) => Table.RowCount( Table.SelectRows( BufferTable, (IT) => IT[DateInt] <= OT[DateInt] and IT[ISO Year] = OT[ISO Year])),  Int64.Type),",
                "          col_FY = Table.AddColumn(",
                "            col_ISOQuarterYearINT, ",
                "            \"Fiscal Year\", ",
                "            each ",
                "              let",
                "                arg1     = ([MonthNUM] >= FYStartMonth and FYStartMonth > 1), ",
                "                yearNum1 = Text.End(Text.From([YearNUM] + 0), 2), ",
                "                yearNum0 = Text.End(Text.From([YearNUM] - 1), 2), ",
                "                result1  = if arg1 then yearNum1 else yearNum0",
                "              in",
                "                \"FY\" & result1, ",
                "            type text",
                "          ),",
                "          col_FY1 = Table.AddColumn(",
                "            col_FY, ",
                "            \"Fiscal_Year\", ",
                "            each ",
                "              let",
                "                ",
                "                yearNum1 = Number.From(Text.End([Fiscal Year], 2)), ",
                "                 ",
                "                result1  = Text.From(yearNum1) & \"/\" & Text.From(yearNum1+1)",
                "              in",
                "                result1, ",
                "            type text",
                "          ), ",
                "          col_AY = Table.AddColumn(",
                "            col_FY1, ",
                "            \"Academic Year\", ",
                "            each ",
                "              let",
                "                arg1     = ([MonthNUM] >= AYStartMonth and AYStartMonth > 1), ",
                "                yearNum1 = Text.End(Text.From([YearNUM] + 0), 2), ",
                "                yearNum0 = Text.End(Text.From([YearNUM] - 1), 2), ",
                "                result1  = if arg1 then yearNum1 else yearNum0",
                "              in",
                "                \"AY\" & result1, ",
                "            type text",
                "          ),",
                "          col_AY1 = Table.AddColumn(",
                "            col_AY, ",
                "            \"Academic_Year\", ",
                "            each ",
                "              let",
                "                ",
                "                yearNum1 = Number.From(Text.End([Academic Year], 2)), ",
                "                 ",
                "                result1  = Text.From(yearNum1) & \"/\" & Text.From(yearNum1+1)",
                "              in",
                "                result1, ",
                "            type text",
                "          ),  ",
                "          //col_FYs = Table.AddColumn(col_FY, \"Fiscal Year short\", each \"FY\" & (if [MonthNUM] >= FYStartMonth and FYStartMonth >1 then Text.PadEnd( Text.End( Text.From([YearNUM] +1), 2), 2, \"0\") else Text.End( Text.From([YearNUM]), 2)), type text),",
                "          col_FQ = Table.AddColumn(",
                "            col_AY1, ",
                "            \"Fiscal Quarter\", ",
                "            each \"FQ\"",
                "              & Text.From(",
                "                Number.RoundUp(Date.Month(Date.AddMonths([Date], - (FYStartMonth - 1))) / 3)",
                "              )",
                "              & \" \"",
                "              & (",
                "                if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then",
                "                  Text.End(Text.From([YearNUM] + 0), 2)",
                "                else",
                "                  Text.End(Text.From([YearNUM] - 1), 2)",
                "              ), ",
                "            type text",
                "          ), ",
                "          col_AQ = Table.AddColumn(",
                "            col_FQ, ",
                "            \"Academic Quarter\", ",
                "            each \"AQ\"",
                "              & Text.From(",
                "                Number.RoundUp(Date.Month(Date.AddMonths([Date], - (AYStartMonth - 1))) / 3)",
                "              )",
                "              & \" \"",
                "              & (",
                "                if [MonthNUM] >= AYStartMonth and AYStartMonth > 1 then",
                "                  Text.End(Text.From([YearNUM] + 0), 2)",
                "                else",
                "                  Text.End(Text.From([YearNUM] - 1), 2)",
                "              ), ",
                "            type text",
                "          ), ",
                "          col_FQtrYrINT = Table.AddColumn(",
                "            col_AQ, ",
                "            \"FiscalQuarterYearINT\", ",
                "            each (",
                "              if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then",
                "                [YearNUM] + 0",
                "              else",
                "                [YearNUM] - 1",
                "            )",
                "              * 10 + Number.RoundUp(Date.Month(Date.AddMonths([Date], - (FYStartMonth - 1))) / 3), ",
                "            type number",
                "          ), ",
                "          col_AQtrYrINT = Table.AddColumn(",
                "            col_FQtrYrINT, ",
                "            \"AcademicQuarterYearINT\", ",
                "            each (",
                "              if [MonthNUM] >= AYStartMonth and AYStartMonth > 1 then",
                "                [YearNUM] + 0",
                "              else",
                "                [YearNUM] - 1",
                "            )",
                "              * 10 + Number.RoundUp(Date.Month(Date.AddMonths([Date], - (AYStartMonth - 1))) / 3), ",
                "            type number",
                "          ), ",
                "          col_FPNUM = Table.AddColumn(",
                "            col_AQtrYrINT, ",
                "            \"FiscalPeriodNUM\", ",
                "            each ",
                "              let",
                "                arg1   = [MonthNUM] >= FYStartMonth and FYStartMonth > 1, ",
                "                res1   = [MonthNUM] - (FYStartMonth - 1), ",
                "                arg2   = [MonthNUM] >= FYStartMonth and FYStartMonth = 1, ",
                "                res2   = [MonthNUM], ",
                "                res3   = [MonthNUM] + (12 - FYStartMonth + 1), ",
                "                result = if arg1 then res1 else if arg2 then res2 else res3",
                "              in",
                "                result, ",
                "            type number",
                "          ), ",
                "          col_APNUM = Table.AddColumn(",
                "            col_FPNUM, ",
                "            \"AcademicPeriodNUM\", ",
                "            each ",
                "              let",
                "                arg1   = [MonthNUM] >= AYStartMonth and AYStartMonth > 1, ",
                "                res1   = [MonthNUM] - (AYStartMonth - 1), ",
                "                arg2   = [MonthNUM] >= AYStartMonth and AYStartMonth = 1, ",
                "                res2   = [MonthNUM], ",
                "                res3   = [MonthNUM] + (12 - AYStartMonth + 1), ",
                "                result = if arg1 then res1 else if arg2 then res2 else res3",
                "              in",
                "                result, ",
                "            type number",
                "          ), ",
                "          col_FYPeriod = Table.AddColumn(",
                "            col_APNUM, ",
                "            \"Fiscal Period\", ",
                "            each \"FP\"",
                "              & Text.PadStart(Text.From([FiscalPeriodNUM]), 2, \"0\")",
                "              & \" \"",
                "              & (",
                "                if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then",
                "                  Text.End(Text.From([YearNUM] + 0), 2)",
                "                else",
                "                  Text.End(Text.From([YearNUM] - 1), 2)",
                "              ), ",
                "            type text",
                "          ), ",
                "          col_AYPeriod = Table.AddColumn(",
                "            col_FYPeriod, ",
                "            \"Academic Period\", ",
                "            each \"AP\"",
                "              & Text.PadStart(Text.From([AcademicPeriodNUM]), 2, \"0\")",
                "              & \" \"",
                "              & (",
                "                if [MonthNUM] >= AYStartMonth and AYStartMonth > 1 then",
                "                  Text.End(Text.From([YearNUM] + 0), 2)",
                "                else",
                "                  Text.End(Text.From([YearNUM] - 1), 2)",
                "              ), ",
                "            type text",
                "          ), ",
                "          col_FPYrINT = Table.AddColumn(",
                "            col_AYPeriod, ",
                "            \"FiscalPeriodYearINT\", ",
                "            each (",
                "              if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then",
                "                [YearNUM] + 0",
                "              else",
                "                [YearNUM] - 1",
                "            )",
                "              * 100 + [FiscalPeriodNUM], ",
                "            type number",
                "          ), ",
                "          col_APYrINT = Table.AddColumn(",
                "            col_FPYrINT, ",
                "            \"AcademicPeriodYearINT\", ",
                "            each (",
                "              if [MonthNUM] >= AYStartMonth and AYStartMonth > 1 then",
                "                [YearNUM] + 0",
                "              else",
                "                [YearNUM] - 1",
                "            )",
                "              * 100 + [AcademicPeriodNUM], ",
                "            type number",
                "          ), ",
                "          var_FiscalCalendarSTART = #date(Date.Year(StartDate) - 1, FYStartMonth, 1), ",
                "          var_AcademicCalendarSTART = #date(Date.Year(StartDate) - 1, AYStartMonth, 1), ",
                "          col_FiscalFirstDay = Table.AddColumn(",
                "            col_APYrINT, ",
                "            \"FiscalFirstDate\", ",
                "            each ",
                "              if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then",
                "                #date(Date.Year([Date]) + 0, FYStartMonth, 1)",
                "              else",
                "                #date(Date.Year([Date]) - 1, FYStartMonth, 1), ",
                "            type date",
                "          ), ",
                "          col_AYStartDate = Table.AddColumn(",
                "            col_FiscalFirstDay, ",
                "            \"AYStartDate\", ",
                "            each ",
                "              if [MonthNUM] >= AYStartMonth and AYStartMonth > 1 then",
                "                #date(Date.Year([Date]) + 0, AYStartMonth, 1)",
                "              else",
                "                #date(Date.Year([Date]) - 1, AYStartMonth, 1), ",
                "            type date",
                "          ), ",
                "          col_AYEndDate = Table.AddColumn(",
                "            col_AYStartDate, ",
                "            \"AYEndDate\", ",
                "            each ",
                "              if [MonthNUM] >= AYStartMonth and AYStartMonth > 1 then",
                "                Date.AddDays(#date(Date.Year([Date]) + 1, AYStartMonth, 1),-1)",
                "              else",
                "                Date.AddDays(#date(Date.Year([Date]) - 0, AYStartMonth, 1),-1), ",
                "            type date",
                "          ), ",
                "          col_FYStartDate = Table.AddColumn(",
                "            col_AYEndDate, ",
                "            \"FYStartDate\", ",
                "            each ",
                "              if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then",
                "                #date(Date.Year([Date]) + 0, FYStartMonth, 1)",
                "              else",
                "                #date(Date.Year([Date]) - 1, FYStartMonth, 1), ",
                "            type date",
                "          ), ",
                "          col_FYEndDate = Table.AddColumn(",
                "            col_FYStartDate, ",
                "            \"FYEndDate\", ",
                "            each ",
                "              if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then",
                "                Date.AddDays(#date(Date.Year([Date]) + 1, FYStartMonth, 1),-1)",
                "              else",
                "                Date.AddDays(#date(Date.Year([Date]) - 0, FYStartMonth, 1),-1), ",
                "            type date",
                "          ),",
                "          //------------------------------------------\\\\ ",
                "          //----- begin sub-ETL stages and return later ----\\\\",
                "          var_Table = Table.FromList(",
                "            List.Transform(",
                "              {Number.From(var_AcademicCalendarSTART) .. Number.From(EndDate)}, ",
                "              Date.From",
                "            ), ",
                "            Splitter.SplitByNothing(), ",
                "            type table [DateFW = Date.Type]",
                "          ), ",
                "          col_FFD = Table.AddColumn(",
                "            var_Table, ",
                "            \"FiscalFirstDay\", ",
                "            each ",
                "              if Date.Month([DateFW]) < FYStartMonth then",
                "                #date(Date.Year([DateFW]) - 1, FYStartMonth, 1)",
                "              else",
                "                #date(Date.Year([DateFW]) + 0, FYStartMonth, 1)",
                "          ), ",
                "          col_FWSD = Table.AddColumn(",
                "            col_FFD, ",
                "            \"FWStartDate\", ",
                "            each Date.AddYears(Date.StartOfWeek([DateFW], Day.Monday), 0)",
                "          ), ",
                "          tbl_Group1 = Table.Group(",
                "            col_FWSD, ",
                "            {\"FiscalFirstDay\", \"FWStartDate\"}, ",
                "            {",
                "              {",
                "                \"AllRows\", ",
                "                each _, ",
                "                type table [DateFW = nullable date, FiscalFirstDay = date, FWStartDate = date]",
                "              }",
                "            }",
                "          ), ",
                "          tbl_Group2 = Table.Group(",
                "            tbl_Group1, ",
                "            {\"FiscalFirstDay\"}, ",
                "            {",
                "              {",
                "                \"AllRows2\", ",
                "                each _, ",
                "                type table [FiscalFirstDay = date, FWStartDate = date, AllRows = table]",
                "              }",
                "            }",
                "          ), ",
                "          col_Index = Table.AddColumn(",
                "            tbl_Group2, ",
                "            \"Custom\", ",
                "            each Table.AddIndexColumn([AllRows2], \"Fiscal Week Number\", 1, 1)",
                "          )[[Custom]], ",
                "          cols_Expand1 = Table.ExpandTableColumn(",
                "            col_Index, ",
                "            \"Custom\", ",
                "            {\"FiscalFirstDay\", \"FWStartDate\", \"AllRows\", \"Fiscal Week Number\"}, ",
                "            {\"FiscalFirstDay\", \"FWStartDate\", \"AllRows\", \"Fiscal Week Number\"}",
                "          ), ",
                "          cols_Expand2 = Table.ExpandTableColumn(cols_Expand1, \"AllRows\", {\"DateFW\"}, {\"DateFW\"})[",
                "            [DateFW], ",
                "            [Fiscal Week Number]",
                "          ], ",
                "          //------ return here to begin ETL steps again",
                "          join_Date_DateFW = Table.Join(",
                "            col_FYEndDate, ",
                "            {\"Date\"}, ",
                "            cols_Expand2, ",
                "            {\"DateFW\"}, ",
                "            JoinKind.LeftOuter, ",
                "            JoinAlgorithm.SortMerge",
                "          ), ",
                "          var_FYLogicTest = List.Contains({null}, FYStartMonthNum), ",
                "          var_AYLogicTest = List.Contains({null}, AYStartMonthNum), ",
                "          var_FYAYTest = var_FYLogicTest = true and var_AYLogicTest = true, ",
                "          txt_Replace = ",
                "            if var_AYLogicTest then",
                "              Table.ReplaceValue(",
                "                join_Date_DateFW, ",
                "                each [Fiscal Week Number], ",
                "                each if FYStartMonth = 1 then [Week Number] else [Fiscal Week Number], ",
                "                Replacer.ReplaceValue, ",
                "                {\"Fiscal Week Number\"}",
                "              )",
                "            else",
                "              join_Date_DateFW, ",
                "          col_FYW = Table.AddColumn(",
                "            txt_Replace, ",
                "            \"Fiscal Week\", ",
                "            each ",
                "              if var_AYLogicTest then",
                "                \"F\" & [#\"Week & Year\"]",
                "              else if FYStartMonth = 1 then",
                "                \"FW\"",
                "                  & Text.PadStart(Text.From([Fiscal Week Number]), 2, \"0\")",
                "                  & Date.ToText(Date.AddYears([Date], 0), \" yy\")",
                "              else if Date.Month([Date]) < FYStartMonth then",
                "                \"FW\"",
                "                  & Text.PadStart(Text.From([Fiscal Week Number]), 2, \"0\")",
                "                  & Date.ToText(Date.AddYears([Date], - 1), \" yy\")",
                "              else",
                "                \"FW\"",
                "                  & Text.PadStart(Text.From([Fiscal Week Number]), 2, \"0\")",
                "                  & \" \"",
                "                  & Text.End(Text.From(Date.Year([Date]) + 0), 2), ",
                "            type text",
                "          ), ",
                "          col_FWYearINT = Table.AddColumn(",
                "            col_FYW, ",
                "            \"FiscalWeekYearINT\", ",
                "            each ",
                "              if var_FYLogicTest then",
                "                [WeeknYear]",
                "              else",
                "                (",
                "                  if FYStartMonth = 1 then",
                "                    Date.Year([Date])",
                "                  else if Date.Month([Date]) < FYStartMonth then",
                "                    Date.Year([Date]) - 1",
                "                  else",
                "                    Date.Year([Date]) + 0",
                "                )",
                "                  * 100 + [Fiscal Week Number], ",
                "            Int64.Type",
                "          ), ",
                "          rec_CurrentDate = Table.SelectRows(col_FWYearINT, each ([Date] = var_CurrentDate)), ",
                "          var_CurrISOYear = rec_CurrentDate{0}[ISO Year], ",
                "          var_CurrISOQtr = rec_CurrentDate{0}[ISO QuarterNUM], ",
                "          var_CurrYear = rec_CurrentDate{0}[YearNUM], ",
                "          var_CurrMonth = rec_CurrentDate{0}[MonthNUM], ",
                "          var_FFD = rec_CurrentDate{0}[FiscalFirstDate], ",
                "          var_AFD = rec_CurrentDate{0}[AYStartDate], ",
                "          var_PFFD = Date.AddYears(var_FFD, - 1), ",
                "          var_PAFD = Date.AddYears(var_AFD, - 1), ",
                "          var_CurrFY = rec_CurrentDate{0}[Fiscal Year], ",
                "          var_CurrAY = rec_CurrentDate{0}[Academic Year], ",
                "          var_CurrFQ = rec_CurrentDate{0}[FiscalQuarterYearINT], ",
                "          var_CurrAQ = rec_CurrentDate{0}[AcademicQuarterYearINT], ",
                "          var_CurrFP = rec_CurrentDate{0}[FiscalPeriodYearINT], ",
                "          var_CurrAP = rec_CurrentDate{0}[AcademicPeriodYearINT], ",
                "          var_CurrFW = rec_CurrentDate{0}[FiscalWeekYearINT], ",
                "          col_ISOYearOFFSET = Table.AddColumn(",
                "            col_FWYearINT, ",
                "            \"ISO YearOFFSET\", ",
                "            each [ISO Year] - var_CurrISOYear, ",
                "            type number",
                "          ), ",
                "          col_ISOQuarterOFFSET = Table.AddColumn(",
                "            col_ISOYearOFFSET, ",
                "            \"ISO QuarterOFFSET\", ",
                "            each ((4 * [ISO Year]) + [ISO QuarterNUM]) - ((4 * var_CurrISOYear) + var_CurrISOQtr), ",
                "            type number",
                "          ), ",
                "          col_FiscalYearOFFSET = Table.AddColumn(",
                "            col_ISOQuarterOFFSET, ",
                "            \"FiscalYearOFFSET\", ",
                "            each try",
                "              (if [MonthNUM] >= FYStartMonth then [YearNUM] + 1 else [YearNUM])",
                "                - (if var_CurrMonth >= FYStartMonth then var_CurrYear + 1 else var_CurrYear)",
                "            otherwise",
                "              null, ",
                "            type number",
                "          ), ",
                "          col_AcademicYearOFFSET = Table.AddColumn(",
                "            col_FiscalYearOFFSET, ",
                "            \"AcademicYearOFFSET\", ",
                "            each try",
                "              (if [MonthNUM] >= AYStartMonth then [YearNUM] + 1 else [YearNUM])",
                "                - (if var_CurrMonth >= AYStartMonth then var_CurrYear + 1 else var_CurrYear)",
                "            otherwise",
                "              null, ",
                "            type number",
                "          ), ",
                "          col_AYSelection = Table.AddColumn(",
                "            col_AcademicYearOFFSET, ",
                "            \"AY Selection\", ",
                "            each if [AcademicYearOFFSET] = 0 then \"Current AY\" else [Academic_Year], ",
                "            type text",
                "          ),",
                "          col_FYSelection = Table.AddColumn(",
                "            col_AYSelection, ",
                "            \"FY Selection\", ",
                "            each if [FiscalYearOFFSET] = 0 then \"Current FY\" else [Fiscal_Year], ",
                "            type text",
                "          ),",
                "",
                "          //-- enter function here",
                "          fn_GetAcQtrOFFSET = ",
                "            let",
                "              fxAddFiscalQuarterOFFSET = (Date as date, FiscalYearStartMonth as number) as number =>",
                "                let",
                "                  CurrentDate = Date.From(DateTime.LocalNow()), ",
                "                  n = ",
                "                    if List.Contains({1 .. 12}, FiscalYearStartMonth) and FiscalYearStartMonth > 1 then",
                "                      FiscalYearStartMonth - 1",
                "                    else",
                "                      0, ",
                "                  FiscalQuarterOFFSET = (",
                "                    (4 * Date.Year(Date.AddMonths(Date.StartOfMonth(Date), - n)))",
                "                      + Date.QuarterOfYear(Date.AddMonths(Date.StartOfMonth(Date), - n))",
                "                  )",
                "                    - (",
                "                      (4 * Date.Year(Date.AddMonths(Date.StartOfMonth(CurrentDate), - n)))",
                "                        + Date.QuarterOfYear(Date.AddMonths(Date.StartOfMonth(CurrentDate), - n))",
                "                    )",
                "                in",
                "                  FiscalQuarterOFFSET",
                "            in",
                "              fxAddFiscalQuarterOFFSET, ",
                "",
                "          //-- Restart table here",
                "          col_AYQtrOFFSET = Table.AddColumn(",
                "            col_FYSelection, ",
                "            \"AcademicQuarterOFFSET\", ",
                "            each fn_GetAcQtrOFFSET([Date], AYStartMonth), ",
                "            Int64.Type",
                "          ), ",
                "          col_FYQtrOFFSET = Table.AddColumn(",
                "            col_AYQtrOFFSET, ",
                "            \"FiscalQuarterOFFSET\", ",
                "            each fn_GetAcQtrOFFSET([Date], FYStartMonth), ",
                "            Int64.Type",
                "          ), ",
                "          col_isCurrFY = Table.AddColumn(",
                "            col_FYQtrOFFSET, ",
                "            \"IsCurrentFY\", ",
                "            each if [Fiscal Year] = var_CurrFY then true else false, ",
                "            type logical",
                "          ), ",
                "          col_isCurrAY = Table.AddColumn(",
                "            col_isCurrFY, ",
                "            \"IsCurrentAY\", ",
                "            each if [Academic Year] = var_CurrAY then true else false, ",
                "            type logical",
                "          ), ",
                "          col_isCurrFQ = Table.AddColumn(",
                "            col_isCurrAY, ",
                "            \"IsCurrentFQ\", ",
                "            each if [FiscalQuarterYearINT] = var_CurrFQ then true else false, ",
                "            type logical",
                "          ), ",
                "          col_isCurrAQ = Table.AddColumn(",
                "            col_isCurrFQ, ",
                "            \"IsCurrentAQ\", ",
                "            each if [AcademicQuarterYearINT] = var_CurrAQ then true else false, ",
                "            type logical",
                "          ), ",
                "          col_isCurrFP = Table.AddColumn(",
                "            col_isCurrAQ, ",
                "            \"IsCurrentFP\", ",
                "            each if [FiscalPeriodYearINT] = var_CurrFP then true else false, ",
                "            type logical",
                "          ), ",
                "          col_isCurrAP = Table.AddColumn(",
                "            col_isCurrFP, ",
                "            \"IsCurrentAP\", ",
                "            each if [AcademicPeriodYearINT] = var_CurrAP then true else false, ",
                "            type logical",
                "          ), ",
                "          col_isCurrFW = Table.AddColumn(",
                "            col_isCurrAP, ",
                "            \"IsCurrentFW\", ",
                "            each if [FiscalWeekYearINT] = var_CurrFW then true else false, ",
                "            type logical",
                "          ), ",
                "          col_isPrevYTD = Table.AddColumn(",
                "            col_isCurrFW, ",
                "            \"IsPreviousYTD\", ",
                "            each ",
                "              if var_CurrYear - 1 = [YearNUM] and [DayYearNUM] <= rec_CurrentDate{0}[DayYearNUM] then",
                "                true",
                "              else",
                "                false, ",
                "            type logical",
                "          ), ",
                "          list_PrevFiscalYearDates = List.Buffer(",
                "            Table.SelectRows(",
                "              Table.ExpandTableColumn(",
                "                Table.NestedJoin(",
                "                  Table.AddIndexColumn(",
                "                    Table.RenameColumns(",
                "                      Table.TransformColumnTypes(",
                "                        Table.FromList(",
                "                          List.Dates(",
                "                            var_PFFD, ",
                "                            Number.From(var_FFD - var_PFFD), ",
                "                            #duration(1, 0, 0, 0)",
                "                          ), ",
                "                          Splitter.SplitByNothing()",
                "                        ), ",
                "                        {{\"Column1\", type date}}",
                "                      ), ",
                "                      {{\"Column1\", \"DateFY\"}}",
                "                    ), ",
                "                    \"Index\", ",
                "                    1, ",
                "                    1",
                "                  ), ",
                "                  {\"Index\"}, ",
                "                  Table.AddIndexColumn(",
                "                    Table.RenameColumns(",
                "                      Table.TransformColumnTypes(",
                "                        Table.FromList(",
                "                          List.Dates(",
                "                            Date.AddYears(var_PFFD, + 0), ",
                "                            Number.From(var_PFFD - Date.AddYears(var_PFFD, - 1)), ",
                "                            #duration(1, 0, 0, 0)",
                "                          ), ",
                "                          Splitter.SplitByNothing()",
                "                        ), ",
                "                        {{\"Column1\", type date}}",
                "                      ), ",
                "                      {{\"Column1\", \"DateFY\"}}",
                "                    ), ",
                "                    \"Index\", ",
                "                    1, ",
                "                    1",
                "                  ), ",
                "                  {\"Index\"}, ",
                "                  \"Table\", ",
                "                  JoinKind.LeftOuter",
                "                ), ",
                "                \"Table\", ",
                "                {\"DateFY\"}, ",
                "                {\"PrevDateFY\"}",
                "              ), ",
                "              each [DateFY] <= var_CurrentDate",
                "            )[PrevDateFY]",
                "          ), ",
                "          col_isPrevFY = Table.AddColumn(",
                "            col_isPrevYTD, ",
                "            \"IsPreviousFY\", ",
                "            each ",
                "              if [FiscalYearOFFSET] = - 1 and List.Contains(list_PrevFiscalYearDates, [Date]) then",
                "                true",
                "              else",
                "                false, ",
                "            type logical",
                "          ), ",
                "          col_isPrevAY = Table.AddColumn(",
                "            col_isPrevFY, ",
                "            \"IsPreviousAY\", ",
                "            each if [AcademicYearOFFSET] = - 1 then true else false, ",
                "            type logical",
                "          ), ",
                "          ",
                "          col_NetWorkDays = ",
                "            if AddRelativeNetWorkdays = true then",
                "              Table.AddColumn(",
                "                col_isPrevAY, ",
                "                \"Relative Networkdays\", ",
                "                each fxNETWORKDAYS(StartDate, [Date], Holidays), ",
                "                type number",
                "              )",
                "            else",
                "              col_isPrevAY, ",
                "      extend_calendar = ",
                "      let",
                "",
                "date_periods = let",
                "tbl_weekly = Table.AddColumn( col_NetWorkDays, \"2W Date\", each if Number.Mod(Date.WeekOfYear([Date]), 2) = 1 then Date.EndOfWeek([Date], Day.Monday) else Date.EndOfWeek(Date.AddDays([Date], - 7), Day.Monday), type date ),",
                "tbl_fortnightly = Table.AddColumn(tbl_weekly, \"2M Date\", each Date.EndOfMonth(Date.AddMonths([Date], - (Number.Mod(Date.Month([Date]) - 1, 2)))), type date),",
                "tbl_quarterly = Table.AddColumn(tbl_fortnightly, \"3W Date\", each Date.EndOfMonth(Date.AddMonths([Date], - (Number.Mod(Date.Month([Date]) - 1, 3)))), type date),",
                "tbl_biannually = Table.AddColumn(tbl_fortnightly, \"6M Date\", each Date.EndOfMonth(Date.AddMonths([Date], - (Number.Mod(Date.Month([Date]) - 1, 6)))), type date),",
                "tbl_ouputs = tbl_biannually",
                "in tbl_ouputs,",
                "",
                "",
                "fiscal_academic_periods = let",
                "     FY_TBL = Table.RenameColumns( Table.Group(  Table.Distinct( Table.SelectColumns(date_periods,{\"Month Start\", \"Month End\", \"FiscalPeriodYearINT\", \"FiscalQuarterYearINT\"}) , {\"FiscalPeriodYearINT\"}) , {\"FiscalQuarterYearINT\"}, {{\"Fiscal Quarter Month Start\", each List.Min([Month Start]), type date}, {\"Fiscal Quarter Month End\", each List.Max([Month End]), type date}}) ,{{\"FiscalQuarterYearINT\", \"FiscalKey\"}}),",
                "     AY_TBL = Table.RenameColumns( Table.Group(  Table.Distinct( Table.SelectColumns(date_periods,{\"Month Start\", \"Month End\", \"AcademicPeriodYearINT\", \"AcademicQuarterYearINT\"}) , {\"AcademicPeriodYearINT\"}) , {\"AcademicQuarterYearINT\"}, {{\"Academic Quarter Month Start\", each List.Min([Month Start]), type date}, {\"Academic Quarter Month End\", each List.Max([Month End]), type date}}) ,{{\"AcademicQuarterYearINT\", \"AcademicKey\"}}),",
                "     tbl_fiscal = Table.Join(date_periods, {\"FiscalQuarterYearINT\"}, FY_TBL, {\"FiscalKey\"}, JoinKind.LeftOuter, JoinAlgorithm.SortMerge ) ,",
                "     tbl_academic = Table.Join(tbl_fiscal, {\"AcademicQuarterYearINT\"}, AY_TBL, {\"AcademicKey\"}, JoinKind.LeftOuter, JoinAlgorithm.SortMerge ),",
                "     tbl_merges = Table.RemoveColumns( tbl_academic, {\"FiscalKey\", \"AcademicKey\"} )",
                "in tbl_merges",
                "",
                "in fiscal_academic_periods,",
                "",
                "          // function starts here",
                "          fxNETWORKDAYS = (StartDate, EndDate, optional Holidays as list) =>",
                "            let",
                "              list_Dates = List.Dates(",
                "                StartDate, ",
                "                Number.From(EndDate - StartDate) + 1, ",
                "                Duration.From(1)",
                "              ), ",
                "              DeleteHolidays = ",
                "                if Holidays = null then",
                "                  list_Dates",
                "                else",
                "                  List.Difference(list_Dates, List.Transform(Holidays, Date.From)), ",
                "              DeleteWeekends = List.Select(DeleteHolidays, each Date.DayOfWeek(_, Day.Monday) < 5), ",
                "              CountDays = List.Count(DeleteWeekends)",
                "            in",
                "              CountDays,",
                "",
                "          // function ends here",
                "",
                "",
                "          cols_RemoveToday = Table.RemoveColumns(",
                "            if EndDate < var_CurrentDate then",
                "              Table.SelectRows(extend_calendar, each ([Date] <> var_CurrentDate))",
                "            else",
                "              extend_calendar, ",
                "            {\"DayYearNUM\", \"FiscalFirstDate\"}",
                "          ), ",
                "          cols_Format = Table.TransformColumnTypes(",
                "            cols_RemoveToday, ",
                "            {",
                "              {\"YearNUM\", Int64.Type}, ",
                "              {\"QuarterNUM\", Int64.Type}, ",
                "              {\"MonthNUM\", Int64.Type}, ",
                "              {\"DayMonthNUM\", Int64.Type}, ",
                "              {\"DateINT\", Int64.Type}, ",
                "              {\"DayWeekNUM\", Int64.Type}, ",
                "              {\"ISO YearOFFSET\", Int64.Type}, ",
                "              {\"ISO QuarterYearINT\", Int64.Type}, ",
                "              {\"ISO QuarterOFFSET\", Int64.Type}, ",
                "              {\"Week Number\", Int64.Type}, ",
                "              {\"WeekYearINT\", Int64.Type}, ",
                "              {\"MonthYearINT\", Int64.Type}, ",
                "              {\"QuarterYearINT\", Int64.Type}, ",
                "              {\"FiscalQuarterYearINT\", Int64.Type}, ",
                "              {\"FiscalPeriodNUM\", Int64.Type}, ",
                "              {\"FiscalPeriodYearINT\", Int64.Type}, ",
                "              {\"WeekOFFSET\", Int64.Type}, ",
                "              {\"MonthOFFSET\", Int64.Type}, ",
                "              {\"QuarterOFFSET\", Int64.Type}, ",
                "              {\"YearOFFSET\", Int64.Type}, ",
                "              {\"FiscalYearOFFSET\", Int64.Type}, ",
                "              {\"FiscalWeekYearINT\", Int64.Type},",
                "              {\"Fiscal Week Number\", Int64.Type},",
                "              {\"DateFW\", type date}",
                "            }",
                "          ), ",
                "          cols_Reorder = Table.ReorderColumns(",
                "            cols_Format, ",
                "            {",
                "              \"Date\", ",
                "              \"isYearComplete\", ",
                "              \"IsYTD\",",
                "              \"YearNUM\", ",
                "              \"YearOFFSET\", ",
                "              \"Academic Year\",",
                "              \"Academic_Year\",",
                "              \"AY Selection\",",
                "              \"Fiscal Year\", ",
                "              \"Fiscal_Year\",",
                "              \"FY Selection\", ",
                "              \"IsFuture\",",
                "              \"QuarterNUM\", ",
                "              \"Quarter\", ",
                "              \"Quarter Start\", ",
                "              \"Quarter End\", ",
                "              \"Quarter & Year\", ",
                "              \"QuarterYearINT\", ",
                "              \"QuarterOFFSET\", ",
                "              \"isQuarterComplete\", ",
                "              \"MonthNUM\",",
                "              \"FiscalPeriodNUM\",",
                "              \"Fiscal Month\",",
                "              \"AcademicPeriodNUM\", ",
                "              \"Academic Month\",",
                "              \"Month Start\", ",
                "              \"Month End\", ",
                "              \"Month & Year\", ",
                "              \"MonthYearINT\", ",
                "              \"MonthOFFSET\", ",
                "              \"isMonthComplete\", ",
                "              \"Month Name\", ",
                "              \"Month Short\", ",
                "              \"Month Initial\", ",
                "              \"DayMonthNUM\", ",
                "              \"Week Number\", ",
                "              \"Week Start\", ",
                "              \"Week End\", ",
                "              \"Week & Year\", ",
                "              \"WeekYearINT\", ",
                "              \"WeekOFFSET\", ",
                "              \"WeekCompleted\", ",
                "              \"DayWeekNUM\", ",
                "              \"Day of Week Name\", ",
                "              \"Day Initial\", ",
                "              \"DateINT\", ",
                "              \"DayOffset\", ",
                "              \"IsAfterToday\", ",
                "              \"IsWeekDay\", ",
                "              \"IsHoliday\", ",
                "              \"IsBusinessDay\", ",
                "              \"Day Type\", ",
                "              \"ISO Year\", ",
                "              \"ISO YearOFFSET\", ",
                "              \"ISO QuarterNUM\", ",
                "              \"ISO Quarter\", ",
                "              \"ISO Quarter & Year\", ",
                "              \"ISO QuarterYearINT\", ",
                "              \"ISO QuarterOFFSET\", ",
                "              \"FiscalYearOFFSET\",",
                "              \"FiscalQuarterOFFSET\", ",
                "              \"Fiscal Quarter\", ",
                "              \"FiscalQuarterYearINT\", ",
                "              \"Fiscal Quarter Month Start\",",
                "              \"Fiscal Quarter Month End\",",
                "              \"Fiscal Period\", ",
                "              \"FiscalPeriodYearINT\", ",
                "              \"DateFW\", ",
                "              \"Fiscal Week Number\", ",
                "              \"Fiscal Week\", ",
                "              \"FiscalWeekYearINT\",",
                "              \"AcademicYearOFFSET\", ",
                "              \"AcademicQuarterOFFSET\",",
                "              \"Academic Quarter Month Start\",",
                "              \"Academic Quarter Month End\", ",
                "              \"IsCurrentFY\", ",
                "              \"IsCurrentFQ\", ",
                "              \"IsCurrentFP\", ",
                "              \"IsCurrentFW\", ",
                "              \"IsPreviousYTD\", ",
                "              \"IsPreviousFY\",",
                "              \"2W Date\",",
                "              \"2M Date\",",
                "              \"6M Date\"",
                "            }",
                "          ), ",
                "          AYCols = {",
                "            \"Academic Year\",",
                "            \"Academic_Year\",",
                "            \"AY Selection\",",
                "            \"Academic Quarter\", ",
                "            \"AcademicQuarterYearINT\",",
                "            \"Academic Quarter Month Start\",",
                "            \"Academic Quarter Month End\", ",
                "            \"Academic Month\", ",
                "            \"AcademicPeriodNUM\", ",
                "            \"Academic Period\", ",
                "            \"AcademicPeriodYearINT\", ",
                "            \"AcademicYearOFFSET\", ",
                "            \"AcademicQuarterOFFSET\",",
                "            \"IsCurrentAQ\", ",
                "            \"IsCurrentAP\", ",
                "            \"IsPreviousAY\", ",
                "            \"IsCurrentAY\", ",
                "            \"AYStartDate\",",
                "            \"AYEndDate\"",
                "",
                "          }, ",
                "          FYCols = {",
                "            \"ISO QuarterNUM\", ",
                "            \"Fiscal Year\",",
                "            \"Fiscal_Year\",",
                "            \"FY Selection\", ",
                "            \"Fiscal Quarter\", ",
                "            \"FiscalQuarterYearINT\",",
                "            \"Fiscal Quarter Month Start\",",
                "            \"Fiscal Quarter Month End\",",
                "            \"Fiscal Month\", ",
                "            \"FiscalPeriodNUM\", ",
                "            \"Fiscal Period\", ",
                "            \"FiscalPeriodYearINT\", ",
                "            \"DateFW\", ",
                "            \"Fiscal Week Number\", ",
                "            \"Fiscal Week\", ",
                "            \"FiscalWeekYearINT\", ",
                "            \"FiscalYearOFFSET\",",
                "            \"FiscalQuarterOFFSET\",",
                "            \"IsCurrentFQ\", ",
                "            \"IsCurrentFP\", ",
                "            \"IsCurrentFW\", ",
                "            \"IsPreviousFY\", ",
                "            \"IsCurrentFY\"",
                "          }, ",
                "          AllCols = List.Union({FYCols, AYCols}), ",
                "          ListCols = ",
                "            if var_FYAYTest then",
                "              Table.RemoveColumns(cols_Reorder, AllCols)",
                "            else if var_AYLogicTest then",
                "              Table.RemoveColumns(cols_Reorder, AYCols)",
                "            else if var_FYLogicTest then",
                "              Table.RemoveColumns(cols_Reorder, FYCols)",
                "            else",
                "              Table.RemoveColumns(",
                "                cols_Reorder, ",
                "                {\"DateFW\", \"FiscalWeekYearINT\", \"ISO QuarterNUM\" /* \"FiscalPeriodNUM\",  */                         }",
                "              )",
                "in",
                "    ListCols"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "tbl_fnDates",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Academic Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "1895f06e-1a3a-41be-9e00-0d2ac493e3aa",
            "sourceColumn": "Academic Year",
            "summarizeBy": "none"
          },
          {
            "name": "Academic_Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "0730470d-820a-4a0a-a069-6b631266b050",
            "sourceColumn": "Academic_Year",
            "summarizeBy": "none"
          },
          {
            "name": "AY Selection",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "dfcde611-880d-4707-8c85-3e9d3dfc5c81",
            "sourceColumn": "AY Selection",
            "summarizeBy": "none"
          },
          {
            "name": "Fiscal Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "91cb9ce5-a0a4-49f8-a768-ef2dcb649984",
            "sourceColumn": "Fiscal Year",
            "summarizeBy": "none"
          },
          {
            "name": "Fiscal_Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "dc8cc1ff-dd74-42e9-a9c6-892b8d3f49c2",
            "sourceColumn": "Fiscal_Year",
            "summarizeBy": "none"
          },
          {
            "name": "FY Selection",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "b41f13b2-a321-4738-8585-eb5f01ba3e9e",
            "sourceColumn": "FY Selection",
            "summarizeBy": "none"
          },
          {
            "name": "Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "6595e5b4-31d3-4dd6-ad89-1a094bfdca32",
            "sourceColumn": "Date",
            "summarizeBy": "none"
          },
          {
            "name": "IsYTD",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "bb17de61-fdb7-4855-ab16-227788f72837",
            "sourceColumn": "IsYTD",
            "summarizeBy": "none"
          },
          {
            "name": "IsFuture",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "eef4fc59-8c18-418d-942f-a4ab6d175407",
            "sourceColumn": "IsFuture",
            "summarizeBy": "none"
          },
          {
            "name": "YearNUM",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "6ff42047-6e87-49ba-a405-d7841e9cc462",
            "sourceColumn": "YearNUM",
            "summarizeBy": "sum"
          },
          {
            "name": "YearOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "197de847-216e-4c8c-bf93-1463a1c90720",
            "sourceColumn": "YearOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "isYearComplete",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "56fb1ef0-7574-49e3-addd-98eb2ea11012",
            "sourceColumn": "isYearComplete",
            "summarizeBy": "none"
          },
          {
            "name": "QuarterNUM",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "8301b394-78ac-4ac0-a35e-d3193386ec28",
            "sourceColumn": "QuarterNUM",
            "summarizeBy": "sum"
          },
          {
            "name": "Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "435f6531-927d-4709-ae37-10371c704eae",
            "sourceColumn": "Quarter",
            "summarizeBy": "none"
          },
          {
            "name": "Quarter Start",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "a2bb7dda-6de5-4eb8-b41e-230d942667f1",
            "sourceColumn": "Quarter Start",
            "summarizeBy": "none"
          },
          {
            "name": "Quarter End",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "6d9b87c7-1016-48fd-aa8c-25f76d7506c6",
            "sourceColumn": "Quarter End",
            "summarizeBy": "none"
          },
          {
            "name": "Quarter & Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d9b085f5-4b2c-4704-947c-a23974ced8ff",
            "sourceColumn": "Quarter & Year",
            "summarizeBy": "none"
          },
          {
            "name": "QuarterYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "de2ecd51-2e43-4315-b90d-3a5c8f29b49a",
            "sourceColumn": "QuarterYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "QuarterOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "5d565728-00a8-4757-a91c-a7bdb285bf54",
            "sourceColumn": "QuarterOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "isQuarterComplete",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "4d52e47a-4d79-4b95-8669-ab75cce48622",
            "sourceColumn": "isQuarterComplete",
            "summarizeBy": "none"
          },
          {
            "name": "MonthNUM",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "d38bde74-3cbe-452f-9495-aaea3fc664a8",
            "sourceColumn": "MonthNUM",
            "summarizeBy": "sum"
          },
          {
            "name": "FiscalPeriodNUM",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "f3557d7e-3d6f-4a60-a369-dfd817b2ca19",
            "sourceColumn": "FiscalPeriodNUM",
            "summarizeBy": "sum"
          },
          {
            "name": "Month Selection",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "56af52fa-8dc6-4328-aae3-ce7f30237a82",
            "sourceColumn": "Month Selection",
            "summarizeBy": "none"
          },
          {
            "name": "Fiscal Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "2d813df7-2e1d-4709-a297-f5eef3320719",
            "sourceColumn": "Fiscal Month",
            "summarizeBy": "none"
          },
          {
            "name": "AcademicPeriodNUM",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "3f3f3855-529d-4e1f-99c7-cd3bd7fdad0a",
            "sourceColumn": "AcademicPeriodNUM",
            "summarizeBy": "sum"
          },
          {
            "name": "Academic Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "860e3e13-86bf-454d-9936-104c6e5ec0aa",
            "sourceColumn": "Academic Month",
            "summarizeBy": "none"
          },
          {
            "name": "Month Start",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "b2565f47-ef22-4299-bc91-fc58053ffde6",
            "sourceColumn": "Month Start",
            "summarizeBy": "none"
          },
          {
            "name": "Month End",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "ea4e2292-b057-4aac-90fd-65d292a922ca",
            "sourceColumn": "Month End",
            "summarizeBy": "none"
          },
          {
            "name": "Month & Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a53d1b46-7cc1-4e61-836a-55bbd831e6dd",
            "sourceColumn": "Month & Year",
            "summarizeBy": "none"
          },
          {
            "name": "MonthYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "984df8c2-1f2f-4eaa-8e00-286d9efecca2",
            "sourceColumn": "MonthYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "MonthOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "d091d3b9-dd46-405d-a46c-df6630e30b36",
            "sourceColumn": "MonthOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "isMonthComplete",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "c8a72b08-aa4c-40c7-bfde-4f67cb38111c",
            "sourceColumn": "isMonthComplete",
            "summarizeBy": "none"
          },
          {
            "name": "Month Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "bdce4946-5ab4-4c23-89c2-d66eef5219c1",
            "sourceColumn": "Month Name",
            "summarizeBy": "none"
          },
          {
            "name": "Month Short",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "9a3f16dd-9832-4aad-bfcf-6d499d1ec8a4",
            "sourceColumn": "Month Short",
            "summarizeBy": "none"
          },
          {
            "name": "Month Initial",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "fda1bbb1-97a0-4b65-b91d-64971ec4f3bc",
            "sourceColumn": "Month Initial",
            "summarizeBy": "none"
          },
          {
            "name": "DayMonthNUM",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "b5f59454-51a3-4d20-aff6-dd8216442541",
            "sourceColumn": "DayMonthNUM",
            "summarizeBy": "sum"
          },
          {
            "name": "Week Number",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "d2cf4cda-4845-4d76-8165-f0226ccc42f8",
            "sourceColumn": "Week Number",
            "summarizeBy": "sum"
          },
          {
            "name": "Week Start",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "518f3de6-7fd8-4d3d-bd65-02c11e9356f4",
            "sourceColumn": "Week Start",
            "summarizeBy": "none"
          },
          {
            "name": "Week End",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "398f1b56-e950-4594-b150-b16895c6cad3",
            "sourceColumn": "Week End",
            "summarizeBy": "none"
          },
          {
            "name": "Week & Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "b0c9c67f-3c02-42df-bd9a-12db7083271d",
            "sourceColumn": "Week & Year",
            "summarizeBy": "none"
          },
          {
            "name": "WeekYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "df55c2af-3296-47bb-a0c5-1d8e894b8fe1",
            "sourceColumn": "WeekYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "WeekOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "a2e6fca6-9caf-43a9-ba89-2868a5090fc7",
            "sourceColumn": "WeekOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "WeekCompleted",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "30726ccf-b3e9-46f0-915a-8960a67ca296",
            "sourceColumn": "WeekCompleted",
            "summarizeBy": "none"
          },
          {
            "name": "DayWeekNUM",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "348d9251-68d2-4cca-a516-db1344d8a384",
            "sourceColumn": "DayWeekNUM",
            "summarizeBy": "sum"
          },
          {
            "name": "Day of Week Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "683152ec-38d5-4e93-85e1-41e384ceeb8e",
            "sourceColumn": "Day of Week Name",
            "summarizeBy": "none"
          },
          {
            "name": "Day Initial",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ff067a88-abd4-4384-bdce-facba7dee183",
            "sourceColumn": "Day Initial",
            "summarizeBy": "none"
          },
          {
            "name": "DateINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "c55c19c3-f9d0-409a-9d3a-1d18f23f3388",
            "sourceColumn": "DateINT",
            "summarizeBy": "sum"
          },
          {
            "name": "DayOffset",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "5e0a2883-5566-4c42-a561-caa5b47137c9",
            "sourceColumn": "DayOffset",
            "summarizeBy": "sum"
          },
          {
            "name": "IsAfterToday",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "def7e6f2-d20d-4326-a836-480ae9005fb1",
            "sourceColumn": "IsAfterToday",
            "summarizeBy": "none"
          },
          {
            "name": "IsWeekDay",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "8340ca2c-1041-4e30-a00c-6c538ec38778",
            "sourceColumn": "IsWeekDay",
            "summarizeBy": "none"
          },
          {
            "name": "IsHoliday",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "55ac7114-5bc8-4804-9679-01b612883fe0",
            "sourceColumn": "IsHoliday",
            "summarizeBy": "none"
          },
          {
            "name": "IsBusinessDay",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "cd433ff7-144a-4e18-afd9-50cd36d11f32",
            "sourceColumn": "IsBusinessDay",
            "summarizeBy": "none"
          },
          {
            "name": "Day Type",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "8e13aefb-1df5-43d6-9523-3c59baafee11",
            "sourceColumn": "Day Type",
            "summarizeBy": "none"
          },
          {
            "name": "ISO Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "784cc2b9-f317-4625-89b1-f0a043424422",
            "sourceColumn": "ISO Year",
            "summarizeBy": "sum"
          },
          {
            "name": "ISO YearOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "aa749215-1ad3-46a9-b447-ec16391943d5",
            "sourceColumn": "ISO YearOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "Academic Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "80ce006e-a838-43b2-aa1b-b4cceefc227e",
            "sourceColumn": "Academic Quarter",
            "summarizeBy": "none"
          },
          {
            "name": "AcademicQuarterYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "0afe286b-21f0-4746-9f75-8175308feb2c",
            "sourceColumn": "AcademicQuarterYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "ISO Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "18bf5697-f3be-4643-841f-eac66478d5af",
            "sourceColumn": "ISO Quarter",
            "summarizeBy": "none"
          },
          {
            "name": "ISO Quarter & Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "18aa12fa-b0ea-4c42-980d-8117fe2c2fe5",
            "sourceColumn": "ISO Quarter & Year",
            "summarizeBy": "none"
          },
          {
            "name": "ISO QuarterYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "8054a80b-f578-4c55-ba7a-b77d2d0b2242",
            "sourceColumn": "ISO QuarterYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "Academic Period",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a86b68cc-4db4-48d9-86cc-a54ff468f48f",
            "sourceColumn": "Academic Period",
            "summarizeBy": "none"
          },
          {
            "name": "ISO QuarterOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "8945985c-c6f7-45bc-a69b-68ef49331719",
            "sourceColumn": "ISO QuarterOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "AcademicPeriodYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "94aa7d2f-8041-440d-969b-b6ca77a4aa09",
            "sourceColumn": "AcademicPeriodYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "AYStartDate",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "df14de13-1894-477c-9181-339ce9e153c9",
            "sourceColumn": "AYStartDate",
            "summarizeBy": "none"
          },
          {
            "name": "AYEndDate",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "3fe7c2a8-5c71-4abf-b8b2-0ac71040ecac",
            "sourceColumn": "AYEndDate",
            "summarizeBy": "none"
          },
          {
            "name": "FYStartDate",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "fb9a1c5e-3a92-4354-ae1d-141f116cbb10",
            "sourceColumn": "FYStartDate",
            "summarizeBy": "none"
          },
          {
            "name": "FYEndDate",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "6db414f8-3da9-4a87-a0b5-3a304fc978b2",
            "sourceColumn": "FYEndDate",
            "summarizeBy": "none"
          },
          {
            "name": "FiscalYearOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "dfd50884-c9e6-4b48-b9ba-42bba3e87f4b",
            "sourceColumn": "FiscalYearOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "FiscalQuarterOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "bcd13497-26cb-4ec6-907a-ebbad679007c",
            "sourceColumn": "FiscalQuarterOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "Fiscal Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "3d0c219e-4d20-4bd7-9e69-3980e3dda229",
            "sourceColumn": "Fiscal Quarter",
            "summarizeBy": "none"
          },
          {
            "name": "FiscalQuarterYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "3e61c2ca-7551-4406-b1d2-1002d82a2141",
            "sourceColumn": "FiscalQuarterYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "Fiscal Period",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "2972424a-1102-410a-8ad0-76c714131f0f",
            "sourceColumn": "Fiscal Period",
            "summarizeBy": "none"
          },
          {
            "name": "FiscalPeriodYearINT",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "50ba7b7d-a0d5-4ccb-81d6-4467140dc339",
            "sourceColumn": "FiscalPeriodYearINT",
            "summarizeBy": "sum"
          },
          {
            "name": "Fiscal Week Number",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "cf1c3dca-7e1a-4630-ac04-4c82ed267868",
            "sourceColumn": "Fiscal Week Number",
            "summarizeBy": "sum"
          },
          {
            "name": "Fiscal Week",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "85b8bd4d-c574-435f-8d36-cbf5d9c34772",
            "sourceColumn": "Fiscal Week",
            "summarizeBy": "none"
          },
          {
            "name": "AcademicYearOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "6e589f53-7956-42f2-ad3f-29cb85260d4f",
            "sourceColumn": "AcademicYearOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "AcademicQuarterOFFSET",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "d1558c4b-a39e-48a3-87f1-bd8ebcf9f09b",
            "sourceColumn": "AcademicQuarterOFFSET",
            "summarizeBy": "sum"
          },
          {
            "name": "IsCurrentFY",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "3ab362e2-ad2b-439e-a024-f58cd045937f",
            "sourceColumn": "IsCurrentFY",
            "summarizeBy": "none"
          },
          {
            "name": "IsCurrentAY",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "8b171c04-3149-489c-a23f-df9008e67955",
            "sourceColumn": "IsCurrentAY",
            "summarizeBy": "none"
          },
          {
            "name": "IsCurrentFQ",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "392bc772-5840-44ec-8ddd-47f83c90b816",
            "sourceColumn": "IsCurrentFQ",
            "summarizeBy": "none"
          },
          {
            "name": "IsCurrentAQ",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "1eb548f2-c617-49d1-8285-3503de64eb36",
            "sourceColumn": "IsCurrentAQ",
            "summarizeBy": "none"
          },
          {
            "name": "IsCurrentFP",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "9dca6fea-5915-46c5-96a9-0dbfee73c2e3",
            "sourceColumn": "IsCurrentFP",
            "summarizeBy": "none"
          },
          {
            "name": "IsCurrentAP",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "941ea47e-2f6f-4c4d-8a07-ea9373cb65af",
            "sourceColumn": "IsCurrentAP",
            "summarizeBy": "none"
          },
          {
            "name": "IsCurrentFW",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "a2b27a4c-f604-407c-a5bd-675b9155bb1e",
            "sourceColumn": "IsCurrentFW",
            "summarizeBy": "none"
          },
          {
            "name": "IsPreviousYTD",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "343b6ecc-f763-4dca-8122-0d551959cd77",
            "sourceColumn": "IsPreviousYTD",
            "summarizeBy": "none"
          },
          {
            "name": "IsPreviousFY",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "b3ca8cca-06c8-4b65-8dc2-58813dd3f2aa",
            "sourceColumn": "IsPreviousFY",
            "summarizeBy": "none"
          },
          {
            "name": "IsPreviousAY",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "b571f12b-57aa-4935-9c5c-bee39aa4870e",
            "sourceColumn": "IsPreviousAY",
            "summarizeBy": "none"
          },
          {
            "name": "CY Selection",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "2a178b51-850b-4b3e-9a89-863bbe4dc4ae",
            "sourceColumn": "CY Selection",
            "summarizeBy": "none"
          },
          {
            "name": "Fiscal Quarter Month Start",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "737d6fb7-43fa-40dc-b080-4b5fc077375e",
            "sourceColumn": "Fiscal Quarter Month Start",
            "summarizeBy": "none"
          },
          {
            "name": "Fiscal Quarter Month End",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "1290b585-03de-40b9-bf75-21285bae6d2f",
            "sourceColumn": "Fiscal Quarter Month End",
            "summarizeBy": "none"
          },
          {
            "name": "Academic Quarter Month Start",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "69fd9879-b180-4536-8b98-7bb46524261c",
            "sourceColumn": "Academic Quarter Month Start",
            "summarizeBy": "none"
          },
          {
            "name": "Academic Quarter Month End",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "c74fd2c0-645a-420e-9ae6-383c49458764",
            "sourceColumn": "Academic Quarter Month End",
            "summarizeBy": "none"
          },
          {
            "name": "2W Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "86f339e6-5f99-400b-8176-b50edf3433db",
            "sourceColumn": "2W Date",
            "summarizeBy": "none"
          },
          {
            "name": "2M Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "3bd8eee2-71fe-4271-8795-5c69b1a9d4ce",
            "sourceColumn": "2M Date",
            "summarizeBy": "none"
          },
          {
            "name": "6M Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "9c0aa5d2-8033-4645-aa72-8f1e827e7650",
            "sourceColumn": "6M Date",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "2246c19c-b9d0-41f8-b79c-09ae234614ef",
        "partitions": [
          {
            "name": "tbl_fnDates",
            "mode": "import",
            "source": {
              "expression": [
                "let",
                "    Source = fnDates(2023, 2025, 4, 8, null, null, null)",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      }
    ]
  }
}